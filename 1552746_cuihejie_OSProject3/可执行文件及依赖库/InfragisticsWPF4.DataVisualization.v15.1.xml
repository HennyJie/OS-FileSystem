<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InfragisticsWPF4.DataVisualization.v15.1</name>
    </assembly>
    <members>
        <member name="T:Infragistics.Collections.AggregateValueCollection">
            <summary>
            Represents a collection of AggregateValueSource
            </summary>
        </member>
        <member name="M:Infragistics.Collections.AggregateValueCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.AggregateValueCollection"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.AggregateValueCollection.GetEnumerator">
            <summary>
            Gets the enumerator for iterating through the collection.
            </summary>
            <returns>An AggregateValueEnumerator for this AggregateValueCollection.</returns>
        </member>
        <member name="P:Infragistics.Collections.AggregateValueCollection.ItemsSources">
            <summary>
            Gets or sets the items sources.
            </summary>
            <value>The items sources.</value>
        </member>
        <member name="E:Infragistics.Collections.AggregateValueCollection.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.AggregateValueSource">
            <summary>
            Represents the objects build AggregateValueCollection. Each AggregateValueSource has its own items source.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.AggregateValueSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.AggregateValueSource"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.Collections.AggregateValueSource.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Collections.AggregateValueSource.ValueMemberPathProperty">
            <summary>
            Identifies the ValueMemberPath dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.AggregateValueSource.ItemsSource">
            <summary>
            Gets or sets the items source.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.AggregateValueSource.ValueMemberPath">
            <summary>
            Gets or sets the value member path.
            </summary>
        </member>
        <member name="E:Infragistics.Collections.AggregateValueSource.PropertyChanged">
            <summary>
            Event raised whenever a property value is changed.
            </summary>
        </member>
        <member name="E:Infragistics.Collections.AggregateValueSource.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="T:Infragistics.AutomationPeers.XamDockAutomationPeer">
            <summary>
            Automation peer class for the XamDock control.
            </summary>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamDockAutomationPeer.#ctor(Infragistics.Controls.XamDock)">
            <summary>
            XamDockAutomationPeer constructor.
            </summary>
            <param name="dock"></param>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamDockAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Overrides the framework invocation of when a request is made for what types of user interaction are avalible. 
            </summary>
            <param name="patternInterface">This is the type of user interaction requested.</param>
            <returns>An object that can handle this pattern or null if none available.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamDockAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Overrides the framework invocation of what generic type of control this is.
            </summary>
            <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationControlType"/> that describes this control.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamDockAutomationPeer.GetClassNameCore">
            <summary>
            Overrides the framework invocation requesting a string that describes this control.
            </summary>
            <returns>A string describing the name of this control.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamDockAutomationPeer.GetNameCore">
            <summary>
            Gets the value of the XamDock's Name property.
            </summary>
            <returns>The value of the XamDock's Name property.</returns>
        </member>
        <member name="P:Infragistics.AutomationPeers.XamDockAutomationPeer.Dock">
            <summary>
            A reference to the XamDock control.
            </summary>
        </member>
        <member name="T:Infragistics.AutomationPeers.XamZoombarAutomationPeer">
            <summary>
            Automation peer class for XamZoombar.
            </summary>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamZoombarAutomationPeer.#ctor(Infragistics.Controls.XamZoombar)">
            <summary>
            XamZoombarAutomationPeer constructor.
            </summary>
            <param name="zoombar"></param>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamZoombarAutomationPeer.Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
            <summary>
            Scrolls the zoombar to the given horizontal and vertical distance.
            </summary>
            <param name="horizontalAmount">The horizontal distance to scroll.</param>
            <param name="verticalAmount">The vertical distance to scroll.</param>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamZoombarAutomationPeer.SetScrollPercent(System.Double,System.Double)">
            <summary>
            Sets the scroll position of the zoombar, expressed as a percentage.
            </summary>
            <param name="horizontalPercent">The percentage to scroll by horizontally.</param>
            <param name="verticalPercent">The percentage to scroll by vertically.</param>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamZoombarAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Overrides the framework invocation of when a request is made for what types of user interaction are avalible. 
            </summary>
            <param name="patternInterface">This is the type of user interaction requested.</param>
            <returns>An object that can handle this pattern or null if none available.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamZoombarAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Overrides the framework invocation of what generic type of control this is.
            </summary>
            <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationControlType"/> that describes this control.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamZoombarAutomationPeer.GetClassNameCore">
            <summary>
            Overrides the framework invocation requesting a string that describes this control.
            </summary>
            <returns>A string describing the name of this control.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamZoombarAutomationPeer.GetNameCore">
            <summary>
            Gets the value the Zoombar's Name property.
            </summary>
            <returns>The value of the Zoombar's Name propery.</returns>
        </member>
        <member name="P:Infragistics.AutomationPeers.XamZoombarAutomationPeer.Zoombar">
            <summary>
            A reference to the XamZoombar.
            </summary>
        </member>
        <member name="P:Infragistics.AutomationPeers.XamZoombarAutomationPeer.HorizontallyScrollable">
            <summary>
            Boolean indicating whether or not the zoombar is horizontally scrollable.
            </summary>
        </member>
        <member name="P:Infragistics.AutomationPeers.XamZoombarAutomationPeer.HorizontalScrollPercent">
            <summary>
            A numeric value representing the horizontal scroll position as a percentage of the scrollable area.
            </summary>
        </member>
        <member name="P:Infragistics.AutomationPeers.XamZoombarAutomationPeer.HorizontalViewSize">
            <summary>
            The horizontal range of the zoombar.
            </summary>
        </member>
        <member name="P:Infragistics.AutomationPeers.XamZoombarAutomationPeer.VerticallyScrollable">
            <summary>
            Boolean indicating whether or not the zoombar is vertically scrollable.
            </summary>
        </member>
        <member name="P:Infragistics.AutomationPeers.XamZoombarAutomationPeer.VerticalScrollPercent">
            <summary>
            A numeric value representing the vertical scroll position as a percentage of the scrollable area.
            </summary>
        </member>
        <member name="P:Infragistics.AutomationPeers.XamZoombarAutomationPeer.VerticalViewSize">
            <summary>
            The vertical range of the zoombar.
            </summary>
        </member>
        <member name="T:Infragistics.BrushCollection">
            <summary>
            Simple collection of Brush objects
            </summary>
        </member>
        <member name="M:Infragistics.BrushCollection.InsertItem(System.Int32,System.Windows.Media.Brush)">
            <summary>
            Inserts a brush in specified index of <see cref="T:Infragistics.BrushCollection"/>
            </summary>
        </member>
        <member name="M:Infragistics.BrushCollection.SetItem(System.Int32,System.Windows.Media.Brush)">
            <summary>
            Sets a brush in specified index of <see cref="T:Infragistics.BrushCollection"/>
            </summary>
        </member>
        <member name="M:Infragistics.BrushCollection.SelectRandom">
            <summary>
            Returns a random brush in the collection.
            </summary>
            <returns>A random brush in this collection.</returns>
        </member>
        <member name="M:Infragistics.BrushCollection.InterpolateRandom">
            <summary>
            Returns a random brush interpolated from the brushes in this collection.
            </summary>
            <returns>A random brush interpolated from the brushes in this collection.</returns>
        </member>
        <member name="M:Infragistics.BrushCollection.GetInterpolatedBrush(System.Double)">
            <summary>
            Gets the brush at the specified index.  If index is not an integer, the result of this function call will be a brush interpolated between the brushes at the previous and following index values.
            </summary>
            <param name="index">The index of the brush to return.</param>
            <returns>The brush at the specified index, or if the specified index is not an integer, an interpolated brush between the previous and next index.</returns>
        </member>
        <member name="P:Infragistics.BrushCollection.InterpolationMode">
            <summary>
            Sets or gets the interpolation mode used to interpolate brushes.
            </summary>
        </member>
        <member name="P:Infragistics.BrushCollection.Item(System.Double)">
            <summary>
            Gets a brush at the specified real-precision index. For non-integer
            indices, this requires interpolation.
            </summary>
            <param name="index">real-precision index</param>
            <returns>Brush for specified index(may be interpolated)</returns>
        </member>
        <member name="P:Infragistics.BrushCollection.Item(System.Int32)">
            <summary>
            Gets or sets a brush at the specified index.
            </summary>
            <param name="index">The index of the brush to return.</param>
            <returns>A brush for the specified index.</returns>
        </member>
        <member name="T:Infragistics.AxisBase">
            <summary>
            Base class for axes.
            </summary>
        </member>
        <member name="M:Infragistics.AxisBase.#ctor">
            <summary>
            AxisBase constructor.
            </summary>
        </member>
        <member name="F:Infragistics.AxisBase.AutoRangeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.AxisBase.AutoRange"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.AxisBase.ScrollScaleProperty">
            <summary>
            Identifies the ScrollScale dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.AxisBase.ScrollPositionProperty">
            <summary>
            Identifies the ScrollPosition dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.AxisBase.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method invoked when a property is changed on an AxisBase object.
            </summary>
            <param name="d">The axis for which a property has changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.AxisBase.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method invoked when a property is changed on this axis.
            </summary>
            <param name="e">The DependencyPropertyChangedEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.AxisBase.Finalize">
            <summary>
            AxisBase finalizer.
            </summary>
        </member>
        <member name="M:Infragistics.AxisBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Infragistics.AxisBase.Dispose">
            <summary>
            Disposes the current instance.
            </summary>
        </member>
        <member name="P:Infragistics.AxisBase.AutoRange">
            <summary>
            Gets or sets a value indicating whether the Minimum, Maximum and Unit are automatically calculated. To create manual range AutoRange property has to be set to false and Minimum, Maximum and Unit have to be set.
            </summary>
            <remarks>
            By default, chart determines the minimum and maximum range values of the axis. 
            You can customize the scale to better meet your needs. The default value for AutoRange is true.
            </remarks>
            <seealso cref="F:Infragistics.AxisBase.AutoRangeProperty"/>
        </member>
        <member name="P:Infragistics.AxisBase.ScrollScale">
            <summary>
            Gets or sets the scale of the scrollable area, expressed as a value between 0 and 1.
            </summary>
            <value>The scale of the scrollable area.</value>        
        </member>
        <member name="P:Infragistics.AxisBase.ScrollPosition">
            <summary>
            Gets or sets the position of the current view inside the scrollable area, expressed as a value between 0 and 1.
            </summary>
            <value>The position of the current view inside the scrollable area.</value>        
        </member>
        <member name="P:Infragistics.AxisBase.Disposed">
            <summary>
            True if this object has been disposed, otherwise False.
            </summary>
        </member>
        <member name="T:Infragistics.MarkBase">
            <summary>
            Base class for mark objects.
            </summary>
        </member>
        <member name="M:Infragistics.MarkBase.#ctor">
            <summary>
            MarkBase constructor.
            </summary>
        </member>
        <member name="F:Infragistics.MarkBase.StrokeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.MarkBase.Stroke"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.MarkBase.FillProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.MarkBase.Fill"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.MarkBase.StrokeThicknessProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.MarkBase.StrokeThickness"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.MarkBase.TickMarkSizeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.MarkBase.TickMarkSize"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.MarkBase.OnTickMarkSizeValidate(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>True if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="P:Infragistics.MarkBase.Stroke">
            <summary>
            Gets or sets the Brush that specifies how to paint the Shape outline.
            </summary>
            <seealso cref="F:Infragistics.MarkBase.StrokeProperty"/>
        </member>
        <member name="P:Infragistics.MarkBase.Fill">
            <summary>
            Gets or sets the Brush that specifies how to paint the Shape outline.
            </summary>
            <seealso cref="F:Infragistics.MarkBase.FillProperty"/>
        </member>
        <member name="P:Infragistics.MarkBase.StrokeThickness">
            <summary>
            Gets or sets the width of the Shape outline. 
            </summary>
            <seealso cref="F:Infragistics.MarkBase.StrokeThicknessProperty"/>
        </member>
        <member name="P:Infragistics.MarkBase.TickMarkSize">
            <summary>
            Gets or sets the TickMark size. This is scaling factor applied to the default TickMark size. Value 1 is default size, a value between 0 and 1 decrease the default TickMark size and a value greater than 1 increase the default TickMark size. 
            </summary>
            <seealso cref="F:Infragistics.MarkBase.TickMarkSizeProperty"/>
        </member>
        <member name="T:Infragistics.StripeBase">
            <summary>
            Stripe keeps appearance, animation and unit properties for 
            axis stripe.
            </summary>
        </member>
        <member name="M:Infragistics.StripeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.StripeBase"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.StripeBase.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="F:Infragistics.StripeBase.StrokeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.StripeBase.Stroke"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.StripeBase.StrokeThicknessProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.StripeBase.StrokeThickness"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.StripeBase.FillProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.StripeBase.Fill"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.StripeBase.Stroke">
            <summary>
            Gets or sets the Brush that specifies how to paint the Shape outline.
            </summary>
            <seealso cref="F:Infragistics.StripeBase.StrokeProperty"/>
        </member>
        <member name="P:Infragistics.StripeBase.StrokeThickness">
            <summary>
            Gets or sets the width of the Shape outline. 
            </summary>
            <seealso cref="F:Infragistics.StripeBase.StrokeThicknessProperty"/>
        </member>
        <member name="P:Infragistics.StripeBase.Fill">
            <summary>
            Gets or sets the Brush that specifies how to paint the interior of the shape. 
            </summary>
            <seealso cref="F:Infragistics.StripeBase.FillProperty"/>
        </member>
        <member name="T:Infragistics.StripeGroupBase">
            <summary>
            Represents a set of axis stripes.
            </summary>
        </member>
        <member name="M:Infragistics.StripeGroupBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.StripeGroupBase"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.StripeGroupBase.StrokeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.StripeGroupBase.Stroke"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.StripeGroupBase.StrokeThicknessProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.StripeGroupBase.StrokeThickness"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.StripeGroupBase.StyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.StripeGroupBase.Style"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.StripeGroupBase.FillProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.StripeGroupBase.Fill"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.StripeGroupBase.UnitProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.StripeGroupBase.Unit"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.StripeGroupBase.AxisUnitValidateCallback(System.Object)">
            <summary>
            Represents a method used as a callback when registering a new dependency property or attached property. 
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>true if the value was validated; false if the submitted value was invalid.</returns>
        </member>
        <member name="F:Infragistics.StripeGroupBase.WidthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.StripeGroupBase.Width"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.StripeGroupBase.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Represents the callback that is invoked when the effective property value of a given dependency property changes.
            </summary>
            <param name="d">The DependencyObject on which the property is used.</param>
            <param name="e">Arguments that are issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="M:Infragistics.StripeGroupBase.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method invoked when a property is changed on this stripe group.
            </summary>
            <param name="e">The DependencyPropertyChangedEventArgs in context.</param>
        </member>
        <member name="P:Infragistics.StripeGroupBase.Stroke">
            <summary>
            Gets or sets the Brush that specifies how to paint the Shape outline.
            </summary>
            <seealso cref="F:Infragistics.StripeGroupBase.StrokeProperty"/>
        </member>
        <member name="P:Infragistics.StripeGroupBase.StrokeThickness">
            <summary>
            Gets or sets the width of the Shape outline. 
            </summary>
            <seealso cref="F:Infragistics.StripeGroupBase.StrokeThicknessProperty"/>
        </member>
        <member name="P:Infragistics.StripeGroupBase.Style">
            <summary>
            Gets or sets the style to be applied to the label during rendering.
            </summary>
        </member>
        <member name="P:Infragistics.StripeGroupBase.Fill">
            <summary>
            Gets or sets the Brush that specifies how to paint the interior of the shape. 
            </summary>
            <seealso cref="F:Infragistics.StripeGroupBase.FillProperty"/>
        </member>
        <member name="P:Infragistics.StripeGroupBase.Unit">
            <summary>
            Gets or sets a distance between two neighboring stripes. If value is 0 double axis unit value is used. 
            </summary>
            <seealso cref="F:Infragistics.StripeGroupBase.UnitProperty"/>
        </member>
        <member name="P:Infragistics.StripeGroupBase.Width">
            <summary>
            Gets or sets a the stripe width
            </summary>
            <seealso cref="F:Infragistics.StripeGroupBase.WidthProperty"/>
        </member>
        <member name="T:Infragistics.Controls.Charts.TrendCalculators">
            <summary>
            Utility class for calculating trend line values.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.TrendCalculators.WMA(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the weighted moving average.
            </summary>
            <remarks>
            The first period values are calculated by accumulation and may be considered invalid.
            </remarks>
            <param name="sequence">Sequence to average.</param>
            <param name="period">Average period.</param>
            <returns>The weighted moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.TrendCalculators.EMA(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the exponential moving average.
            </summary>
            <remarks>
            The first period values are calculated by accumulation and may be considered invalid.
            </remarks>
            <param name="sequence">Sequence to average.</param>
            <param name="period">Average period.</param>
            <returns>The exponential moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.TrendCalculators.MMA(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the modified moving average.
            </summary>
            <remarks>
            The first period values are calculated by accumulation and may be considered invalid.
            </remarks>
            <param name="sequence">Sequence to average.</param>
            <param name="period">Average period.</param>
            <returns>The modified moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.TrendCalculators.CMA(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the cumulative moving average.
            </summary>
            <param name="sequence">Sequence to average.</param>
            <returns>The cumulative moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.TrendCalculators.SMA(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the simple moving average.
            </summary>
            <remarks>
            The first period values are calculated by accumulation and may be considered invalid.
            </remarks>
            <param name="sequence">Sequence to average.</param>
            <param name="period">Average period.</param>
            <returns>The simple moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.TrendCalculators.MovingSum(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates a moving sum over a sequence with a given period.
            </summary>
            <param name="sequence">The sequence for which to calculate the moving sum.</param>
            <param name="period">The period to use for the calculation.</param>
            <returns>The moving sum values.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.TrendCalculators.STDEV(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the standard deviation of a sequence with a given period.
            </summary>
            <param name="sequence">The sequence for which to calculate the standard deviation values.</param>
            <param name="period">The period to use for the calculation.</param>
            <returns>The sequence of calculated standard deviation values.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.TrendLineType">
            <summary>
            Describes available types of trend lines supported by series.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.None">
            <summary>
            No trend line will be displayed.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.LinearFit">
            <summary>
            Linear fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.QuadraticFit">
            <summary>
            Quadratic polynomial fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.CubicFit">
            <summary>
            Cubic polynomial fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.QuarticFit">
            <summary>
            Quartic polynomial fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.QuinticFit">
            <summary>
            Quintic polynomial fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.LogarithmicFit">
            <summary>
            Logarithmic fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.ExponentialFit">
            <summary>
            Exponential fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.PowerLawFit">
            <summary>
            Powerlaw fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.SimpleAverage">
            <summary>
            Simple moving average.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.ExponentialAverage">
            <summary>
            Exponential moving average.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.ModifiedAverage">
            <summary>
            Modified moving average.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.CumulativeAverage">
            <summary>
            Cumulative moving average.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.WeightedAverage">
            <summary>
            Weighted moving average.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.UnknownValuePlotting">
            <summary>
            Describes available methods of plotting data with unknown values in a series.  
            <para>Double.NaN and null are examples of unknown values.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.UnknownValuePlotting.LinearInterpolate">
            <summary>
            Plot the unknown value as the midpoint between surrounding known values using linear interpolation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.UnknownValuePlotting.DontPlot">
            <summary>
            Do not plot the unknown value on the chart.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.DockEdge">
            <summary>
            Describes available behaviors for docking the child of a XamDock panel the dock edge.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.DockEdge.OutsideLeft">
            <summary>
            Child is placed outside and to the left of the central child control.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.DockEdge.OutsideBottom">
            <summary>
            Child is placed outside and below the central child control.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.DockEdge.OutsideRight">
            <summary>
            Child is placed outside and to the right of the central child control.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.DockEdge.OutsideTop">
            <summary>
            Child is placed outside and above the central child control.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.DockEdge.InsideLeft">
            <summary>
            Child is placed inside the central child control along its left edge. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.DockEdge.InsideBottom">
            <summary>
            Child is placed inside the central child control along its bottom edge. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.DockEdge.InsideRight">
            <summary>
            Child is placed inside the central child control along its right edge. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.DockEdge.InsideTop">
            <summary>
            Child is placed inside the central child control along its top edge. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.DockEdge.Central">
            <summary>
            Child is the central control. 
            </summary>
        </member>
        <member name="T:Infragistics.Controls.LayoutPriority">
            <summary>
            Specifies if space is given first to the top and bottom or the left and right.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.LayoutPriority.TopAndBottom">
            <summary>
            The children at the top and bottom are given their space first.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.LayoutPriority.LeftAndRight">
            <summary>
            The children at the left and right are given their space first.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.LayoutPriority.None">
            <summary>
            The children at the corners overlap, no space is given first.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.XamDock">
            <summary>
            Defines an area within which child controls are placed relative to a central content.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.XamDock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.XamDock"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamDock.LayoutPriorityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamDock.LayoutPriority"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.XamDock.SetEdge(System.Windows.DependencyObject,Infragistics.Controls.DockEdge)">
            <summary>
            Sets the values of the Edge attached property for a given dependency object.
            </summary>
            <param name="d">The Element to which the property value is written</param>
            <param name="dockEdge">The edge for the specified Element</param>
        </member>
        <member name="M:Infragistics.Controls.XamDock.GetEdge(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the Edge attached property for a given dependency object.
            </summary>
            <param name="d">The Element from which the property value is read.</param>
            <returns>The edge for the specified Element.</returns>
        </member>
        <member name="F:Infragistics.Controls.XamDock.EdgeProperty">
            <summary>
            Identifies the Edge attached DependencyProperty.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamDock.HorizontalDockAlignmentProperty">
            <summary>
            Identifies the HorizontalDockAlignment dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamDock.VerticalDockAlignmentProperty">
            <summary>
            Identifies the VerticalDockAlignment dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.XamDock.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity"/>) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.XamDock.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for this element.
            </summary>
            <param name="finalSize">The size available to this element for arranging its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> used by this element to arrange its children.</returns>
        </member>
        <member name="M:Infragistics.Controls.XamDock.OnCreateAutomationPeer">
            <summary>
            When implemented in a derived class, returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for the Silverlight automation infrastructure.
            </summary>
            <returns>
            The class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> subclass to return.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.XamDock.GetHorizontalDockAlignment(System.Windows.DependencyObject)">
            <summary>
            Gets the horizontal alignment.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.XamDock.GetVerticalDockAlignment(System.Windows.DependencyObject)">
            <summary>
            Gets the vertical alignment.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.XamDock.SetHorizontalDockAlignment(System.Windows.DependencyObject,System.Windows.HorizontalAlignment)">
            <summary>
            Sets the horizontal alignment.
            </summary>
            <param name="d">The d.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Infragistics.Controls.XamDock.SetVerticalDockAlignment(System.Windows.DependencyObject,System.Windows.VerticalAlignment)">
            <summary>
            Sets the vertical alignment.
            </summary>
            <param name="d">The d.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Infragistics.Controls.XamDock.LayoutPriority">
            <summary>
            Gets or sets the layout priority.
            </summary>
            <value>The layout priority.</value>
        </member>
        <member name="T:Infragistics.Group">
            <summary>
            Represents a group of groupable elements.
            </summary>    
        </member>
        <member name="T:Infragistics.Groupable">
            <summary>
            Base class for objects which can be spatially grouped.
            </summary>    
        </member>
        <member name="T:Infragistics.InteractiveElement">
            <summary>
            Base class for mouse and keyboard interactive objects.
            </summary>
        </member>
        <member name="T:Infragistics.VisualElement">
            <summary>
            Base class for objects which can be rendered to a canvas as part of an InteractiveControl.
            </summary>
        </member>
        <member name="M:Infragistics.VisualElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.VisualElement"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.VisualElement.BoundsProperty">
            <summary>
            Identifies the Bounds dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.VisualElement.OnBoundsChanged(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Called when the value of the Bounds property is changed.
            </summary>
            <param name="oldValue">Old value of the Bounds property.</param>
            <param name="newValue">New value of the Bounds property.</param>
        </member>
        <member name="F:Infragistics.VisualElement.ZIndexProperty">
            <summary>
            Identifies the ZIndex dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.VisualElement.OnZIndexChanged(System.Int32,System.Int32)">
            <summary>
            Called when the value of the ZIndex property is changed.
            </summary>
            <param name="oldValue">Old value of the ZIndex property.</param>
            <param name="newValue">New value of the ZIndex property.</param>
        </member>
        <member name="F:Infragistics.VisualElement.VisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.VisualElement.Visibility"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.VisualElement.OnVisibilityChanged(System.Windows.Visibility,System.Windows.Visibility)">
            <summary>
            Called when the value of the Visibility property is changed.
            </summary>
            <param name="oldValue">Old value of the Visibility property.</param>
            <param name="newValue">New value of the Visibility property.</param>
        </member>
        <member name="F:Infragistics.VisualElement.XProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.VisualElement.X"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.VisualElement.OnXChanged(System.Double,System.Double)">
            <summary>
            XProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.VisualElement.YProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.VisualElement.Y"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.VisualElement.OnYChanged(System.Double,System.Double)">
            <summary>
            YProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.VisualElement.WidthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.VisualElement.Width"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.VisualElement.OnWidthChanged(System.Double,System.Double)">
            <summary>
            WidthProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.VisualElement.HeightProperty">
            <summary>
            Gets or sets the height of the bounds of the element.
            </summary>
        </member>
        <member name="M:Infragistics.VisualElement.OnHeightChanged(System.Double,System.Double)">
            <summary>
            HeightProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.VisualElement.FillProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.VisualElement.Fill"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.VisualElement.OnFillChanged(System.Windows.Media.Brush,System.Windows.Media.Brush)">
            <summary>
            FillProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.VisualElement.StrokeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.VisualElement.Stroke"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.VisualElement.OnStrokeChanged(System.Windows.Media.Brush,System.Windows.Media.Brush)">
            <summary>
            StrokeProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.VisualElement.StrokeThicknessProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.VisualElement.StrokeThickness"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.VisualElement.OnStrokeThicknessChanged(System.Double,System.Double)">
            <summary>
            StrokeThicknessProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.VisualElement.StrokeDashArrayProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.VisualElement.StrokeDashArray"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.VisualElement.OnStrokeDashArrayChanged(System.Windows.Media.DoubleCollection,System.Windows.Media.DoubleCollection)">
            <summary>
            StrokeDashArrayProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Infragistics.VisualElement.HitTest(System.Windows.Point)">
            <summary>
            Tests whether or not the given point is over the bounds of this object.
            </summary>
            <param name="point">The point to test.</param>
            <returns>True if the point is within this object's bounds, otherwise False.</returns>
        </member>
        <member name="M:Infragistics.VisualElement.HitTest(System.Windows.Rect)">
            <summary>
            Tests whether or not the given rectangle is entirely within the bounds of this object.
            </summary>
            <param name="rect">The rectangle to test.</param>
            <returns>True if the rectangle is entirely within the bounds of this object, otherwise False.</returns>
        </member>
        <member name="M:Infragistics.VisualElement.Render">
            <summary>
            Renders this element in the current canvas.
            </summary>
        </member>
        <member name="M:Infragistics.VisualElement.Remove">
            <summary>
            Removes this element from the current canvas.
            </summary>
        </member>
        <member name="P:Infragistics.VisualElement.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Infragistics.VisualElement.ZIndex">
            <summary>
            Gets or sets the Z-index.
            </summary>
            <value>The index of the Z.</value>
        </member>
        <member name="P:Infragistics.VisualElement.Visibility">
            <summary>
            Gets or sets the visibility.
            </summary>
            <value>The visibility.</value>
        </member>
        <member name="P:Infragistics.VisualElement.X">
            <summary>
            Gets or sets the x-axis position of the left side of the element.
            </summary>
        </member>
        <member name="P:Infragistics.VisualElement.Y">
            <summary>
            Gets or sets the y-axis position of the top side of the element.
            </summary>
        </member>
        <member name="P:Infragistics.VisualElement.Width">
            <summary>
            Gets or sets the width of the bounds of the element. 
            </summary>
        </member>
        <member name="P:Infragistics.VisualElement.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Infragistics.VisualElement.Left">
            <summary>
            Gets the x-axis position of the left side of the element.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:Infragistics.VisualElement.Top">
            <summary>
            Gets the y-axis position of the top side of the element.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Infragistics.VisualElement.Right">
            <summary>
            Gets the x-axis position of the right side of the element.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:Infragistics.VisualElement.Bottom">
            <summary>
            Gets the y-axis position of the bottom side of the element.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:Infragistics.VisualElement.Center">
            <summary>
            Gets the center.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:Infragistics.VisualElement.Fill">
            <summary>
            Gets or sets the fill.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:Infragistics.VisualElement.Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Infragistics.VisualElement.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
            <value>The stroke thickness.</value>
        </member>
        <member name="P:Infragistics.VisualElement.StrokeDashArray">
            <summary>
            Gets or sets the stroke dash array.
            </summary>
            <value>The stroke dash array.</value>
        </member>
        <member name="P:Infragistics.VisualElement.Initializing">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Infragistics.VisualElement"/> is initializing.
            </summary>
            <value><c>true</c> if initializing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Infragistics.VisualElement.View">
            <summary>
            Gets the view.
            </summary>
            <value>The view.</value>
        </member>
        <member name="P:Infragistics.VisualElement.Canvas">
            <summary>
            Gets the canvas.
            </summary>
            <value>The canvas.</value>
        </member>
        <member name="M:Infragistics.InteractiveElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.InteractiveElement"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.InteractiveElement.CursorProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.InteractiveElement.Cursor"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.InteractiveElement.OnCursorChanged(System.Windows.Input.Cursor,System.Windows.Input.Cursor)">
            <summary>
            Called when the value of the Cursor property is changed.
            </summary>
            <param name="oldValue">Old value of the Cursor property.</param>
            <param name="newValue">New value of the Cursor property.</param>
        </member>
        <member name="M:Infragistics.InteractiveElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method invoked when the mouse pointer is moved over this element.
            </summary>
            <param name="e">MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.InteractiveElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method invoked when the mouse pointer enters this element.
            </summary>
            <param name="e">MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.InteractiveElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method invoked whent he mouse pointer leaves this element.
            </summary>
            <param name="e">MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.InteractiveElement.OnMouseLeftButtonDown(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method invoked when the mouse left button is pressed over this element.
            </summary>
            <param name="e">MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.InteractiveElement.OnMouseLeftButtonUp(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method invoked when the mouse left button is released over this element.
            </summary>
            <param name="e">MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.InteractiveElement.OnMouseLeftButtonDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Method invoked when the mouse left button is double clicked over this element.
            </summary>
            <param name="e">MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.InteractiveElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Method invoked when a key is pressed over this element.
            </summary>
            <param name="e">KeyEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.InteractiveElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Method invoked when a key is released over this element.
            </summary>
            <param name="e">KeyEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.InteractiveElement.OnGotSelection(System.EventArgs)">
            <summary>
            Method invoked when this element is selected.
            </summary>
            <param name="e">EventArgs in context.</param>
        </member>
        <member name="M:Infragistics.InteractiveElement.OnLostSelection(System.EventArgs)">
            <summary>
            Method invoked when this element is unselected.
            </summary>
            <param name="e">EventArgs in context.</param>
        </member>
        <member name="P:Infragistics.InteractiveElement.Cursor">
            <summary>
            Gets or sets the cursor.
            </summary>
            <value>The cursor.</value>        
        </member>
        <member name="P:Infragistics.InteractiveElement.IsMouseOver">
            <summary>
            Indicates whether the mouse is currently over this element.
            </summary>
        </member>
        <member name="P:Infragistics.InteractiveElement.IsMouseCaptured">
            <summary>
            Indicates whether the mouse operation is being captured by this element.
            </summary>
        </member>
        <member name="M:Infragistics.Groupable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Groupable"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.Groupable.AutoRescalesProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Groupable.AutoRescales"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Groupable.OnAutoRescalesChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when the value of the AutoRescales property is changed.
            </summary>
            <param name="oldValue">The old value of the AutoRescales property.</param>
            <param name="newValue">The new value of the AutoRescales property.</param>
        </member>
        <member name="F:Infragistics.Groupable.HorizontalAlignmentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Groupable.HorizontalAlignment"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Groupable.OnHorizontalAlignmentChanged(System.Windows.HorizontalAlignment,System.Windows.HorizontalAlignment)">
            <summary>
            Called when the value of the HorizontalAlignment property is changed.
            </summary>
            <param name="oldValue">Old value of the HorizontalAlignment property.</param>
            <param name="newValue">New value of the HorizontalAlignment property.</param>
        </member>
        <member name="F:Infragistics.Groupable.VerticalAlignmentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Groupable.VerticalAlignment"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Groupable.OnVerticalAlignmentChanged(System.Windows.VerticalAlignment,System.Windows.VerticalAlignment)">
            <summary>
            Called when the value of the VerticalAlignment property is changed.
            </summary>
            <param name="oldValue">Old value of the VerticalAlignment property.</param>
            <param name="newValue">New value of the VerticalAlignment property.</param>
        </member>
        <member name="F:Infragistics.Groupable.MarginProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Groupable.Margin"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Groupable.OnMarginChanged(System.Windows.Thickness,System.Windows.Thickness)">
            <summary>
            MarginProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Infragistics.Groupable.ArrangeInGroup(System.Windows.Rect,System.Windows.Rect,System.Windows.Media.Transform)">
            <summary>
            Arranges the in group.
            </summary>
            <param name="oldGroupBounds">The old group bounds.</param>
            <param name="newGroupBounds">The new group bounds.</param>
            <param name="groupTransform">The group transform.</param>
        </member>
        <member name="M:Infragistics.Groupable.TransformRect(System.Windows.Media.GeneralTransform,System.Windows.Rect)">
            <summary>
            Applies the given transform to a rectangle and returns the resulting rectangle.
            </summary>
            <param name="transform">The transform to apply.</param>
            <param name="rect">The rectangle to apply the transform to.</param>
            <returns>A rectangle created as a result of applying the given transform to the given rectangle.</returns>
        </member>
        <member name="M:Infragistics.Groupable.CalculateTranslateTransform(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Determines the translate transform which can be used to transform one rectangle to another.
            </summary>
            <param name="newBounds">The rectangle that must be the result of a transfom of oldBounds.</param>
            <param name="oldBounds">The rectangle that must be transformed.</param>
            <returns>The translate transform that can be used to transform oldBounds to newBounds.</returns>
        </member>
        <member name="M:Infragistics.Groupable.CalculateScaleTransform(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Determines the scale transform which can be used to transform one rectangle to another.
            </summary>
            <param name="newBounds">The rectangle that must be the result of a transform of oldBounds.</param>
            <param name="oldBounds">The rectangle that must be transformed.</param>
            <returns>The scale transform that can be used to transform oldBounds to newBounds.</returns>
        </member>
        <member name="M:Infragistics.Groupable.CalculateTransform(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Determines the transform group which can be used to transform one rectangle to another.
            </summary>
            <param name="newBounds">The rectangle that must be the result of a transform of oldBounds.</param>
            <param name="oldBounds">The rectangle that must be transformed.</param>
            <returns>The transform group that can be used to transform oldBounds to newBounds.</returns>
        </member>
        <member name="M:Infragistics.Groupable.TransformBounds(System.Windows.Media.Transform)">
            <summary>
            Transforms the bounds of this element.
            </summary>
            <param name="transform">The transform.</param>
        </member>
        <member name="M:Infragistics.Groupable.ArrangeRelative(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Arranges relative.
            </summary>
            <param name="oldGroupBounds">The old group bounds.</param>
            <param name="newGroupBounds">The new group bounds.</param>
        </member>
        <member name="P:Infragistics.Groupable.AutoRescales">
            <summary>
            Gets or sets a value indicating whether [auto rescales].
            </summary>
            <value><c>true</c> if [auto rescales]; otherwise, <c>false</c>.</value>        
        </member>
        <member name="P:Infragistics.Groupable.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>The horizontal alignment.</value>        
        </member>
        <member name="P:Infragistics.Groupable.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>The vertical alignment.</value>
        </member>
        <member name="P:Infragistics.Groupable.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>The margin.</value>
        </member>
        <member name="P:Infragistics.Groupable.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:Infragistics.Group.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Group"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.Group.ChildrenProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Group.Children"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Group.AddItems(System.Collections.IList)">
            <summary>
            Adds the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Infragistics.Group.RemoveItems(System.Collections.IList)">
            <summary>
            Removes the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Infragistics.Group.AddItem(Infragistics.Groupable)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Infragistics.Group.RemoveItem(Infragistics.Groupable)">
            <summary>
            Removes the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Infragistics.Group.OnBoundsChanged(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Called when the value of the Bounds property is changed.
            </summary>
            <param name="oldValue">Old value of the Bounds property.</param>
            <param name="newValue">New value of the Bounds property.</param>
        </member>
        <member name="M:Infragistics.Group.OnVisibilityChanged(System.Windows.Visibility,System.Windows.Visibility)">
            <summary>
            Called when the value of the Visibility property is changed.
            </summary>
            <param name="oldValue">Old value of the Visibility property.</param>
            <param name="newValue">New value of the Visibility property.</param>
        </member>
        <member name="M:Infragistics.Group.OnZIndexChanged(System.Int32,System.Int32)">
            <summary>
            Called when the value of the ZIndex property is changed.
            </summary>
            <param name="oldValue">Old value of the ZIndex property.</param>
            <param name="newValue">New value of the ZIndex property.</param>
        </member>
        <member name="M:Infragistics.Group.OnCursorChanged(System.Windows.Input.Cursor,System.Windows.Input.Cursor)">
            <summary>
            Called when the value of the Cursor property is changed.
            </summary>
            <param name="oldValue">Old value of the Cursor property.</param>
            <param name="newValue">New value of the Cursor property.</param>
        </member>
        <member name="M:Infragistics.Group.OnFillChanged(System.Windows.Media.Brush,System.Windows.Media.Brush)">
            <summary>
            FillProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Infragistics.Group.OnStrokeChanged(System.Windows.Media.Brush,System.Windows.Media.Brush)">
            <summary>
            StrokeProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Infragistics.Group.OnStrokeThicknessChanged(System.Double,System.Double)">
            <summary>
            StrokeThicknessProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Infragistics.Group.Render">
            <summary>
            Renders this element in the current canvas.
            </summary>
        </member>
        <member name="M:Infragistics.Group.Remove">
            <summary>
            Removes this element from the current canvas.
            </summary>
        </member>
        <member name="M:Infragistics.Group.HitTest(System.Windows.Point)">
            <summary>
            Determines whether or not the given point is over an active part of this group.
            </summary>
            <param name="point">The point to test.</param>
            <returns>True if the given point is over an active part of this group, otherwise False.</returns>
        </member>
        <member name="M:Infragistics.Group.HitTest(System.Windows.Rect)">
            <summary>
            Determines whether or not the given rectangle is entirely contained within the bounds of an active part of this group.
            </summary>
            <param name="rect">The rectangle to test.</param>
            <returns>True if the given rectangle is entirely contained within the bounds of an active part of this group, otherwise False.</returns>
        </member>
        <member name="M:Infragistics.Group.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method invoked when the mouse pointer leaves this group.
            </summary>
            <param name="e">The MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.Group.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method invoked when the mouse pointer moves over this group.
            </summary>
            <param name="e">The MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.Group.OnMouseLeftButtonDown(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method invoked when the mouse pointer is pressed over this group.
            </summary>
            <param name="e">The MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.Group.OnMouseLeftButtonUp(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method invoked when the mouse pointer is released over this group.
            </summary>
            <param name="e">The MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.Group.OnMouseLeftButtonDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Method invoked when this element is double-clicked with the left mouse button.
            </summary>
            <param name="e">The MouseButtonEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.Group.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Method invoked when a key is pressed while this group has focus.
            </summary>
            <param name="e">The KeyEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.Group.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Method invoked when a key is released while this group has focus.
            </summary>
            <param name="e">The KeyEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.Group.TransformBounds(System.Windows.Media.Transform)">
            <summary>
            Applies the given transform to this group.
            </summary>
            <param name="transform">The transform to apply.</param>
        </member>
        <member name="M:Infragistics.Group.ArrangeChildren(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Arranges the children.
            </summary>
        </member>
        <member name="M:Infragistics.Group.CalculateBounds(Infragistics.Groupable[])">
            <summary>
            Calculates the bounds of the given items.
            </summary>
            <param name="items">Groupable items to calculate the bounds for.</param>
            <returns>The bounds of the given items.</returns>
        </member>
        <member name="M:Infragistics.Group.AccumulateBounds(Infragistics.VisualElement)">
            <summary>
            Augments this Group's bounds by the bounds of the given item.
            </summary>
            <param name="item">The item to augment this Group's bounds by.</param>
        </member>
        <member name="P:Infragistics.Group.Children">
            <summary>
            Gets or sets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="T:Infragistics.ShapeElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:Infragistics.ShapeElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.ShapeElement"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.ShapeElement.FrameworkElementsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.ShapeElement.FrameworkElements"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.ShapeElement.OnFrameworkElementsChanged(System.Collections.ObjectModel.ObservableCollection{System.Windows.FrameworkElement},System.Collections.ObjectModel.ObservableCollection{System.Windows.FrameworkElement})">
            <summary>
            Called when framework elements changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Infragistics.ShapeElement.OnBoundsChanged(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Called when the value of the Bounds property is changed.
            </summary>
            <param name="oldValue">Old value of the Bounds property.</param>
            <param name="newValue">New value of the Bounds property.</param>
        </member>
        <member name="M:Infragistics.ShapeElement.OnVisibilityChanged(System.Windows.Visibility,System.Windows.Visibility)">
            <summary>
            Called when the value of the Visibility property is changed.
            </summary>
            <param name="oldValue">Old value of the Visibility property.</param>
            <param name="newValue">New value of the Visibility property.</param>
        </member>
        <member name="M:Infragistics.ShapeElement.OnZIndexChanged(System.Int32,System.Int32)">
            <summary>
            Called when the value of the ZIndex property is changed.
            </summary>
            <param name="oldValue">Old value of the ZIndex property.</param>
            <param name="newValue">New value of the ZIndex property.</param>
        </member>
        <member name="M:Infragistics.ShapeElement.OnCursorChanged(System.Windows.Input.Cursor,System.Windows.Input.Cursor)">
            <summary>
            Called when the value of the Cursor property is changed.
            </summary>
            <param name="oldValue">Old value of the Cursor property.</param>
            <param name="newValue">New value of the Cursor property.</param>
        </member>
        <member name="M:Infragistics.ShapeElement.OnFillChanged(System.Windows.Media.Brush,System.Windows.Media.Brush)">
            <summary>
            FillProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Infragistics.ShapeElement.OnStrokeChanged(System.Windows.Media.Brush,System.Windows.Media.Brush)">
            <summary>
            StrokeProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Infragistics.ShapeElement.OnStrokeThicknessChanged(System.Double,System.Double)">
            <summary>
            StrokeThicknessProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Infragistics.ShapeElement.Render">
            <summary>
            Renders this element in the current canvas.
            </summary>
        </member>
        <member name="M:Infragistics.ShapeElement.Remove">
            <summary>
            Removes this element from the current canvas.
            </summary>
        </member>
        <member name="M:Infragistics.ShapeElement.HitTest(System.Windows.Point)">
            <summary>
            Determines whether or not the given point is over an active part of this element.
            </summary>
            <param name="point">The point to test.</param>
            <returns>True if the given point is over an active part of this element, otherwise False.</returns>        
        </member>
        <member name="M:Infragistics.ShapeElement.OnMouseLeftButtonDown(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method invoked when the left mouse button is pressed over this element.
            </summary>
            <param name="e">The MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.ShapeElement.OnMouseLeftButtonUp(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method invoked when the left mouse button is released over this element.
            </summary>
            <param name="e">The MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.ShapeElement.ChangeFrameworkElementSettings(System.Windows.FrameworkElement)">
            <summary>
            Changes the framework element settings.
            </summary>
        </member>
        <member name="P:Infragistics.ShapeElement.FrameworkElements">
            <summary>
            Gets or sets the framework elements.
            </summary>
            <value>The framework elements.</value>        
        </member>
        <member name="T:Infragistics.InputContext">
            <summary>
            Class used to store contextual information about mouse and keyboard input.
            </summary>
        </member>
        <member name="M:Infragistics.InputContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.InputContext"/> class.
            </summary>
        </member>
        <member name="P:Infragistics.InputContext.ViewMousePosition">
            <summary>
            Gets or sets the view mouse position.
            </summary>
            <value>The view mouse position.</value>
        </member>
        <member name="P:Infragistics.InputContext.DocMousePosition">
            <summary>
            Gets or sets the doc mouse position.
            </summary>
            <value>The doc mouse position.</value>
        </member>
        <member name="P:Infragistics.InputContext.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="T:Infragistics.InteractiveControl">
            <summary>
            Represents a control that supports interactive tools.
            </summary>
        </member>
        <member name="M:Infragistics.InteractiveControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.InteractiveControl"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.InteractiveControl.LastInputProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.InteractiveControl.LastInput"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.InteractiveControl.HitTest(System.Windows.Point)">
            <summary>
            Returns the element under a given mouse point.
            </summary>
            <param name="point">The point under observation.</param>
            <returns>The topmost element that returns a positive hit test for the given point.</returns>
        </member>
        <member name="M:Infragistics.InteractiveControl.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method invoked when the mouse is moved over this control.
            </summary>
            <param name="e">The MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.InteractiveControl.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method invoked when the mouse pointer enters this control.
            </summary>
            <param name="e">The MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.InteractiveControl.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method invoked when the mouse pointer leaves this control.
            </summary>
            <param name="e">The MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.InteractiveControl.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method invoked when the control lost mouse capture.
            </summary>
            <param name="e">The MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.InteractiveControl.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Method invoked when the left mouse button is pressed over this control.
            </summary>
            <param name="e">The MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.InteractiveControl.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Method invoked when the left mouse button is released over this control.
            </summary>
            <param name="e">The MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.InteractiveControl.OnMouseLeftButtonDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Method invoked when the left mouse button is double clicked over this control.
            </summary>
            <param name="e">The MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.InteractiveControl.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Method invoked when a key is pressed while this control has focus.
            </summary>
            <param name="e">The KeyEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.InteractiveControl.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Method invoked when a key is released while this control has focus.
            </summary>
            <param name="e">The KeyEventArgs in context.</param>
        </member>
        <member name="P:Infragistics.InteractiveControl.LastInput">
            <summary>
            Gets or sets the last input.
            </summary>
            <value>The last input.</value>
        </member>
        <member name="P:Infragistics.InteractiveControl.Canvas">
            <summary>
            Canvas containing the content of this InteractiveControl.
            </summary>
        </member>
        <member name="P:Infragistics.InteractiveControl.CurrentTool">
            <summary>
            The current tool being used to handle interaction.
            </summary>
        </member>
        <member name="P:Infragistics.InteractiveControl.MouseDownTools">
            <summary>
            A Collection of tools to handle MouseDown actions.
            </summary>
        </member>
        <member name="P:Infragistics.InteractiveControl.MouseMoveTools">
            <summary>
            A Collection of tools to handle MouseMove actions.
            </summary>
        </member>
        <member name="P:Infragistics.InteractiveControl.DoubleClickTimer">
            <summary>
            Timer used to detect double-click actions.
            </summary>
        </member>
        <member name="P:Infragistics.InteractiveControl.VisualElements">
            <summary>
            The collection of visual elements within this control.
            </summary>
        </member>
        <member name="P:Infragistics.InteractiveControl.InteractiveElements">
            <summary>
            The collection of interactive elements within this control.
            </summary>
        </member>
        <member name="T:Infragistics.DefaultTool">
            <summary>
            Mouse interaction helper class.
            </summary>
        </member>
        <member name="T:Infragistics.Tool">
            <summary>
            Mouse interaction helper class.
            </summary>
        </member>
        <member name="T:Infragistics.ITool">
            <summary>
            Interface for mouse-interactive objects.
            </summary>
        </member>
        <member name="M:Infragistics.ITool.CanStart">
            <summary>
            Determines whether this tool can start.
            </summary>
            <returns>
            	<c>true</c> if this tool can start; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Infragistics.ITool.CanStart(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Determines whether this tool can start.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
            <returns>
            	<c>true</c> if this tool can start; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Infragistics.ITool.Start">
            <summary>
            Called when this tool starts.
            </summary>
        </member>
        <member name="M:Infragistics.ITool.KeyDown">
            <summary>
            Called when a key is down.
            </summary>
        </member>
        <member name="M:Infragistics.ITool.KeyUp">
            <summary>
            Called when a key is up.
            </summary>
        </member>
        <member name="M:Infragistics.ITool.MouseMove">
            <summary>
            Called when this tool is started and the mouse is moved. 
            </summary>
        </member>
        <member name="M:Infragistics.ITool.MouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when this tool is started and the left mouse button is down.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.ITool.MouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when this tool is started and the left mouse button is up.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.ITool.OnMouseLeftButtonDoubleClick">
            <summary>
            Called when this tool is started and the left mouse button is double clicked.
            </summary>
        </member>
        <member name="M:Infragistics.ITool.Stop">
            <summary>
            Called when this tool stops.
            </summary>
        </member>
        <member name="M:Infragistics.Tool.#ctor(Infragistics.InteractiveControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Tool"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Infragistics.Tool.CanStart">
            <summary>
            Determines whether this tool can start.
            </summary>
            <returns>
            	<c>true</c> if this tool can start; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Infragistics.Tool.CanStart(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Determines whether this tool can start.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
            <returns>
            	<c>true</c> if this tool can start; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Infragistics.Tool.Start">
            <summary>
            Called when this tool starts.
            </summary>
        </member>
        <member name="M:Infragistics.Tool.KeyDown">
            <summary>
            Called when a key is down.
            </summary>
        </member>
        <member name="M:Infragistics.Tool.KeyUp">
            <summary>
            Called when a key is up.
            </summary>
        </member>
        <member name="M:Infragistics.Tool.MouseMove">
            <summary>
            Called when this tool is started and the mouse is moved.
            </summary>
        </member>
        <member name="M:Infragistics.Tool.MouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when this tool is started and the left mouse button is down.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Tool.MouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when this tool is started and the left mouse button is up.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Tool.OnMouseLeftButtonDoubleClick">
            <summary>
            Called when this tool is started and the left mouse button is double clicked.
            </summary>
        </member>
        <member name="M:Infragistics.Tool.Stop">
            <summary>
            Called when this tool stops.
            </summary>
        </member>
        <member name="M:Infragistics.Tool.StopTool">
            <summary>
            Stops the tool.
            </summary>
        </member>
        <member name="P:Infragistics.Tool.View">
            <summary>
            Gets the view.
            </summary>
            <value>The view.</value>
        </member>
        <member name="P:Infragistics.Tool.LastInput">
            <summary>
            Gets the last input.
            </summary>
            <value>The last input.</value>
        </member>
        <member name="M:Infragistics.DefaultTool.#ctor(Infragistics.InteractiveControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.DefaultTool"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Infragistics.DefaultTool.MouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when this tool is started and the left mouse button is down.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.DefaultTool.MouseMove">
            <summary>
            Called when this tool is started and the mouse is moved.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.ZoomChangedEventArgs">
            <summary>
            Provides data for the ZoomChanged event.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.ZoomChangedEventArgs.#ctor(Infragistics.Controls.Range)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.ZoomChangedEventArgs"/> class.
            </summary>
            <param name="newRange">The new range.</param>
        </member>
        <member name="P:Infragistics.Controls.ZoomChangedEventArgs.NewRange">
            <summary>
            Gets the new range.
            </summary>
            <value>The new range.</value>
        </member>
        <member name="T:Infragistics.Controls.ZoomChangeEventArgs">
            <summary>
            Provides data for the ZoomChanging event.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.ZoomChangeEventArgs.#ctor(Infragistics.Controls.Range)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.ZoomChangeEventArgs"/> class.
            </summary>
            <param name="newRange">The new range.</param>
        </member>
        <member name="P:Infragistics.Controls.ZoomChangeEventArgs.NewRange">
            <summary>
            Gets the new range.
            </summary>
            <value>The new range.</value>
        </member>
        <member name="T:Infragistics.Controls.Range">
            <summary>
            Represents a Minimum - Maximum range.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Range.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Range"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Range.MinimumProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Range.Minimum"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Range.OnMinimumChanged(System.Double,System.Double)">
            <summary>
            Called when Minimum is changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.Controls.Range.MaximumProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Range.Maximum"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Range.OnMaximumChanged(System.Double,System.Double)">
            <summary>
            Called when Maximum is changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Infragistics.Controls.Range.FromScaleScroll(System.Double,System.Double)">
            <summary>
            Inits <see cref="P:Infragistics.Controls.Range.Minimum"/> and <see cref="P:Infragistics.Controls.Range.Maximum"/> from scale and scroll.
            </summary>
            <param name="scale">The scale.</param>
            <param name="scroll">The scroll.</param>
        </member>
        <member name="M:Infragistics.Controls.Range.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>        
        </member>
        <member name="P:Infragistics.Controls.Range.Minimum">
            <summary>
            Gets or sets the minimum value of the Range.
            </summary>
            <value>The minimum. The default is 0.</value>
        </member>
        <member name="P:Infragistics.Controls.Range.Maximum">
            <summary>
            Gets or sets the maximum value of the Range.
            </summary>
            <value>The maximum value. The default is 1.</value>
        </member>
        <member name="P:Infragistics.Controls.Range.Scale">
            <summary>
            Gets the scale of the Zoombar.
            </summary>
            <remarks>
            The scale represents the ratio between the Range (Maximum - Minimum) and the Zoombar (Maximum - Minimum).
            </remarks>
            <value>The scale. The value is between 0 and 1.</value>
        </member>
        <member name="P:Infragistics.Controls.Range.Scroll">
            <summary>
            Gets the scroll of the Zoombar.
            </summary>
            <remarks>
            The scroll represents how the range element is moved along the track area.
            </remarks>
            <value>The scroll. The value is between 0 and 1.</value>
        </member>
        <member name="M:Infragistics.Controls.ScrollShape.#ctor(System.Windows.FrameworkElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.ScrollShape"/> class.
            </summary>
            <param name="frameworkElement">The framework element.</param>
        </member>
        <member name="T:Infragistics.Controls.DraggingTool">
            <summary>
            Represents a tool that is used for dragging the thumb.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.DraggingTool.#ctor(Infragistics.InteractiveControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.DraggingTool"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.DraggingTool.CanStart(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Determines whether this tool can start.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
            <returns>
            	<c>true</c> if this tool can start; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.DraggingTool.Start">
            <summary>
            Called when this tool starts.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.DraggingTool.MouseMove">
            <summary>
            Called when this tool is started and the mouse is moved.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.DraggingTool.KeyDown">
            <summary>
            Called when a key is down.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.DraggingTool.MouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when this tool is started and the left mouse button is up.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.DraggingTool.Stop">
            <summary>
            Called when this tool stops.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.ResizingTool">
            <summary>
             Represents a tool that is used for resizing the thumb.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.ResizingTool.#ctor(Infragistics.InteractiveControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.ResizingTool"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.ResizingTool.CanStart(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Determines whether this tool can start.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
            <returns>
            	<c>true</c> if this tool can start; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.ResizingTool.Start">
            <summary>
            Called when this tool starts.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.ResizingTool.MouseMove">
            <summary>
            Called when this tool is started and the mouse is moved.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.ResizingTool.MouseMove(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when this tool is started and the mouse is moved.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.ResizingTool.KeyDown">
            <summary>
            Called when a key is down.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.ResizingTool.MouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when this tool is started and the left mouse button is up.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.ResizingTool.Stop">
            <summary>
            Called when this tool stops.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.TrackbarTool">
            <summary>
             Represents a tool that is used to handle clicks on the track bar.
            </summary>    
        </member>
        <member name="M:Infragistics.Controls.TrackbarTool.#ctor(Infragistics.InteractiveControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.TrackbarTool"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Infragistics.Controls.TrackbarTool.CanStart(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Determines whether this tool can start.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
            <returns>
            	<c>true</c> if this tool can start; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.TrackbarTool.Start">
            <summary>
            Called when this tool starts.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.TrackbarTool.MouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when this tool is started and the left mouse button is up.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.TrackbarTool.Stop">
            <summary>
            Called when this tool stops.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.TrackShape.#ctor(System.Windows.FrameworkElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.TrackShape"/> class.
            </summary>
            <param name="frameworkElement">The framework element.</param>
        </member>
        <member name="T:Infragistics.Controls.XamZoombar">
            <summary>
            The Zoombar control class
            </summary>    
        </member>
        <!-- Badly formed XML comment ignored for member "F:Infragistics.Controls.XamZoombar.VisibilityProxyPropertyName" -->
        <member name="M:Infragistics.Controls.XamZoombar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.XamZoombar"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.VisibilityProxyProperty">
            <summary>
            Identifies the VisibilityProxy dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.HorizontalPreviewContentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.HorizontalPreviewContent"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.VerticalPreviewContentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.VerticalPreviewContent"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.HorizontalScaleLeftStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.HorizontalScaleLeftStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.HorizontalScaleRightStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.HorizontalScaleRightStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.HorizontalThumbStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.HorizontalThumbStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.HorizontalScrollLeftStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.HorizontalScrollLeftStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.HorizontalScrollRightStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.HorizontalScrollRightStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.VerticalScaleTopStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.VerticalScaleTopStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.VerticalScaleBottomStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.VerticalScaleBottomStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.VerticalThumbStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.VerticalThumbStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.VerticalScrollTopStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.VerticalScrollTopStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.VerticalScrollBottomStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.VerticalScrollBottomStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.MinimumProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.Minimum"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.OnMinimumChanged(System.Double,System.Double)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.MaximumProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.Maximum"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.OnMaximumChanged(System.Double,System.Double)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.RangeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.Range"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.OnRangeChanged(Infragistics.Controls.Range,Infragistics.Controls.Range)">
            <summary>
            This code will run whenever Range changes, to change the template
            being used to display this control.
            </summary>
            <param name="oldRange">The old range.</param>
            <param name="newRange">The new range.</param>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.SmallChangeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.SmallChange"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.OnSmallChangeChanged(System.Double,System.Double)">
            <summary>
            SmallChangeProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.LargeChangeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.LargeChange"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.OnLargeChangeChanged(System.Double,System.Double)">
            <summary>
            LargeChangeProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.OrientationProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.Orientation"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.OnOrientationChanged(System.Windows.Controls.Orientation,System.Windows.Controls.Orientation)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Method invoked when the left mouse button is pressed over this control.
            </summary>
            <param name="e">The MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Method invoked when the left mouse button is released over this control.
            </summary>
            <param name="e">The MouseEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Method invoked when a key is pressed while this control has focus.
            </summary>
            <param name="e">The KeyEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Method invoked when a key is released while this control has focus.
            </summary>
            <param name="e">The KeyEventArgs in context.</param>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity"/>) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.OnCreateAutomationPeer">
            <summary>
            When implemented in a derived class, returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for the Silverlight automation infrastructure.
            </summary>
            <returns>
            The class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> subclass to return.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.OnZoomChanged(Infragistics.Controls.ZoomChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ZoomChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Infragistics.Controls.ZoomChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.OnZoomChanging(Infragistics.Controls.ZoomChangeEventArgs)">
            <summary>
            Raises the <see cref="E:ZoomChanging"/> event.
            </summary>
            <param name="e">The <see cref="T:Infragistics.Controls.ZoomChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Infragistics.Controls.XamZoombar.NewStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamZoombar.NewStyle"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.OnNewStyleChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            NewStyleProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.RegisterResources(System.String,System.Reflection.Assembly)">
            <summary>
            Adds an additonal Resx file in which the control will pull its resources from.
            </summary>
            <param name="name">The name of the embedded resx file that contains the resources to be used.</param>
            <param name="assembly">The assembly in which the resx file is embedded.</param>
            <remarks>Don't include the extension of the file, but prefix it with the default Namespace of the assembly.</remarks>
        </member>
        <member name="M:Infragistics.Controls.XamZoombar.UnregisterResources(System.String)">
            <summary>
            Removes a previously registered resx file.
            </summary>
            <param name="name">The name of the embedded resx file that was used for registration.</param>
            <remarks>
            Note: this won't have any effect on controls that are already in view and are already displaying strings.
            It will only affect any new controls created.
            </remarks>
        </member>
        <member name="E:Infragistics.Controls.XamZoombar.ZoomChanged">
            <summary>
            Occurs when zoom is changed.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.XamZoombar.ZoomChanging">
            <summary>
            Occurs when zoom is changing.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.PreviewContentSize">
            <summary>
            Gets the size of the preview content.
            </summary>
            <value>The size of the preview content.</value>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.HorizontalPreviewContent">
            <summary>
            Gets or sets the content of the horizontal preview.
            </summary>
            <value>The content of the horizontal preview.</value>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.VerticalPreviewContent">
            <summary>
            Gets or sets the content of the vertical preview.
            </summary>
            <value>The content of the vertical preview.</value>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.HorizontalScaleLeftStyle">
            <summary>
            Gets or sets the horizontal scale left element style.
            </summary>
            <value>The horizontal scale left element style.</value>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.HorizontalScaleRightStyle">
            <summary>
            Gets or sets the horizontal scale right element style.
            </summary>
            <value>The horizontal scale right element style.</value>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.HorizontalThumbStyle">
            <summary>
            Gets or sets the horizontal thumb element style.
            </summary>
            <value>The horizontal thumb element style.</value>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.HorizontalScrollLeftStyle">
            <summary>
            Gets or sets the horizontal scroll left style.
            </summary>
            <value>The horizontal scroll left style.</value>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.HorizontalScrollRightStyle">
            <summary>
            Gets or sets the horizontal scroll right style.
            </summary>
            <value>The horizontal scroll right style.</value>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.VerticalScaleTopStyle">
            <summary>
            Gets or sets the vertical scale top element style.
            </summary>
            <value>The vertical scale top element style.</value>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.VerticalScaleBottomStyle">
            <summary>
            Gets or sets the vertical scale bottom element style.
            </summary>
            <value>The vertical scale bottom element style.</value>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.VerticalThumbStyle">
            <summary>
            Gets or sets the vertical thumb element style.
            </summary>
            <value>The vertical thumb element style.</value>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.VerticalScrollTopStyle">
            <summary>
            Gets or sets the vertical scroll top style.
            </summary>
            <value>The vertical scroll top style.</value>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.VerticalScrollBottomStyle">
            <summary>
            Gets or sets the vertical scroll bottom style.
            </summary>
            <value>The vertical scroll bottom style.</value>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.Minimum">
            <summary>
            Gets or sets the minimum possible values of the Range element.
            </summary>
            <value>The minimum value. The default is 0.</value>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.Maximum">
            <summary>
            Gets or sets the maximum possible values of the Range element.
            </summary>        
            <value>The maximum value. The default is 1.</value>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.Range">
            <summary>
            Gets or sets the current Range element.
            </summary>
            <value>The range.</value>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.SmallChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the values of the Range element.
            </summary>
            <remarks>
            When the user clicks the scroll elements of the Zoombar control, the Range element values
            would increase or decrease by the value of SmallChange.
            </remarks>
            <value>The small change value. The default is 0.1.</value>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.LargeChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the values of the Range element.
            </summary>
            <remarks>
            When the user clicks the track element of the Zoombar control, the Range element values
            would increase or decrease by the value of LargeChange.
            </remarks>
            <value>The large change value. The default is 0.2.</value>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.Orientation">
            <summary> 
            Gets or sets whether the Zoombar has an orientation of vertical or horizontal. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.XamZoombar.NewStyle">
            <summary>
            Used to handle the Style property changes.
            </summary>
            <value>The new style.</value>
        </member>
        <member name="T:Infragistics.CultureInfoHelper">
            <summary>
            Provides culture methods.
            </summary>
        </member>
        <member name="P:Infragistics.CultureInfoHelper.CultureToUse">
            <summary>
            Gets the culture to use.
            </summary>
            <value>The culture to use.</value>
        </member>
        <member name="T:Infragistics.EncodingsCollection">
            <summary>
            Collection class for list of IEncoding objects.
            </summary>
        </member>
        <member name="M:Infragistics.EncodingsCollection.#ctor">
            <summary>
            EncodingsCollection constructor.
            </summary>
        </member>
        <member name="T:Infragistics.IEncoding">
            <summary>
            Interface used by different types of Encoding.
            </summary>
        </member>
        <member name="M:Infragistics.IEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="byteIndex">The zero-based Index of the first byte to decode.</param>
            <param name="byteCount">The number of bytes to decode.</param>
            <param name="chars">The character array to contain the resulting set of characters.</param>
            <param name="charIndex">The zero-based Index at which to start writing the resulting set of characters.</param>
            <returns>
            The actual number of characters written into <paramref name="chars"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="bytes"/> is null.-or- <paramref name="chars"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="byteIndex"/> or <paramref name="byteCount"/> or <paramref name="charIndex"/> is less than zero.-or- <paramref name="byteIndex"/> and <paramref name="byteCount"/> do not denote a valid range in <paramref name="bytes"/>.-or- <paramref name="charIndex"/> is not a valid Index in <paramref name="chars"/>. </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="chars"/> does not have enough capacity from <paramref name="charIndex"/> to the End of the array to accommodate the resulting characters. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
        </member>
        <member name="M:Infragistics.IEncoding.GetMaxByteCount(System.Int32)">
            <summary>
            When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.
            </summary>
            <param name="charCount">The number of characters to encode.</param>
            <returns>
            The maximum number of bytes produced by encoding the specified number of characters.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="charCount"/> is less than zero. </exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
        </member>
        <member name="M:Infragistics.IEncoding.GetMaxCharCount(System.Int32)">
            <summary>
            When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.
            </summary>
            <param name="byteCount">The number of bytes to decode.</param>
            <returns>
            The maximum number of characters produced by decoding the specified number of bytes.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="byteCount"/> is less than zero. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for a complete explanation).</exception>
        </member>
        <member name="M:Infragistics.IEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="index">The zero-based Index of the first byte to decode.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>
            The number of characters produced by decoding the specified sequence of bytes.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="bytes"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> or <paramref name="count"/> is less than zero.-or- <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in <paramref name="bytes"/>. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
        </member>
        <member name="M:Infragistics.IEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="index">The zero-based Index of the first character to encode.</param>
            <param name="count">The number of characters to encode.</param>
            <returns>
            The number of bytes produced by encoding the specified characters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="chars"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> or <paramref name="count"/> is less than zero.-or- <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in <paramref name="chars"/>. </exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
        </member>
        <member name="M:Infragistics.IEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="charIndex">The zero-based Index of the first character to encode.</param>
            <param name="charCount">The number of characters to encode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The zero-based Index at which to start writing the resulting sequence of bytes.</param>
            <returns>
            The actual number of bytes written into <paramref name="bytes"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="chars"/> is null.-or- <paramref name="bytes"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="charIndex"/> or <paramref name="charCount"/> or <paramref name="byteIndex"/> is less than zero.-or- <paramref name="charIndex"/> and <paramref name="charCount"/> do not denote a valid range in <paramref name="chars"/>.-or- <paramref name="byteIndex"/> is not a valid Index in <paramref name="bytes"/>. </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="bytes"/> does not have enough capacity from <paramref name="byteIndex"/> to the End of the array to accommodate the resulting bytes. </exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
        </member>
        <member name="P:Infragistics.IEncoding.FallbackCharacter">
            <summary>
            Gets the best fit character when a fallback occurs.
            </summary>
            <value>The best fit character.</value>
        </member>
        <member name="P:Infragistics.IEncoding.CodePage">
            <summary>
            Gets the code page.
            </summary>
            <value>The code page.</value>
        </member>
        <member name="P:Infragistics.IEncoding.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Infragistics.Controls.Maps.LineCap">
            <summary>
            Describes available ends for drawing connection lines.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LineCap.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LineCap.Ellipse">
            <summary>
            Ellipse
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LineCap.Arrow">
            <summary>
            Arrow
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LineCap.SolidArrow">
            <summary>
            Solid Arrow
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LineCap.Diamond">
            <summary>
            Diamond
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LineCap.Tee">
            <summary>
            Tee
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LineCap.Square">
            <summary>
            Square
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LineCap.Cross">
            <summary>
            Cross
            </summary>
        </member>
        <member name="T:Infragistics.ErrorBarCalculatorReference">
            <summary>
            Describes available behaviors for choosing the direction of error bars calculation in scatter series.
            </summary>
        </member>
        <member name="F:Infragistics.ErrorBarCalculatorReference.X">
            <summary>
            Variable X.
            </summary>
        </member>
        <member name="F:Infragistics.ErrorBarCalculatorReference.Y">
            <summary>
            Variable Y.
            </summary>
        </member>
        <member name="T:Infragistics.ErrorBarCalculatorType">
            <summary>
            Describes available types of error bar calculators.
            </summary>
        </member>
        <member name="F:Infragistics.ErrorBarCalculatorType.Fixed">
            <summary>
            A calculator type that provides a fixed value.
            </summary>
        </member>
        <member name="F:Infragistics.ErrorBarCalculatorType.Percentage">
            <summary>
            A calculator type that provides a fixed percentage of each input value
            </summary>
        </member>
        <member name="F:Infragistics.ErrorBarCalculatorType.Data">
            <summary>
            A calculator type that provides the input values directly.
            </summary>
        </member>
        <member name="F:Infragistics.ErrorBarCalculatorType.StandardDeviation">
            <summary>
            A calculator type that provides the standard deviation of the input values.
            </summary>
        </member>
        <member name="F:Infragistics.ErrorBarCalculatorType.StandardError">
            <summary>
            A calculator type that provides the standard error of the input values.
            </summary>
        </member>
        <member name="T:Infragistics.IErrorBarCalculator">
            <summary>
            The error bar calculator interface
            </summary>
        </member>
        <member name="M:Infragistics.IErrorBarCalculator.GetCalculatorType">
            <summary>
            Gets the type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.IErrorBarCalculator.GetIndependentValue">
            <summary>
            Gets the independent value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.IErrorBarCalculator.GetDependentValue(System.Double)">
            <summary>
            Gets the dependent value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.IErrorBarCalculator.GetItemColumn">
            <summary>
            Gets the fast item column associated with this calculator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.IErrorBarCalculator.HasConstantPosition">
            <summary>
            Determines whether the position is constant.
            </summary>
            <returns>
            	<c>true</c> if position is constant; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Infragistics.IErrorBarCalculator.GetPosition">
            <summary>
            Gets the position.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Infragistics.IErrorBarCalculator.Changed">
            <summary>
            Event raised when a property of the calculator has changed.
            </summary>
        </member>
        <member name="T:Infragistics.ErrorMessageDisplayingEventArgs">
            <summary>
            Provides data for the ErrorMessageDisplaying event.
            </summary>
        </member>
        <member name="M:Infragistics.ErrorMessageDisplayingEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.ErrorMessageDisplayingEventArgs"/> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="P:Infragistics.ErrorMessageDisplayingEventArgs.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="T:Infragistics.FastItemColumn">
            <summary>
            Represents a cached column of doubles in a fast datasource.
            </summary>
        </member>
        <member name="T:Infragistics.IFastItemColumn`1">
            <summary>
            Represents the public view of a FastItemsSource column.
            </summary>
        </member>
        <member name="T:Infragistics.IFastItemColumnPropertyName">
            <summary>
            Interface for objects which store a property name to be used in a FastItemColumn.
            </summary>
        </member>
        <member name="P:Infragistics.IFastItemColumnPropertyName.PropertyName">
            <summary>
            Gets the column's property name.
            </summary>
        </member>
        <member name="P:Infragistics.IFastItemColumn`1.Minimum">
            <summary>
            Gets the column's minimum value.
            </summary>
            <remarks>
            The minimum is calculated in amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.IFastItemColumn`1.Maximum">
            <summary>
            Gets the column's maximum value.
            </summary>
            <remarks>
            The maximum is calculated in amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.FastItemColumn.Minimum">
            <summary>
            Gets the minimum value for the current column.
            </summary>
            <remarks>
            Getting the minimum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.FastItemColumn.Maximum">
            <summary>
            Gets the maximum value for the current column.
            </summary>
            <remarks>
            Getting the maximum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.FastItemDateTimeColumn.Minimum">
            <summary>
            Gets the minimum value for the current column.
            </summary>
            <remarks>
            Getting the minimum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.FastItemDateTimeColumn.Maximum">
            <summary>
            Gets the maximum value for the current column.
            </summary>
            <remarks>
            Getting the maximum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.FastItemObjectColumn.Minimum">
            <summary>
            Gets the minimum value for the current column.
            </summary>
            <remarks>
            Getting the minimum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.FastItemObjectColumn.Maximum">
            <summary>
            Gets the maximum value for the current column.
            </summary>
            <remarks>
            Getting the maximum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.FastItemIntColumn.Minimum">
            <summary>
            Gets the minimum value for the current column.
            </summary>
            <remarks>
            Getting the minimum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.FastItemIntColumn.Maximum">
            <summary>
            Gets the maximum value for the current column.
            </summary>
            <remarks>
            Getting the maximum value takes amortized constant time.
            </remarks>
        </member>
        <member name="T:Infragistics.FastItemProxyColumn">
            <summary>
            Represents a cached column of doubles in a fast datasource.
            </summary>
        </member>
        <member name="P:Infragistics.FastItemProxyColumn.Minimum">
            <summary>
            Gets the minimum value for the current column.
            </summary>
            <remarks>
            Getting the minimum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.FastItemProxyColumn.Maximum">
            <summary>
            Gets the maximum value for the current column.
            </summary>
            <remarks>
            Getting the maximum value takes amortized constant time.
            </remarks>
        </member>
        <member name="T:Infragistics.FastItemsSource">
            <summary>
            Represents a view of an enumerable items source
            </summary>
        </member>
        <member name="M:Infragistics.FastItemsSource.#ctor">
            <summary>
            FastItemsSource constructor.
            </summary>
        </member>
        <member name="M:Infragistics.FastItemsSource.Detach">
            <summary>
            Detaches this instance by removing old listeners.
            </summary>
        </member>
        <member name="M:Infragistics.FastItemsSource.Attach">
            <summary>
            Attaches this instance by adding new listeners.
            </summary>
        </member>
        <member name="M:Infragistics.FastItemsSource.GetEnumerator">
            <summary>
            Gets the IEnumerator used for looping through the FastItemsSource.
            </summary>
            <returns>The IEnumerator used for looping through the FastItemsSource.</returns>
        </member>
        <member name="M:Infragistics.FastItemsSource.IndexOf(System.Object)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="item">The item to get the index for.</param>
            <returns>The index of the specified item.</returns>
        </member>
        <member name="M:Infragistics.FastItemsSource.RegisterColumnDateTime(System.String)">
            <summary>
            Returns a DateTime FastItemColumn for the given property name.
            </summary>
            <param name="propertyName">The name of the property on the data items which is used to populate the FastItemColumn.</param>
            <returns>A DateTime FastItemColumn for the given property name.</returns>
        </member>
        <member name="M:Infragistics.FastItemsSource.RegisterColumnObject(System.String)">
            <summary>
            Returns an object FastItemColumn for the given property name.
            </summary>
            <param name="propertyName">The name of the property on the data items which is used to populate the FastItemColumn.</param>
            <returns>An object FastItemColumn for the given property name.</returns>
        </member>
        <member name="M:Infragistics.FastItemsSource.RegisterColumnInt(System.String)">
            <summary>
            Returns an integer FastItemColumn for the given property name.
            </summary>
            <param name="propertyName">The name of the property on the data items which is used to populate the FastItemColumn.</param>
            <returns>An integer FastItemColumn for the given property name.</returns>
        </member>
        <member name="M:Infragistics.FastItemsSource.RegisterColumn(System.String)">
            <summary>
            Returns a FastItemColumn for the given property name.
            </summary>
            <param name="propertyName">The name of the property on the data items which is used to populate the FastItemColumn.</param>
            <returns>A FastItemColumn for the given property name.</returns>
        </member>
        <member name="M:Infragistics.FastItemsSource.DeregisterColumn(Infragistics.IFastItemColumnPropertyName)">
            <summary>
            Uninitializes the FastItemColumn with the given property name.
            </summary>
            <param name="fastItemColumn">The object responsible for providing the property name of the FastItemColumn.</param>
        </member>
        <member name="E:Infragistics.FastItemsSource.Event">
            <summary>
            The FastItemsSourceEvent, which is raised when the collection is updated.
            </summary>
        </member>
        <member name="P:Infragistics.FastItemsSource.Dispatcher">
            <summary>
            The Dispatcher to defer refresh operations through, in order to avoid updates which are more frequent than necessary.
            </summary>
            <remarks>Deferring updates through the dispatcher reduces the CPU burden of FastItemsSource updates when the FastItemsSource is being used as a DataSource for a UI control.</remarks>
        </member>
        <member name="P:Infragistics.FastItemsSource.ItemsSource">
            <summary>
            The enumerable list of objects to get data from.
            </summary>
        </member>
        <member name="P:Infragistics.FastItemsSource.Count">
            <summary>
            Gets the number of items in the current FastItemsSource object.
            </summary>
        </member>
        <member name="P:Infragistics.FastItemsSource.Item(System.Int32)">
            <summary>
            Gets the items at the specified position.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.IFastItemsSourceProvider">
            <summary>
            Implementors are providers of FastItemsSource instances.
            </summary>
        </member>
        <member name="M:Infragistics.IFastItemsSourceProvider.GetFastItemsSource(System.Collections.IEnumerable)">
            <summary>
            Gets a fast item source for the target enumerable.
            </summary>
            <param name="target">The enumerable to get the FastItemsSource for.</param>
            <returns>The FastItemsSource reference.</returns>
        </member>
        <member name="M:Infragistics.IFastItemsSourceProvider.ReleaseFastItemsSource(System.Collections.IEnumerable)">
            <summary>
            Releases a FastItemsSource reference.
            </summary>
            <param name="itemsSource">The enumerable for which to release the FastItemsSource.</param>
            <returns>The FastItemsSource reference.</returns>
        </member>
        <member name="T:Infragistics.FastItemsSourceEventAction">
            <summary>
            Describes available actions that can cause a DataSource event. 
            </summary>
        </member>
        <member name="F:Infragistics.FastItemsSourceEventAction.Remove">
            <summary>
            One or more rows were removed from the data source.
            </summary>
        </member>
        <member name="F:Infragistics.FastItemsSourceEventAction.Insert">
            <summary>
            One or more rows were added to the data source.
            </summary>
        </member>
        <member name="F:Infragistics.FastItemsSourceEventAction.Replace">
            <summary>
            One or more rows were replaced in the data source.
            </summary>
        </member>
        <member name="F:Infragistics.FastItemsSourceEventAction.Change">
            <summary>
            An item property value changed in the data source.
            </summary>
        </member>
        <member name="F:Infragistics.FastItemsSourceEventAction.Reset">
            <summary>
            The entire data source contents were reset.
            </summary>
        </member>
        <member name="T:Infragistics.FastItemsSourceEventArgs">
            <summary>
            Provides data for the CollectionChanged event.
            </summary>
        </member>
        <member name="M:Infragistics.FastItemsSourceEventArgs.#ctor(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="position"></param>
            <param name="count"></param>
        </member>
        <member name="M:Infragistics.FastItemsSourceEventArgs.#ctor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="propertyName"></param>
        </member>
        <member name="P:Infragistics.FastItemsSourceEventArgs.Action">
            <summary>
            Gets the action that caused the event. 
            </summary>
        </member>
        <member name="P:Infragistics.FastItemsSourceEventArgs.Position">
            <summary>
            Gets the position of the modified rows.
            </summary>
        </member>
        <member name="P:Infragistics.FastItemsSourceEventArgs.Count">
            <summary>
            Gets the number of modified rows.
            </summary>
        </member>
        <member name="P:Infragistics.FastItemsSourceEventArgs.PropertyName">
            <summary>
            Gets the name of the modified property.
            </summary>
        </member>
        <member name="T:Infragistics.FastReflectionHelper">
            <summary>
            A reflection strategy that uses either traditional reflection or compiled lambda expressions
            to get property values from an object.
            </summary>
        </member>
        <member name="M:Infragistics.FastReflectionHelper.#ctor">
            <summary>
            Constructs the fast reflection helper.
            </summary>
        </member>
        <member name="M:Infragistics.FastReflectionHelper.#ctor(System.Boolean,System.String)">
            <summary>
            Constructs the fast reflection helper.
            </summary>
            <param name="useTraditionalReflection">Should the helper use traditional (slower) reflection.</param>
            <param name="propertyName">The propertyname this will be reflecting on.</param>
        </member>
        <member name="M:Infragistics.FastReflectionHelper.GetPropertyValue(System.Object)">
            <summary>
            Gets the property value from the specified item.
            </summary>
            <param name="item"></param>
            <returns>Property value or null if the property value cannot be determined.</returns>
        </member>
        <member name="M:Infragistics.FastReflectionHelper.GetPropertyValue(System.Type,System.Object)">
            <summary>
            Gets the property value for the specified item.
            </summary>
            <param name="itemType">The item type.</param>
            <param name="item">The item containing the property.</param>
            <returns>Property value or null if the property value cannot be determined.</returns>
        </member>
        <member name="P:Infragistics.FastReflectionHelper.PropertyName">
            <summary>
            Gets or sets the property name of the current FastReflectionHelper object.
            </summary>
        </member>
        <member name="P:Infragistics.FastReflectionHelper.UseTraditionalReflection">
            <summary>
            Indicates that current FastReflectionHelper object is not using compiled expressions.
            </summary>
        </member>
        <member name="P:Infragistics.FastReflectionHelper.Invalid">
            <summary>
            Returns true if the fast reflection helper is invalid, probably due to a lack of a property name.
            </summary>
        </member>
        <member name="T:Infragistics.GroupBy">
            <summary>
            Represents IEnumerable object that groups an item source by a column and then flattens the results into rows using the key column
            </summary>
        </member>
        <member name="F:Infragistics.GroupBy.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.GroupBy.KeyMemberPathProperty">
            <summary>
            Identifies the KeyMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.GroupBy.ValueMemberPathProperty">
            <summary>
            Identifies the ValueMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.GroupBy.GroupMemberPathProperty">
            <summary>
            Identifies the GroupMemeberPath dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.GroupBy.GetEnumerator">
            <summary>
            Gets the IEnumerator used for looping through the GroupBy.
            </summary>
            <returns>The IEnumerator used for looping through the GroupBy.</returns>
        </member>
        <member name="P:Infragistics.GroupBy.ItemsSource">
            <summary>
            The input data to the grouping operation.
            </summary>
        </member>
        <member name="P:Infragistics.GroupBy.KeyMemberPath">
            <summary>
            The property to use as a key to flatten a group into properties on the row.
            </summary>
        </member>
        <member name="P:Infragistics.GroupBy.ValueMemberPath">
            <summary>
            Gets or sets the property name that supplies numeric values.
            </summary>
        </member>
        <member name="P:Infragistics.GroupBy.GroupMemberPath">
            <summary>
            The property to use as a the group by clause.
            </summary>
        </member>
        <member name="E:Infragistics.GroupBy.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="T:Infragistics.GroupingBase">
            <summary>
            Base class for grouping collections by key.
            </summary>
        </member>
        <member name="M:Infragistics.GroupingBase.SetObjectForKey(System.String,System.Object)">
            <summary>
            Sets an item to be associated with the given key.
            </summary>
            <param name="key">The key.</param>
            <param name="obj">The data item.</param>
        </member>
        <member name="M:Infragistics.GroupingBase.SetObjectForKeyOverride(System.String,System.Object)">
            <summary>
            Method to override the behavior of the SetObjectForKey method.
            </summary>
            <param name="key">The key.</param>
            <param name="obj">The data item.</param>
        </member>
        <member name="M:Infragistics.GroupingBase.GetDefaultValue``1">
            <summary>
            Returns default value for specified type of an object
            </summary>
        </member>
        <member name="P:Infragistics.GroupingBase.Key">
            <summary>
            They GroupBy key.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Infragistics.RectChangedEventArgs">
            <summary>
            Provides data for rectangle changed events. 
            </summary>
        </member>
        <member name="M:Infragistics.RectChangedEventArgs.#ctor(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            RectChangedEventArgs constructor.
            </summary>
            <param name="oldRect">The previous value of the rectangle which is changing.</param>
            <param name="newRect">The new value of the rectangle which is changing.</param>
        </member>
        <member name="P:Infragistics.RectChangedEventArgs.OldRect">
            <summary>
            Gets the rectangle before the change.
            </summary>
        </member>
        <member name="P:Infragistics.RectChangedEventArgs.NewRect">
            <summary>
            Gets the new rectangle.
            </summary>
        </member>
        <member name="T:Infragistics.RectChangedEventHandler">
            <summary>
            Represents the method that will handle rectangle changed events. 
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Infragistics.Controls.SelectedCollectionBase`1">
            <summary>
             A collection of selectable items. 
            </summary>
            <typeparam name="T">An object of type <see cref="T:Infragistics.ISelectableObject"/></typeparam>
        </member>
        <member name="M:Infragistics.Controls.SelectedCollectionBase`1.AddRange(Infragistics.Controls.SelectedCollectionBase{`0})">
            <summary>
            Adds the specified collection of items to this collection. 
            </summary>
            <param name="items">items which should be added</param>
        </member>
        <member name="M:Infragistics.Controls.SelectedCollectionBase`1.SelectItem(`0,System.Boolean)">
            <summary>
            Selects the specified item. 
            </summary>
            <param name="item">The item being selected</param>
            <param name="shiftKey">Whether or not the shift key is down.</param>
        </member>
        <member name="M:Infragistics.Controls.SelectedCollectionBase`1.OnSelectionChanged(Infragistics.Controls.SelectedCollectionBase{`0},Infragistics.Controls.SelectedCollectionBase{`0})">
            <summary>
            Called when the Selection collection has changed. 
            </summary>
            <param name="oldCollection">
            The old collection.
            </param>
            <param name="newCollection">
            The new collection.
            </param>
        </member>
        <member name="M:Infragistics.Controls.SelectedCollectionBase`1.CreateNewInstance">
            <summary>
            Creates a new instance of this collection.
            </summary>
            <returns>
            The created instance.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.SelectedCollectionBase`1.AddItem(System.Int32,`0)">
            <summary>
            Adds the item at the specified index. 
            </summary>
            <param name="index">The zero-based index of the element to add.</param>
            <param name="item">item to be added</param>
        </member>
        <member name="M:Infragistics.Controls.SelectedCollectionBase`1.InsertItem(System.Int32,`0)">
            <summary>
            Adds the item at the specified index. 
            </summary>
            <param name="index">The zero-based index of the element to insert.</param>
            <param name="item">item to be inserted</param>
        </member>
        <member name="M:Infragistics.Controls.SelectedCollectionBase`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <returns>true if element was removed succesful</returns>
        </member>
        <member name="M:Infragistics.Controls.SelectedCollectionBase`1.ReplaceItem(System.Int32,`0)">
            <summary>
            Replaces the item at the specified index with the specified item.
            </summary>
            <param name="index">The zero-based index of the element to perlace.</param>
            <param name="newItem">item to add</param>
        </member>
        <member name="M:Infragistics.Controls.SelectedCollectionBase`1.ResetItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SelectedCollectionBase`1.ShiftSelectedItems">
            <summary>
            Gets a collection of items that were selected while the shift key was down. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SelectedCollectionBase`1.PivotItem">
            <summary>
            Gets or sets the item that was first selected when the shift key was pressed down. 
            </summary>
            <remarks> This is important to know, so that selected ranges can be changed.</remarks>
        </member>
        <member name="T:Infragistics.SRProvider">
            <summary>
            Provides string resources.
            </summary>
        </member>
        <member name="M:Infragistics.SRProvider.#ctor">
            <summary>
            SRProvider constructor.
            </summary>
        </member>
        <member name="P:Infragistics.SRProvider.OPD_DefaultInteraction">
            <summary>
            The default value of the XamOverviewPlusDetailPane's default interaction button tooltip.
            </summary>
        </member>
        <member name="P:Infragistics.SRProvider.OPD_ScaleToFit">
            <summary>
            The default value of the XamOverviewPlusDetailPane's scale to fit button tooltip.
            </summary>
        </member>
        <member name="P:Infragistics.SRProvider.OPD_ZoomTo100">
            <summary>
            The default value of the XamOverviewPlusDetailPane's zoom to 100% button tooltip.
            </summary>
        </member>
        <member name="P:Infragistics.SRProvider.OPD_ScaleToFit_SeriesViewer">
            <summary>
            The deafult value of the XamOverviewPlusDetailPane's scale to fit button tooltip in the SeriesViewer styles.
            </summary>
        </member>
        <member name="P:Infragistics.SRProvider.PieChart_Others">
            <summary>
            The default value of the Pie Chart's Others slice label.
            </summary>
        </member>
        <member name="P:Infragistics.SRProvider.FinancialSeries_Open">
            <summary>
            The default value of the FinancialSeries's Open string.
            </summary>
        </member>
        <member name="P:Infragistics.SRProvider.FinancialSeries_Close">
            <summary>
            The default value of the FinancialSeries's Close string.
            </summary>
        </member>
        <member name="P:Infragistics.SRProvider.FinancialSeries_Low">
            <summary>
            The default value of the FinancialSeries's Low string.
            </summary>
        </member>
        <member name="P:Infragistics.SRProvider.FinancialSeries_High">
            <summary>
            The default value of the FinancialSeries's High string.
            </summary>
        </member>
        <member name="P:Infragistics.SRProvider.FinancialSeries_Volume">
            <summary>
            The default value of the FinancialSeries's Volume string.
            </summary>
        </member>
        <member name="P:Infragistics.SRProvider.BubbleSeries_Radius">
            <summary>
            The default value of the BubbleSeries's Radius string.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.InteractionState">
            <summary>
            Describes available interaction states of the chart or geographic map control.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.InteractionState.None">
            <summary>
            User gesture will not change the state of the chart.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.InteractionState.DragZoom">
            <summary>
            User gesture will start a drag rectangle to zoom the chart.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.InteractionState.DragPan">
            <summary>
            User gesture will start a pan action to move the chart's window.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.InteractionState.Auto">
            <summary>
            User gesture will start a pan action in a touch environment and a drag rectangle in a mouse environment.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.IOverviewPlusDetailControl">
            <summary>
            Interface for controls which can host the OverviewPlusDetailPane.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.IOverviewPlusDetailControl.ZoomTo100">
            <summary>
            Zoom the IOverviewPlusDetailControl to 100%.
            </summary>
            <remarks>
            This method will be called when the OverviewPlusDetailPane's "Zoom to 100%" action is triggered, typically when the "Zoom to 100%" button is clicked.  When this method is called, the IOverviewPlusDetailControl should zoom to a state which the user would recognize as "100% zoom."
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.IOverviewPlusDetailControl.ScaleToFit">
            <summary>
            Scale the IOverviewPlusDetailControl to fit all its contents in view.
            </summary>
            <remarks>
            This method will be called when the OverviewPlusDetailPane's "Scale to Fit" action is triggered, typically when the "Scale to fit" button is clicked.  When this method is called, the IOverviewPlusDetailControl should zoom so that all its contents are in view.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.IOverviewPlusDetailControl.RenderPreview">
            <summary>
            Render preview content to the OverviewPlusDetailPane.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.IOverviewPlusDetailControl.WorldRect">
            <summary>
            A rectangle representing the full bounds of the contents of the IOverviewPlusDetailControl.
            </summary>
            <remarks>
            WorldRect can be made of abstract coordinates, not related to screen space.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.IOverviewPlusDetailControl.ViewportRect">
            <summary>
            A rectangle representing the bounds of the contents of the IOverviewPlusDetailControl.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.IOverviewPlusDetailControl.MinimumZoomLevel">
            <summary>
            The minimum zoom value to be allowed by the OverviewPlusDetailPane.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.IOverviewPlusDetailControl.MaximumZoomLevel">
            <summary>
            The maximum zoom value to be allowed by the OverviewPlusDetailPane.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.IOverviewPlusDetailControl.ZoomLevelDisplayText">
            <summary>
            The text to display to represent the zoom level on the OverviewPlusDetailPane.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.IOverviewPlusDetailControl.DefaultInteraction">
            <summary>
            Gets or sets the default interaction state.
            </summary>
            <value>The default interaction.</value>
        </member>
        <member name="T:Infragistics.Controls.NavigationSettings">
            <summary>
            Represens the navigations settings.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.NavigationSettings.AllowPanProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.NavigationSettings.AllowPan"/> dependency property. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.NavigationSettings.AllowZoomProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.NavigationSettings.AllowZoom"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.NavigationSettings.AllowPan">
            <summary>
            Gets or sets a value indicating whether the user can move the <see cref="T:Infragistics.Controls.SurfaceViewer"/>.
            </summary>
            <value><c>true</c> if pan is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Infragistics.Controls.NavigationSettings.AllowZoom">
            <summary>
            Gets or sets a value indicating whether the user can zoom the <see cref="T:Infragistics.Controls.SurfaceViewer"/>.
            </summary>
            <value><c>true</c> if the zoom is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Infragistics.Controls.OverviewPlusDetailPaneMode">
            <summary>
            Describes available modes of displaying Overview Plus Detail Pane control.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.OverviewPlusDetailPaneMode.Minimal">
            <summary>
            Minimum OverviewPlusDetailPane display.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.OverviewPlusDetailPaneMode.Full">
            <summary>
            Full OverviewPlusDetailPane display.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.OverviewPlusDetailPaneMode.Compact">
            <summary>
            Compact OverviewPlusDetailPane display.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.PropertyChangedEventArgs`1">
            <summary>
             Provides data for the System.ComponentModel.INotifyPropertyChanged.PropertyChanged event.    
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Infragistics.Controls.PropertyChangedEventArgs`1.#ctor(System.String,`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.PropertyChangedEventArgs`1"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Infragistics.Controls.PropertyChangedEventArgs`1.OldValue">
            <summary>
            Gets the value before the change.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.PropertyChangedEventArgs`1.NewValue">
            <summary>
            Gets the value after the change.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.SurfaceViewer">
            <summary>
            Represents a surface viewer control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.SurfaceViewer"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.OnDragRectChanging(Infragistics.RectChangedEventArgs)">
            <summary>
            Raises the <see cref="E:DragRectChanging"/> event.
            </summary>
            <param name="e">The <see cref="T:Infragistics.RectChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.OnDragRectChanged(Infragistics.RectChangedEventArgs)">
            <summary>
            Raises the <see cref="E:DragRectChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Infragistics.RectChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Infragistics.Controls.SurfaceViewer.DragStrokeProperty">
            <summary>
            Identifies the DragStroke dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SurfaceViewer.DragStrokeThicknessProperty">
            <summary>
            Identifies the DragStrokeThickness dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SurfaceViewer.DragStrokeDashArrayProperty">
            <summary>
            Identifies the DragStrokeDashArray dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SurfaceViewer.PreviewBrushProperty">
            <summary>
            Identifies the PreviewBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SurfaceViewer.MinimumZoomLevelProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.SurfaceViewer.MinimumZoomLevel"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.OnMinimumZoomLevelChanged(System.Double,System.Double)">
            <summary>
            MinimumZoomLevelProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.Controls.SurfaceViewer.MaximumZoomLevelProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.SurfaceViewer.MaximumZoomLevel"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.OnMaximumZoomLevelChanged(System.Double,System.Double)">
            <summary>
            MaximumZoomLevelProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.Controls.SurfaceViewer.WorldRectProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.SurfaceViewer.WorldRect"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.OnWorldRectChanged(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            WorldRectProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.Controls.SurfaceViewer.WindowRectProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.SurfaceViewer.WindowRect"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.OnWindowRectChanged(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            WindowRectProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.Controls.SurfaceViewer.PreviewRectProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.SurfaceViewer.PreviewRect"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.OnPreviewRectChanged(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            PreviewRectProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.OnViewportRectChanged(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            ViewportRectProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.Controls.SurfaceViewer.OverviewPlusDetailPaneStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.SurfaceViewer.OverviewPlusDetailPaneStyle"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.OnOverviewPlusDetailPaneStyleChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            OverviewPlusDetailPaneStyleProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.Controls.SurfaceViewer.HorizontalOverviewPlusDetailPaneAlignmentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.SurfaceViewer.HorizontalOverviewPlusDetailPaneAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SurfaceViewer.VerticalOverviewPlusDetailPaneAlignmentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.SurfaceViewer.VerticalOverviewPlusDetailPaneAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SurfaceViewer.OverviewPlusDetailPaneVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.SurfaceViewer.OverviewPlusDetailPaneVisibility"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) 
            call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>. In simplest terms, this means the method is called 
            just before a UI element displays in an application. For more information, see Remarks.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.MouseMove"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.MouseWheel"/> event occurs to provide handling for the event in a derived class without attaching a delegate.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Input.MouseWheelEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.KeyDown"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.RenderPreview">
            <summary>
            Renders the preview.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.Adjust(System.Windows.Rect)">
            <summary>
            Adjusts the specified rect.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.ScaleToFit">
            <summary>
            Scales to fit.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.ZoomTo100">
            <summary>
            Zooms to 100%.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.ZoomIn">
            <summary>
            Increase the scale.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.ZoomOut">
            <summary>
            Decrease the scale.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.OnPropertyUpdated(System.String,System.Object,System.Object)">
            <summary>
            Called when a property is updated.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Infragistics.Controls.SurfaceViewer.CanStartNavigation(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Determines whether this instance can start navigation.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
            <returns>
            	<c>true</c> if this instance can start navigation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="E:Infragistics.Controls.SurfaceViewer.DragRectChanging">
            <summary>
            Occurs when the drag rect is changing.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.SurfaceViewer.DragRectChanged">
            <summary>
            Occurs when the drag rect is changed.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.SurfaceViewer.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.DragStroke">
            <summary>
            Sets or gets the DragStroke property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.DragStrokeThickness">
            <summary>
            Sets or gets the DragStrokeThickness property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.DragStrokeDashArray">
            <summary>
            Sets or gets the DragStrokeDashArray property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.PreviewBrush">
            <summary>
            Sets or gets the PreviewBrush property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.NavigationSettings">
            <summary>
            Gets or sets the navigation settings.
            </summary>
            <value>The navigation settings.</value>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.MinimumZoomLevel">
            <summary>
            Gets or sets the minimum scale.
            </summary>
            <value>The minimum scale.</value>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.MaximumZoomLevel">
            <summary>
            Gets or sets the maximum scale.
            </summary>
            <value>The maximum scale.</value>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.WorldRect">
            <summary>
            Gets or sets the world rect.
            </summary>
            <value>The world rect.</value>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.WindowRect">
            <summary>
            Gets or sets the window rect.
            </summary>
            <value>The window rect.</value>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.PreviewRect">
            <summary>
            Gets or sets the preview rect.
            </summary>
            <value>The preview rect.</value>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.ViewportRect">
            <summary>
            Gets the ViewportRect property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.OverviewPlusDetailPaneStyle">
            <summary>
            Gets or sets the overview plus detail pane style.
            </summary>
            <value>The overview plus detail pane style.</value>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.HorizontalOverviewPlusDetailPaneAlignment">
            <summary>
            Gets or sets the horizontal overview plus detail pane alignment.
            </summary>
            <value>The horizontal overview plus detail pane alignment.</value>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.VerticalOverviewPlusDetailPaneAlignment">
            <summary>
            Gets or sets the vertical overview plus detail pane alignment.
            </summary>
            <value>The vertical overview plus detail pane alignment.</value>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.OverviewPlusDetailPaneVisibility">
            <summary>
            Gets or sets the overview plus detail pane visibility.
            </summary>
            <value>The overview plus detail pane visibility.</value>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.ZoomLevel">
            <summary>
            Gets or sets the zoom level.
            </summary>
            <value>The zoom level.</value>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.OverviewPlusDetailPane">
            <summary>
            Gets the overview plus detail pane.
            </summary>
            <value>The overview plus detail pane.</value>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.ZoomLevelDisplayText">
            <summary>
            The text to display in the callout above the zoom level slider.
            </summary>
            <remarks>
            This text is expected to change whenever the zoom level is changed.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.ContentPresenter">
            <summary>
            The ContentPresenter element from the Template of this SurfaceViewer.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.Overlay">
            <summary>
            The Overlay element from the Template of this SurfaceViewer.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.CurrentModifiers">
            <summary>
            Represents the keyboard modifiers that are currently held down.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SurfaceViewer.DefaultInteraction">
            <summary>
            Gets or sets the default interaction state.
            </summary>
            <value>The default interaction.</value>
        </member>
        <member name="T:Infragistics.Controls.XamOverviewPlusDetailPane">
            <summary>
            The XamOverviewPlusDetailPane control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.XamOverviewPlusDetailPane.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.XamOverviewPlusDetailPane"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.XamOverviewPlusDetailPane.OnWindowChanging(Infragistics.Controls.PropertyChangedEventArgs{System.Windows.Rect})">
            <summary>
            Raises the <see cref="E:WindowChanging"/> event.
            </summary>
            <param name="e">The <see cref="T:Infragistics.Controls.PropertyChangedEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.XamOverviewPlusDetailPane.OnWindowChanged(Infragistics.Controls.PropertyChangedEventArgs{System.Windows.Rect})">
            <summary>
            Raises the <see cref="E:WindowChanged"/> event.
            </summary>
            <param name="a">The <see cref="T:Infragistics.Controls.PropertyChangedEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.XamOverviewPlusDetailPane.OnThumbnailSizeChanged(Infragistics.Controls.PropertyChangedEventArgs{System.Windows.Size})">
            <summary>
            Method called when the OverviewPlusDetailPane thumbnail size is changed.
            </summary>
            <param name="e">The EventArgs in context.</param>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.ImmediateProperty">
            <summary>
            Identifies the Immediate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.WorldProperty">
            <summary>
            Identifies the World dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.WorldStyleProperty">
            <summary>
            Identifies the WorldStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.WindowProperty">
            <summary>
            Identifies the Window dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.WindowStyleProperty">
            <summary>
            Identifies the WindowStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.PreviewProperty">
            <summary>
            Identifies the Preview dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.PreviewStyleProperty">
            <summary>
            Identifies the PreviewStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.ShrinkToThumbnailProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamOverviewPlusDetailPane.ShrinkToThumbnail"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.XamOverviewPlusDetailPane.OnShrinkToThumbnailChanged(System.Boolean,System.Boolean)">
            <summary>
            ShrinkToThumbnailProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.ModeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamOverviewPlusDetailPane.Mode"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.XamOverviewPlusDetailPane.OnModeChanged(Infragistics.Controls.OverviewPlusDetailPaneMode,Infragistics.Controls.OverviewPlusDetailPaneMode)">
            <summary>
            ModeProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.ZoomTo100ButtonVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamOverviewPlusDetailPane.ZoomTo100ButtonVisibility"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.ScaleToFitButtonVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamOverviewPlusDetailPane.ScaleToFitButtonVisibility"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.InteractionStatesToolVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamOverviewPlusDetailPane.InteractionStatesToolVisibility"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.DragPanButtonToolTipProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamOverviewPlusDetailPane.DragPanButtonToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.DragZoomButtonToolTipProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamOverviewPlusDetailPane.DragZoomButtonToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.ZoomInButtonToolTipProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamOverviewPlusDetailPane.ZoomInButtonToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.ZoomOutButtonToolTipProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamOverviewPlusDetailPane.ZoomOutButtonToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.ZoomTo100ButtonToolTipProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamOverviewPlusDetailPane.ZoomTo100ButtonToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.ScaleToFitButtonToolTipProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamOverviewPlusDetailPane.ScaleToFitButtonToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.DefaultInteractionButtonToolTipProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamOverviewPlusDetailPane.DefaultInteractionButtonToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.ZoomLevelLargeChangeProperty">
            <summary>
            Identifies the ZoomLevelLargeChange dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.InnerHorizontalAlignmentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamOverviewPlusDetailPane.InnerHorizontalAlignment"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.XamOverviewPlusDetailPane.OnInnerHorizontalAlignmentChanged(System.Windows.HorizontalAlignment,System.Windows.HorizontalAlignment)">
            <summary>
            InnerHorizontalAlignmentProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.Controls.XamOverviewPlusDetailPane.InnerVerticalAlignmentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.XamOverviewPlusDetailPane.InnerVerticalAlignment"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.XamOverviewPlusDetailPane.OnInnerVerticalAlignmentChanged(System.Windows.VerticalAlignment,System.Windows.VerticalAlignment)">
            <summary>
            InnerVerticalAlignmentProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Infragistics.Controls.XamOverviewPlusDetailPane.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass)
            call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            In simplest terms, this means the method is called just before a
            UI element displays in an application. For more information, see Remarks.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.XamOverviewPlusDetailPane.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity"/>) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.XamOverviewPlusDetailPane.OnPropertyUpdated(System.String,System.Object,System.Object)">
            <summary>
            Method invoked whenever a property value is changed.
            </summary>
            <param name="propertyName">The name of the changed property.</param>
            <param name="oldValue">The previous value of the changed property.</param>
            <param name="newValue">The new value of the changed property.</param>
        </member>
        <member name="M:Infragistics.Controls.XamOverviewPlusDetailPane.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Infragistics.Controls.XamOverviewPlusDetailPane.WindowChanging">
            <summary>
            Occurs when window is changing.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.XamOverviewPlusDetailPane.WindowChanged">
            <summary>
            Occurs when window is changed.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.XamOverviewPlusDetailPane.ThumbnailSizeChanged">
            <summary>
            Occurs when the actual size of the thumbnail changes.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.Immediate">
            <summary>
            Sets or gets the Immediate property.
            <para>This is a dependency property.</para>
            </summary>
            <remarks>
            In immediate mode, the thumbnail directly modifies its own Window rectangle.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.World">
            <summary>
            Sets or gets the World property.
            <para>This is a dependency property.</para>
            </summary>
            <remarks>
            The world rectangle defines the base coordinate system for the Window property, and
            is also controls the shape of the visible world rectangle in the thumbnail control (adjusted to
            fit whilst maintaining aspect ratio)
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.WorldStyle">
            <summary>
            Sets or gets the WorldStyle property.
            <para>This is a dependency property.</para>
            </summary>
            <remarks>
            The world rectangle defines the base coordinate system for the Window property, and
            is also controls the shape of the visible world rectangle in the thumbnail control (adjusted to
            fit whilst maintaining aspect ratio)
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.Window">
            <summary>
            Sets or gets the Window property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.WindowStyle">
            <summary>
            Sets or gets the WindowStyle property.
            <para>This is a dependency property.</para>
            </summary>
            <remarks>
            The world rectangle defines the base coordinate system for the Window property, and
            is also controls the shape of the visible world rectangle in the thumbnail control (adjusted to
            fit whilst maintaining aspect ratio)
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.Preview">
            <summary>
            Sets or gets the Preview property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.PreviewStyle">
            <summary>
            Sets or gets the PreviewStyle property.
            <para>This is a dependency property.</para>
            </summary>
            <remarks>
            The world rectangle defines the base coordinate system for the Window property, and
            is also controls the shape of the visible world rectangle in the thumbnail control (adjusted to
            fit whilst maintaining aspect ratio)
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.ShrinkToThumbnail">
            <summary>
            Gets or sets a value indicating whether is shrinking to thumbnail.
            </summary>
            <value><c>true</c> if is shrinking to thumbnail; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.SurfaceViewer">
            <summary>
            Gets the surface viewer.
            </summary>
            <value>The surface viewer.</value>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.PreviewCanvas">
            <summary>
            Gets the preview canvas.
            </summary>
            <value>The preview canvas.</value>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.PreviewViewportdRect">
            <summary>
            Gets the preview viewportd rect.
            </summary>
            <value>The preview viewportd rect.</value>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.ZoomTo100ButtonVisibility">
            <summary>
            Gets or sets the zoom to 100% button visibility.
            </summary>
            <value>The zoom to 100% button visibility.</value>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.ScaleToFitButtonVisibility">
            <summary>
            Gets or sets the scale to fit button visibility.
            </summary>
            <value>The scale to fit button visibility.</value>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.InteractionStatesToolVisibility">
            <summary>
            Gets or sets the interaction states tool visibility.
            </summary>
            <value>The interaction states tool visibility.</value>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.DragPanButtonToolTip">
            <summary>
            Gets or sets the zoom to 100% button tooltip.
            </summary>
            <value>The zoom to 100% button tooltip.</value>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.DragZoomButtonToolTip">
            <summary>
            Gets or sets the zoom to 100% button tooltip.
            </summary>
            <value>The zoom to 100% button tooltip.</value>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.ZoomInButtonToolTip">
            <summary>
            Gets or sets the zoom to 100% button tooltip.
            </summary>
            <value>The zoom to 100% button tooltip.</value>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.ZoomOutButtonToolTip">
            <summary>
            Gets or sets the zoom to 100% button tooltip.
            </summary>
            <value>The zoom to 100% button tooltip.</value>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.ZoomTo100ButtonToolTip">
            <summary>
            Gets or sets the zoom to 100% button tooltip.
            </summary>
            <value>The zoom to 100% button tooltip.</value>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.ScaleToFitButtonToolTip">
            <summary>
            Gets or sets the scale to fit button tooltip.
            </summary>
            <value>The scale to fit button tooltip.</value>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.DefaultInteractionButtonToolTip">
            <summary>
            The content to display as the tooltip over the button which changes the default interaction of the host control.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.ZoomLevelLargeChange">
            <summary>
            The amount to increment the zoom level by when an interaction by the end user calls for a large change.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.IsZoomable">
            <summary>
            Boolean indicating whether or not zooming is enabled on the OverviewPlusDetailPane.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.Viewport">
            <summary>
            Gets the viewport.
            </summary>
            <value>The viewport.</value>
        </member>
        <member name="E:Infragistics.Controls.XamOverviewPlusDetailPane.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.XamOverviewPlusDetailPane.UpdatingSliderRanges">
            <summary>
            Boolean indicating whether or not the slider ranges are currently being updated.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.ArcGISOnlineTileSource">
            <summary>
            
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapTileSource">
            <summary>
            Represents a specialised multiscale tile source used by the XamMap control.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.XamMultiScaleTileSource">
            <summary>
             Used to specify the source of Multi scale images
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMultiScaleTileSource.#ctor(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            XamMultiScaleTileSource constructor.
            </summary>
            <param name="imageWidth">The width of the Deep Zoom image.</param>
            <param name="imageHeight">The height of the Deep Zoom image.</param>
            <param name="tileWidth">The width of the tiles in the Deep Zoom image.</param>
            <param name="tileHeight">The height of the tiles in the Deep Zoom image.</param>
            <param name="tileOverlap">How much the tiles in the Deep Zoom image overlap.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMultiScaleTileSource.GetTileLayers(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Object})">
            <summary>
            Gets a collection of the tiles.
            </summary>
            <param name="tileLevel">Level of the tile.</param>
            <param name="tilePositionX">X-coordinate position of the tile.</param>
            <param name="tilePositionY">Y-coordinate position of the tile.</param>
            <param name="tileImageLayerSources">Source of the tile image layer.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMultiScaleTileSource.InvalidateTileLayer(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Invalidates specified tile layers.
            </summary>
            <param name="level">The level.</param>
            <param name="tilePositionX">The tile position X.</param>
            <param name="tilePositionY">The tile position Y.</param>
            <param name="tileLayer">The tile layer.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMultiScaleTileSource.IsImageStreamValid(System.IO.Stream)">
            <summary>
            Can be overridden to indicate whether images returned over the wire are valid to display or not.
            </summary>
            <param name="stream">The image data to validate.</param>
            <returns>True if the image data is valid for display.</returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleTileSource.ImageWidth">
            <summary>
            The width of the Deep Zoom image.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleTileSource.ImageHeight">
            <summary>
            The height of the Deep Zoom image.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleTileSource.TileWidth">
            <summary>
            The width of the tiles in the Deep Zoom image.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleTileSource.TileHeight">
            <summary>
            The height of the tiles in the Deep Zoom image. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleTileSource.TileOverlap">
            <summary>
            How much the tiles in the Deep Zoom image overlap.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapTileSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            MapTileSource constructor.
            </summary>
            <param name="imageWidth">The width of the Deep Zoom image.</param>
            <param name="imageHeight">The height of the Deep Zoom image.</param>
            <param name="tileWidth">The width of the tiles in the Deep Zoom image.</param>
            <param name="tileHeight">The height of the tiles in the Deep Zoom image.</param>
            <param name="tileOverlap">How much the tiles in the Deep Zoom image overlap.</param>
        </member>
        <member name="F:Infragistics.Controls.Maps.ArcGISOnlineTileSource.MapServerUriProperty">
            <summary>
            Identifies the MapServerUriProperty property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ArcGISOnlineTileSource.IsMapPublicProperty">
            <summary>
            Identifies the IsMapPublic property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ArcGISOnlineTileSource.LevelOfDetailProperty">
            <summary>
            Identifies the LevelOfDetailProperty property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ArcGISOnlineTileSource.UserTokenProperty">
            <summary>
            Identifies the UserTokenProperty property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.ArcGISOnlineTileSource.GetTileLayers(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Object})">
            <summary>
            Overridden method for getting a geographic imagery tile at specific position of the map
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ArcGISOnlineTileSource.MapServerUri">
            <summary>
            Gets or sets the map server uri.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ArcGISOnlineTileSource.IsMapPublic">
            <summary>
            Gets or sets the IsMapPublic flag.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ArcGISOnlineTileSource.LevelOfDetail">
            <summary>
            Gets or sets the Levels of Detail.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ArcGISOnlineTileSource.UserToken">
            <summary>
            Gets or sets the User Token.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.BingMapsTileSource">
            <summary>
            Represents a BingMaps ImageTileSource
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.BingMapsTileSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Maps.BingMapsTileSource"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.BingMapsTileSource.#ctor(System.String,System.Collections.ObjectModel.ObservableCollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Maps.BingMapsTileSource"/> class.
            </summary>        
            <param name="tilePath">Tile image Uri.</param>
            <param name="subDomains">Collection of image Uri subdomains.</param>
        </member>
        <member name="F:Infragistics.Controls.Maps.BingMapsTileSource.TilePathProperty">
            <summary>
            Identifies the TilePath property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.BingMapsTileSource.SubDomainsProperty">
            <summary>
            Identifies the SubDomainsProperty.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.BingMapsTileSource.CultureNameProperty">
            <summary>
            Identifies the CultureName property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.BingMapsTileSource.GetTileLayers(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Object})">
            <summary>
            Gets a collection of the tiles.
            </summary>
            <param name="tileLevel">Level of the tile.</param>
            <param name="tilePositionX">X-coordinate position of the tile.</param>
            <param name="tilePositionY">Y-coordinate position of the tile.</param>
            <param name="tileImageLayerSources">Source of the tile image layer.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.BingMapsTileSource.GetQuadKey(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the quadkey from tile position and level.
            </summary>
            <param name="tileLevel">Level of the tile.</param>
            <param name="tilePositionX">X-coordinate position of the tile.</param>
            <param name="tilePositionY">Y-coordinate position of the tile.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.BingMapsTileSource.TilePath">
            <summary>
            Gets or sets the map tile image uri.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.BingMapsTileSource.SubDomains">
            <summary>
            Gets or sets the collection of image uri subdomains.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.BingMapsTileSource.CultureName">
            <summary>
            Gets or sets the culture name for this tile source.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.CloudMadeTileSource">
            <summary>
            Represents a Cloud Made Image Tile Source
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.CloudMadeTileSource.#ctor">
            <summary>
            Constructs a new custom tile source from a CloudMade image set.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.CloudMadeTileSource.KeyProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.CloudMadeTileSource.Key"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.CloudMadeTileSource.ParameterProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.CloudMadeTileSource.Parameter"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.CloudMadeTileSource.GetTileLayers(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Object})">
            <summary>
            Adds the URI for the specified tile to the given list.
            </summary>
            <param name="tileLevel">The tile's hierarchy level.</param>
            <param name="tilePositionX">The tile's horizontal position.</param>
            <param name="tilePositionY">The tile's vertical position.</param>
            <param name="tileImageLayerSources">The output list of tile URIs.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.CloudMadeTileSource.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.CloudMadeTileSource.Parameter">
            <summary>
            The CloudMade parameter, which can be used to select the style of tile images to return.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.DesignServices">
            <summary>
            Utility class for design time.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.DesignServices.IsInDesignModeStatic">
            <summary>
            Gets a value indicating whether the control is in design mode (running in Blend
            or Visual Studio).
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.OpenStreetMapTileSource">
            <summary>
            Represents an Open Street Map image tile source
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.OpenStreetMapTileSource.#ctor">
            <summary>
            Constructs a new custom tile source from a OpenStreetMap image set.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.OpenStreetMapTileSource.GetTileLayers(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Object})">
            <summary>
            Adds the URI for the specified tile to the given list.
            </summary>
            <param name="tileLevel">The tile's hierarchy level.</param>
            <param name="tilePositionX">The tile's horizontal position.</param>
            <param name="tilePositionY">The tile's vertical position.</param>
            <param name="tileImageLayerSources">The output list of tile URIs.</param>
        </member>
        <member name="T:Infragistics.CursorTypeConverter">
            <summary>
            TypeConverter class for cursors.
            </summary>
        </member>
        <member name="M:Infragistics.CursorTypeConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.CursorTypeConverter"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.CursorTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A Type that represents the type you want to convert from. </param>
            <returns>True if this converter can perform the conversion; otherwise, False.</returns>
        </member>
        <member name="M:Infragistics.CursorTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="destinationType">A Type that represents the type you want to convert to. </param>
            <returns>True if this converter can perform the conversion; otherwise, False.</returns>
        </member>
        <member name="M:Infragistics.CursorTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.DateTimeConverter">
            <summary>
            TypeConverter class for DateTime objects.
            </summary>
        </member>
        <member name="M:Infragistics.DateTimeConverter.#ctor">
            <summary>
            DateTimeConverter constructor.
            </summary>
        </member>
        <member name="M:Infragistics.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A Type that represents the type you want to convert from. </param>
            <returns>True if this converter can perform the conversion; otherwise, False.</returns>
        </member>
        <member name="M:Infragistics.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="destinationType">A Type that represents the type you want to convert to. </param>
            <returns>True if this converter can perform the conversion; otherwise, False.</returns>
        </member>
        <member name="M:Infragistics.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information. 
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:Infragistics.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information. 
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo. If a null reference is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="T:Infragistics.ObjectConverter">
            <summary>
            TypeConverter class for converting string to object.
            </summary>
        </member>
        <member name="M:Infragistics.ObjectConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.ObjectConverter"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.ObjectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A Type that represents the type you want to convert from. </param>
            <returns>True if this converter can perform the conversion; otherwise, False.</returns>
        </member>
        <member name="M:Infragistics.ObjectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="destinationType">A Type that represents the type you want to convert to. </param>
            <returns>True if this converter can perform the conversion; otherwise, False.</returns>
        </member>
        <member name="M:Infragistics.ObjectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from string.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.SolidBrushCollectionConverter">
            <summary>
            Converter for a collection of SolidColorBrush objects.
            </summary>
        </member>
        <member name="M:Infragistics.SolidBrushCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter. 
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.SolidBrushCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the type of this converter. 
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter. </param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Infragistics.SolidBrushCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object to the specified type. 
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="destinationType">The type you want to convert to. </param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="T:Infragistics.StringFormatConverter">
            <summary>
            String converter which formats the string according to the current culture.
            </summary>
        </member>
        <member name="M:Infragistics.StringFormatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:Infragistics.StringFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
        </member>
        <member name="T:Infragistics.TimeSpanConverter">
            <summary>
            TypeConverter class for TimeSpan objects.
            </summary>
        </member>
        <member name="M:Infragistics.TimeSpanConverter.#ctor">
            <summary>
            TimeSpanConverter constructor.
            </summary>
        </member>
        <member name="M:Infragistics.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A Type that represents the type you want to convert from. </param>
            <returns>True if this converter can perform the conversion; otherwise, False.</returns>
        </member>
        <member name="M:Infragistics.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="destinationType">A Type that represents the type you want to convert to. </param>
            <returns>True if this converter can perform the conversion; otherwise, False.</returns>
        </member>
        <member name="M:Infragistics.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information. 
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:Infragistics.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information. 
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo. If a null reference is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="T:Infragistics.ArrayUtil">
            <summary>
            Utility class for array operations.
            </summary>
        </member>
        <member name="M:Infragistics.ArrayUtil.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffles the contents of the current IList object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
        </member>
        <member name="M:Infragistics.ArrayUtil.InsertionIndex``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Returns the insertion index for an element in a sorted list.
            </summary>
            <remarks>
            The list must be sorted in ascending order prior to calling this method. 
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="value"></param>
            <returns>Insertion index for the specified value.</returns>
        </member>
        <member name="M:Infragistics.ArrayUtil.InsertionIndex``1(System.Collections.Generic.IList{``0},System.Comparison{``0},``0)">
            <summary>
            Returns the insertion index for an element in a sorted list.
            </summary>
            <remarks>
            The list must be sorted according to the specified comparison
            prior to calling this method. 
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="comparison"></param>
            <param name="value"></param>
            <returns>Insertion index for the specified value.</returns>
        </member>
        <member name="M:Infragistics.ArrayUtil.Permute``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Permutes an enumeration of enumerators, one for each permutation of the input.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ArrayUtil.BinarySearch``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32})">
            <summary>
            Conducts a binary search for a value in the list using a given comparison function.
            </summary>
            <typeparam name="T">The Type of items in the list.</typeparam>
            <param name="list">The list of items to search.</param>
            <param name="comparisonFunction">A comparison function used for finding the target item in the list.</param>
            <returns>The index of the found item in the list.</returns>
        </member>
        <member name="T:Infragistics.BrushUtil">
            <summary>
            Utility class for brush-based operations.
            </summary>
        </member>
        <member name="M:Infragistics.BrushUtil.Duplicate(System.Windows.Media.Brush)">
            <summary>
            Creates a duplicate of the current brush
            </summary>
            <param name="brush"></param>
            <returns>New brush</returns>
            <remarks>
            This function duplicates the functionality of the missing Clone method.
            </remarks>
        </member>
        <member name="M:Infragistics.BrushUtil.GetInterpolation(System.Windows.Media.Brush,System.Double,System.Windows.Media.Brush,Infragistics.InterpolationMode)">
            <summary>
            Creates a new brush as a linear interpolation according to the
            interpolation parameter between the two extremes.
            </summary>
            <param name="minimum">Lower extreme</param>
            <param name="interpolation">Interpolation parameter (internally clamped to the range 0.0 to 1.0)</param>
            <param name="maximum">Upper extreme</param>
            <param name="interpolationMode">Interpolation mode to use.</param>
            <returns>New brush.</returns>
            <remarks>
            When used as an extension method, the current brush object
            defines the lower extreme.
            </remarks>
        </member>
        <member name="M:Infragistics.BrushUtil.GetLightened(System.Windows.Media.Brush,System.Double)">
            <summary>
            Creates a new brush, based on the reference brush and linearly lightened according
            to the lightening parameter.
            </summary>
            <param name="brush">Reference brush</param>
            <param name="interpolation">Lightening parameter (internally clamped to the range -1.0 to 1.0)</param>
            <returns>New brush.</returns>
            <remarks>
            When used as an extension method, the current brush object
            is defines the lower extreme.
            </remarks>
        </member>
        <member name="M:Infragistics.BrushUtil.Duplicate(System.Windows.Media.SolidColorBrush)">
            <summary>
            Creates a duplicate of the current SolidColorBrush.
            </summary>
            <param name="brush"></param>
            <returns>New SolidColorBrush</returns>
            <remarks>
            This function duplicates the functionality of the missing Clone method.
            </remarks>
        </member>
        <member name="M:Infragistics.BrushUtil.GetInterpolation(System.Windows.Media.SolidColorBrush,System.Double,System.Windows.Media.SolidColorBrush,Infragistics.InterpolationMode)">
            <summary>
            Creates a new brush as an interpolation between the current brush and the
            specified brush using the interpolation parameter.
            </summary>
            <param name="minimum">The minimum brush.</param>
            <param name="interpolation">The interpolation parameter.</param>
            <param name="maximum">The maximum brush</param>
            <param name="interpolationMode">The interpolation mode to use.</param>
            <returns>New interpolated Brush</returns>
        </member>
        <member name="M:Infragistics.BrushUtil.GetLightened(System.Windows.Media.SolidColorBrush,System.Double)">
            <summary>
            Creates a new brush, based on the reference brush and linearly lightened according
            to the lightening parameter.
            </summary>
            <param name="brush">Reference brush</param>
            <param name="interpolation">Lightening parameter.</param>
            <returns>New brush.</returns>
            <remarks>
            When used as an extension method, the current brush object
            is defines the lower extreme.
            </remarks>
        </member>
        <member name="M:Infragistics.BrushUtil.Duplicate(System.Windows.Media.LinearGradientBrush)">
            <summary>
            Creates a duplicate of the current LinearGradientBrush.
            </summary>
            <param name="brush"></param>
            <returns>New LinearGradientBrush</returns>
            <remarks>
            This function duplicates the functionality of the missing Clone method.
            </remarks>
        </member>
        <member name="M:Infragistics.BrushUtil.GetInterpolation(System.Windows.Media.LinearGradientBrush,System.Double,System.Windows.Media.LinearGradientBrush,Infragistics.InterpolationMode)">
            <summary>
            Creates a new brush as an interpolation between the current brush and the
            specified brush using the interpolation parameter.
            </summary>
            <param name="minimum">The minimum brush.</param>
            <param name="interpolation">The interpolation parameter.</param>
            <param name="maximum">The maximum brush</param>
            <param name="interpolationMode">Interpolation mode to use.</param>
            <returns>New interpolated Brush</returns>
        </member>
        <member name="M:Infragistics.BrushUtil.GetLightened(System.Windows.Media.LinearGradientBrush,System.Double)">
            <summary>
            Creates a new brush, based on the reference brush and linearly lightened according
            to the lightening parameter.
            </summary>
            <param name="brush">Reference brush.</param>
            <param name="interpolation">Lightening parameter.</param>
            <returns>New brush.</returns>
        </member>
        <member name="M:Infragistics.BrushUtil.Duplicate(System.Windows.Media.RadialGradientBrush)">
            <summary>
            Creates a duplicate of the current RadialGradientBrush.
            </summary>
            <param name="brush"></param>
            <returns>New RadialGradientBrush</returns>
            <remarks>
            This function duplicates the functionality of the missing Clone method.
            </remarks>
        </member>
        <member name="M:Infragistics.BrushUtil.GetInterpolation(System.Windows.Media.RadialGradientBrush,System.Double,System.Windows.Media.RadialGradientBrush,Infragistics.InterpolationMode)">
            <summary>
            Creates a new brush as an interpolation between the current brush and the
            specified brush using the interpolation parameter.
            </summary>
            <param name="minimum">The minimum brush.</param>
            <param name="interpolation">The interpolation parameter.</param>
            <param name="maximum">The maximum brush</param>
            <param name="interpolationMode">Interpolation mode to use.</param>
            <returns>New interpolated Brush</returns>
        </member>
        <member name="M:Infragistics.BrushUtil.GetLightened(System.Windows.Media.RadialGradientBrush,System.Double)">
            <summary>
            Creates a new brush, based on the reference brush and linearly lightened according
            to the lightening parameter.
            </summary>
            <param name="brush">Reference brush.</param>
            <param name="interpolation">Lightening parameter.</param>
            <returns>New brush.</returns>
        </member>
        <member name="M:Infragistics.BrushUtil.Duplicate(System.Windows.Media.ImageBrush)">
            <summary>
            Creates a duplicate of the current ImageBrush.
            </summary>
            <param name="brush"></param>
            <returns>New ImageBrush</returns>
            <remarks>
            This function duplicates the functionality of the missing Clone method.
            </remarks>
        </member>
        <member name="M:Infragistics.BrushUtil.GetInterpolation(System.Windows.Media.ImageBrush,System.Double,System.Windows.Media.ImageBrush,Infragistics.InterpolationMode)">
            <summary>
            Creates a new brush as an interpolation between the current brush and the
            specified brush using the interpolation parameter.
            </summary>
            <param name="minimum">The minimum brush.</param>
            <param name="interpolation">The interpolation parameter.</param>
            <param name="maximum">The maximum brush</param>
            <param name="interpolationMode">Interpolation mode.</param>
            <returns>New interpolated Brush</returns>
        </member>
        <member name="M:Infragistics.BrushUtil.GetLightened(System.Windows.Media.ImageBrush,System.Double)">
            <summary>
            Creates a new brush, based on the reference brush and linearly lightened according
            to the lightening parameter.
            </summary>
            <param name="brush">Reference Brush.</param>
            <param name="interpolation">Lightening parameter.</param>
            <returns>New brush.</returns>
            <remarks>
            This method is not implemented for ImageBrush, and thus an unlightened duplicate of the given brush will be returned.
            </remarks>
        </member>
        <member name="M:Infragistics.BrushUtil.Duplicate(System.Windows.Media.GradientStop)">
            <summary>
            Creates a duplicate of the current GradientStop.
            </summary>
            <returns>New GradientStop</returns>
            <remarks>
            This function duplicates the functionality of the missing Clone method.
            </remarks>
        </member>
        <member name="M:Infragistics.BrushUtil.GetInterpolation(System.Windows.Media.GradientStop,System.Double,System.Windows.Media.GradientStop,Infragistics.InterpolationMode)">
            <summary>
            Creates a new GradientStop as a linear interpolation according to the
            interpolation parameter between the two extremes.
            </summary>
            <param name="minimum">Lower extreme</param>
            <param name="interpolation">Interpolation parameter (internally clamped to the range 0.0 to 1.0)</param>
            <param name="maximum">Upper extreme</param>
            <param name="interpolationMode">Interpolation mode to use.</param>
            <returns>New brush.</returns>
            <remarks>
            When used as an extension method, the current GradientStop object
            defines the lower extreme.
            </remarks>
        </member>
        <member name="M:Infragistics.BrushUtil.GetLightened(System.Windows.Media.GradientStop,System.Double)">
            <summary>
            Creates a new GradientStop, based on the reference GradientStop and linearly lightened according
            to the lightening parameter.
            </summary>
            <param name="gradientStop">Reference GradientStop.</param>
            <param name="interpolation">Lightening parameter.</param>
            <returns>New GradientStop.</returns>
        </member>
        <member name="T:Infragistics.Clipper">
            <summary>
            Modified Sutherland-Hodge clipping
            </summary>
        </member>
        <member name="M:Infragistics.Clipper.#ctor(System.Windows.Rect,System.Boolean)">
            <summary>
            Initializes a new instance of the Clipper class.
            </summary>
            <param name="clip">Clip rectangle</param>
            <param name="isClosed">True to clip as polygon, false to clip as polyline</param>
        </member>
        <member name="M:Infragistics.Clipper.#ctor(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the Clipper class.
            </summary>
            <param name="left">Left edge of clip rectangle or NaN.</param>
            <param name="bottom">Bottom edge of clip rectangle or NaN.</param>
            <param name="right">Right edge of clip rectangle or NaN.</param>
            <param name="top">Top edge of clip rectangle or NaN.</param>
            <param name="isClosed">True to clip as polygon, false to clip as polyline</param>
        </member>
        <member name="M:Infragistics.Clipper.Add(System.Windows.Point)">
            <summary>
            Adds a Point to the clipper.
            </summary>
            <param name="point">The Point to be considered in the clipping operation.</param>
        </member>
        <member name="P:Infragistics.Clipper.Target">
            <summary>
            Destination target for clipped points.
            </summary>
        </member>
        <member name="P:Infragistics.Clipper.IsClosed">
            <summary>
            Boolean value. True if the clipper is configured to perform closed-shape clipping, else false.
            </summary>
        </member>
        <member name="T:Infragistics.EdgeClipper">
            <summary>
            Represents a clipping stage in the Sutherland-Hodge clipper.
            </summary>
            <remarks>
            EdgeClipper implements IList so that it can be transparently
            pipe to either another edge clipper or a "real" IList implementation.
            </remarks>
        </member>
        <member name="M:Infragistics.EdgeClipper.Add(System.Windows.Point)">
            <summary>
            Adds a point to the current edge clipper, resulting in zero, one or two
            points being piped to the desitnation IList.
            </summary>
            <param name="cur">Point to add to the clipping stage.</param>
        </member>
        <member name="M:Infragistics.EdgeClipper.Clear">
            <summary>
            Flushes the edge clipping stage.
            </summary>
        </member>
        <member name="M:Infragistics.EdgeClipper.IsInside(System.Windows.Point)">
            <summary>
            Gets the status of the point with respect to the current clipping stage's edge.
            </summary>
            <param name="pt">Point to test</param>
            <returns>True if the point is inside or on the edge, false otherwise</returns>
        </member>
        <member name="M:Infragistics.EdgeClipper.Intersection(System.Windows.Point,System.Windows.Point)">
            <summary>
            Gets the intersection of an edge with the current clipping stage's edge.
            </summary>
            <param name="b">Start of edge</param>
            <param name="e">End of edge</param>
            <returns>Intersection of edge with the current clipping stage's edge</returns>
        </member>
        <member name="P:Infragistics.EdgeClipper.Dst">
            <summary>
            Sets or gets the destination for the current edge clipper object.
            </summary>
            <remarks>
            Setting an edge clipper's destination resets the stage.
            </remarks>
        </member>
        <member name="T:Infragistics.LeftClipper">
            <summary>
            Represents a specialised clipping stage for a clip window's left edge.
            </summary>
        </member>
        <member name="T:Infragistics.BottomClipper">
            <summary>
            Represents a specialised clipping stage for a clip window's bottom edge.
            </summary>
        </member>
        <member name="T:Infragistics.RightClipper">
            <summary>
            Represents a specialised clipping stage for a clip window's right edge.
            </summary>
        </member>
        <member name="T:Infragistics.TopClipper">
            <summary>
            Represents a specialised clipping stage for a clip window's top edge.
            </summary>
        </member>
        <member name="T:Infragistics.ColorConverter">
            <summary>
            Utility class for converting strings to colors.
            </summary>
        </member>
        <member name="M:Infragistics.ColorConverter.FromString(System.String)">
            <summary>
            Gets a color matching the input string.
            </summary>
            <param name="value">The string to convert to a color.</param>
            <returns>A color matching the input string.</returns>
        </member>
        <member name="T:Infragistics.InterpolationMode">
            <summary>
            Describes available modes for color interpolation.
            </summary>
        </member>
        <member name="F:Infragistics.InterpolationMode.RGB">
            <summary>
            Interpolation in RGB space.
            </summary>
        </member>
        <member name="F:Infragistics.InterpolationMode.HSV">
            <summary>
            Interpolation in HSV space.
            </summary>
        </member>
        <member name="T:Infragistics.ColorUtil">
            <summary>
            Utility class for color-based operations.
            </summary>
        </member>
        <member name="M:Infragistics.ColorUtil.RandomColor(System.Byte)">
            <summary>
            Returns a random color.
            </summary>
            <param name="alpha">The alpha level of the color to generate.</param>
            <returns>A random color with the specified alpha level.</returns>
        </member>
        <member name="M:Infragistics.ColorUtil.RandomHue(System.Windows.Media.Color)">
            <summary>
            Get a random color  
            </summary>
            <param name="color">Specifies the alpha, saturation and value for the returned color</param>
            <returns>New color</returns>
        </member>
        <member name="M:Infragistics.ColorUtil.GetInterpolation(System.Windows.Media.Color,System.Double,System.Windows.Media.Color,Infragistics.InterpolationMode)">
            <summary>
            Get an interpolation from the current color to the specified color
            </summary>
            <param name="minimum">begin color, corresponding to p=0.0</param>
            <param name="interpolation_">interpolation parameter assumed to be in [0.0, 1.0]</param>
            <param name="maximum_">end color, corresponding to p=1.0</param>
            <param name="interpolationMode">Interpolation mode to use.</param>
            <returns>new color corresponding to the specified interpolation parameter</returns>
            <remarks>
            There are always two interpolation paths for the hue, and this function
            chooses the shortest one, so for example an interpolation from red to 
            blue runs through purple, not orange, yellow and green.
            </remarks>
        </member>
        <member name="M:Infragistics.ColorUtil.GetAHSVInterpolation(System.Double[],System.Double,System.Double[])">
            <summary>
            Get an interpolated color between two colors.
            </summary>
            <param name="minimum">begin color, corresponding to p=0.0</param>
            <param name="interpolation">interpolation parameter assumed to be in [0.0, 1.0]</param>
            <param name="maximum">end color, corresponding to p=1.0</param>
            <returns>new color corresponding to the specified interpolation parameter</returns>
            <remarks>
            There are always two interpolation paths for the hue, and this function
            chooses the shortest one, so for example an interpolation from red to 
            blue runs through purple, not orange, yellow and green.
            </remarks>
        </member>
        <member name="M:Infragistics.ColorUtil.GetLightened(System.Windows.Media.Color,System.Double)">
            <summary>
            Gets a new color corresponding to this color darkened or lightened by specified amount
            </summary>
            <param name="color"></param>
            <param name="interpolation">-1.0 for full darkening, to 1.0 for full lightening</param>
            <returns>new Color</returns>
        </member>
        <member name="M:Infragistics.ColorUtil.GetAHSL(System.Windows.Media.Color)">
            <summary>
            Gets the ahsl components of this color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ColorUtil.GetAHSV(System.Windows.Media.Color)">
            <summary>
            Gets the ahsv components of this color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ColorUtil.FromAHSL(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets a color from the specified ahsl components 
            </summary>
            <param name="alpha">The alpha (transparency), expressed as a value between 0 and 1, where 0 is transparent and 1 is opaque.</param>
            <param name="hue">The hue (color), expressed as a value between 0 and 1, where 0 is red, 1 is also red, and in between are orange, yellow, green, blue, indigo, and violet.</param>
            <param name="saturation">The saturation (colorfulness), expressed as a value between 0 and 1, where 0 is gray and 1 is fully saturated/colorful.</param>
            <param name="lightness">The lightness, expressed as a value between 0 and 1, where 0 is black and 1 is white.</param>
        </member>
        <member name="M:Infragistics.ColorUtil.FromAHSV(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets a color from the specified ahsv components
            </summary>
        </member>
        <member name="M:Infragistics.ColorUtil.GetRandomColor(System.Int32)">
            <summary>
            Get a random color from generated array of colors.
            </summary>
            <param name="index">The index of the color to get in the generated array.</param>
            <returns>The color in the RandomColors array at the specified index.</returns>
        </member>
        <member name="M:Infragistics.ColorUtil.ColorToInt(System.Windows.Media.Color)">
            <summary>
            Converts a color to its integer representation for use in bitmaps.
            </summary>
            <param name="color">The color to convert to an integer.</param>
            <returns>The integer representation for the given color.</returns>
        </member>
        <member name="M:Infragistics.ColorUtil.GetColor(System.Windows.Media.Brush)">
            <summary>
            Returns the main color of the given brush.
            </summary>
            <param name="brush">The brush under observation.</param>
            <returns>The main color of the given brush.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.WidgetAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.WidgetAttribute.#ctor">
            <summary>
            WidgetAttribute constructor.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.WidgetAttribute.#ctor(System.String)">
            <summary>
            WidgetAttribute constructor.
            </summary>
            <param name="name">The widget name.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.WidgetAttribute.Name">
            <summary>
            The widget name.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.MainWidgetAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.MainWidgetAttribute.#ctor">
            <summary>
            MainWidgetAttribute constructor.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.MainWidgetAttribute.#ctor(System.String)">
            <summary>
            MainWidgetAttribute constructor.
            </summary>
            <param name="name">The main widget name.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.MainWidgetAttribute.Name">
            <summary>
            The main widget name.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SuppressWidgetMemberAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.SuppressWidgetMemberAttribute.#ctor">
            <summary>
            SuppressWidgetMemberAttribute constructor.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.WFSuppressWidgetMemberAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.WFSuppressWidgetMemberAttribute.#ctor">
            <summary>
            SuppressWidgetMemberAttribute constructor.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.JAVASuppressWidgetMemberAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.JAVASuppressWidgetMemberAttribute.#ctor">
            <summary>
            SuppressWidgetMemberAttribute constructor.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.XamSuppressWidgetMemberAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.XamSuppressWidgetMemberAttribute.#ctor">
            <summary>
            SuppressWidgetMemberAttribute constructor.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.XamiOSSuppressWidgetMemberAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.XamiOSSuppressWidgetMemberAttribute.#ctor">
            <summary>
            SuppressWidgetMemberAttribute constructor.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.XamAndroidSuppressWidgetMemberAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.XamAndroidSuppressWidgetMemberAttribute.#ctor">
            <summary>
            SuppressWidgetMemberAttribute constructor.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.XamWPSuppressWidgetMemberAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.XamWPSuppressWidgetMemberAttribute.#ctor">
            <summary>
            SuppressWidgetMemberAttribute constructor.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.XamWrapperSuppressWidgetMemberAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.XamWrapperSuppressWidgetMemberAttribute.#ctor">
            <summary>
            SuppressWidgetMemberAttribute constructor.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.XamiOSTreatAsDoubleAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.XamiOSTreatAsDoubleAttribute.#ctor">
            <summary>
            SuppressWidgetMemberAttribute constructor.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.XamiOSTreatAsFloatAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.XamiOSTreatAsFloatAttribute.#ctor">
            <summary>
            SuppressWidgetMemberAttribute constructor.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.XamiOSEnumNameAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.XamiOSEnumNameAttribute.#ctor(System.String)">
            <summary>
            WidgetDefaultStringAttribute constructor.
            </summary>
            <param name="value">The widget default.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.XamiOSEnumNameAttribute.Value">
            <summary>
            The widget default.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.WidgetDefaultStringAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.WidgetDefaultStringAttribute.#ctor(System.String)">
            <summary>
            WidgetDefaultStringAttribute constructor.
            </summary>
            <param name="value">The widget default.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.WidgetDefaultStringAttribute.Value">
            <summary>
            The widget default.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.WidgetDefaultNumberAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.WidgetDefaultNumberAttribute.#ctor(System.Double)">
            <summary>
            WidgetDefaultNumberAttribute constructor.
            </summary>
            <param name="value">The widget default.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.WidgetDefaultNumberAttribute.Value">
            <summary>
            The widget default.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.WidgetDefaultBooleanAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.WidgetDefaultBooleanAttribute.#ctor(System.Boolean)">
            <summary>
            WidgetDefaultBooleanAttribute constructor.
            </summary>
            <param name="value">The widget default.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.WidgetDefaultBooleanAttribute.Value">
            <summary>
            The widget default.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SuppressWidgetMemberCopyAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.SuppressWidgetMemberCopyAttribute.#ctor">
            <summary>
            SuppressWidgetMemberCopyAttribute constructor.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.WFSuppressWidgetMemberCopyAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.WFSuppressWidgetMemberCopyAttribute.#ctor">
            <summary>
            SuppressWidgetMemberCopyAttribute constructor.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.JAVASuppressWidgetMemberCopyAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.JAVASuppressWidgetMemberCopyAttribute.#ctor">
            <summary>
            SuppressWidgetMemberCopyAttribute constructor.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.WidgetModuleAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.WidgetModuleAttribute.#ctor(System.String)">
            <summary>
            WidgetModuleAttribute constructor.
            </summary>
            <param name="name">The widget module name.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.WidgetModuleAttribute.Name">
            <summary>
            The widget module name.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.WidgetModuleParentAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.WidgetModuleParentAttribute.#ctor(System.String)">
            <summary>
            WidgetModuleParentAttribute constructor.
            </summary>
            <param name="name">The name of the widget parent module.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.WidgetModuleParentAttribute.Name">
            <summary>
            The name of the widget parent module.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.WidgetModuleExclusionParentAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.WidgetModuleExclusionParentAttribute.#ctor(System.String)">
            <summary>
            WidgetModuleParentAttribute constructor.
            </summary>
            <param name="name">The name of the widget parent module.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.WidgetModuleExclusionParentAttribute.Name">
            <summary>
            The name of the widget parent module.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.WidgetIgnoreDependsAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.WidgetIgnoreDependsAttribute.#ctor(System.String)">
            <summary>
            WidgetIgnoreDependsAttribute constructor.
            </summary>
            <param name="name">The name of the dependency to ignore.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.WidgetIgnoreDependsAttribute.Name">
            <summary>
            The name of the dependency to ignore.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.WidgetIncludeDependsAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.WidgetIncludeDependsAttribute.#ctor(System.String)">
            <summary>
            WidgetIgnoreDependsAttribute constructor.
            </summary>
            <param name="name">The name of the dependency to ignore.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.WidgetIncludeDependsAttribute.Name">
            <summary>
            The name of the dependency to ignore.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.DontObfuscateAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.DontObfuscateAttribute.#ctor">
            <summary>
            DontObfuscateAttribute constructor.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.WeakAttribute">
            <summary>
            Attribute used for cross-platform translation.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.WeakAttribute.#ctor">
            <summary>
            WeakAttribute constructor.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ClientNameAttribute">
            <summary>
            Attribute used for type renaming in generated code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.MvcEnumSetStringEnumAttribute">
            <summary>
            Attribute used for Mvc wrapper generation.
            </summary>
        </member>
        <member name="T:Infragistics.DataMappingPair">
            <summary>
            Represents a correspondence between an internal and external attribute
            name.
            </summary>
        </member>
        <member name="M:Infragistics.DataMappingPair.#ctor">
            <summary>
            Initialises a new DataMappingPair object
            </summary>
        </member>
        <member name="M:Infragistics.DataMappingPair.#ctor(System.String,System.String)">
            <summary>
            Initialises a new DataMappingPair object
            </summary>
            <param name="internalName"></param>
            <param name="externalName"></param>
        </member>
        <member name="P:Infragistics.DataMappingPair.InternalName">
            <summary>
            Gets or sets the internal name for the current DataMappingPair object.
            </summary>
        </member>
        <member name="P:Infragistics.DataMappingPair.ExternalName">
            <summary>
            Gets or sets the external name for the current DataMappingPair object.
            </summary>
        </member>
        <member name="T:Infragistics.DataMapping">
            <summary>
            Defines a mapping between database and internal property names.
            </summary>
            <remarks>
            Datamappings allow specification of one-to-one and one-to-many property name
            mappings.
            <para>
            Typically, unrefererenced internal properties will not be assigned to and
            unreferenced external properties will be ignored. It is often valid to
            assign to arbitrary internal property ("custom") names, although this
            is not functionality implemented by the DataMapping class, which simply
            provides the mapping mechanism.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.DataMapping.TryAdd(System.String,System.String)">
            <summary>
            Attempts to safely add a new datamapping pair to the current datamapping object.
            </summary>
            <param name="internalName"></param>
            <param name="externalName"></param>
            <returns>True if the mapping pair was successfully added.</returns>
            <remarks>
            Datamappings cannot contain null internal or external names, or duplicate
            internal names.
            </remarks>
        </member>
        <member name="M:Infragistics.DataMapping.TryAdd(Infragistics.DataMappingPair)">
            <summary>
            Attempts to safely add a new datamapping pair to the current datamapping object.
            </summary>
            <param name="pair"></param>
            <returns>True if the mapping pair was successfully added.</returns>
            <remarks>
            A Datamapping should not attempt to map multiple external names
            to a single internal name.
            </remarks>
        </member>
        <member name="M:Infragistics.DataMapping.GetExternalNames">
            <summary>
            Gets all external names mapped by the current datamapping object.
            </summary>
            <returns>Enumerable (never null) of external names.</returns>
        </member>
        <member name="M:Infragistics.DataMapping.GetExternalName(System.String)">
            <summary>
            Gets an enumerable of external names which map to the specified internal name
            </summary>
            <param name="internalName"></param>
            <returns>Enumerable (may be null) of external names.</returns>
        </member>
        <member name="M:Infragistics.DataMapping.GetInternalNames">
            <summary>
            Gets all internal names mapped by the current datamapping object.
            </summary>
            <returns>Enumerable (never null) of internal names.</returns>
        </member>
        <member name="M:Infragistics.DataMapping.GetInternalNames(System.String)">
            <summary>
            Gets an enumerable of internal names which are mapped to by the specified
            external name
            </summary>
            <param name="externalName"></param>
            <returns>Enumerable (may be null) of internal names.</returns>
        </member>
        <member name="M:Infragistics.DataMapping.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> event with the provided event data.
            </summary>
            <param name="e">The event data to report in the event.</param>
        </member>
        <member name="T:Infragistics.DataMapping.Converter">
            <summary>
            Converts instances of other types to and from a DataMapping. 
            </summary>
            <remarks>
            The only conversion type supported by DataMapping.Converter is to
            and from string.
            </remarks>
        </member>
        <member name="M:Infragistics.DataMapping.Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified
            type to the type of this converter.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DataMapping.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the type of this converter. 
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture. </param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Infragistics.DataMapping.Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object to the specified type.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="destinationType">The type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Infragistics.DataMapping.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified value object to the specified type.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The type to convert the object to.</param>
            <returns>The converted object.</returns>
            <exception cref="T:System.NotImplementedException">
            	<see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>  not implemented in base <see cref="T:System.ComponentModel.TypeConverter"/>.</exception>
        </member>
        <member name="T:Infragistics.DoubleAnimator">
            <summary>
            Class for facilitating the animation of Double values.
            </summary>
        </member>
        <member name="M:Infragistics.DoubleAnimator.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            DoubleAnimator constructor.
            </summary>
            <param name="from">The double value to start the animation at.</param>
            <param name="to">The double value to end the animation at.</param>
            <param name="intervalMilliseconds">The span of time it should take for the animation to complete.</param>
        </member>
        <member name="M:Infragistics.DoubleAnimator.GetElapsedMilliseconds">
            <summary>
            Returns the total number of milliseconds since the animator was started.
            </summary>
            <returns>The total number of milliseconds since the animation was started or 0 if the animation is not active.</returns>
            <seealso cref="M:Infragistics.DoubleAnimator.AnimationActive"/>
        </member>
        <member name="M:Infragistics.DoubleAnimator.Start">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="M:Infragistics.DoubleAnimator.Stop">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:Infragistics.DoubleAnimator.AnimationActive">
            <summary>
            Method which returns a boolean indicating whether or not the animation is active.
            </summary>
            <returns>True if the animation is active, otherwise False.</returns>
        </member>
        <member name="P:Infragistics.DoubleAnimator.IntervalMilliseconds">
            <summary>
            The total number of milliseconds in the interval.
            </summary>
        </member>
        <member name="E:Infragistics.DoubleAnimator.PropertyChanged">
            <summary>
            Event raised any time a property value is changed.
            </summary>
        </member>
        <member name="T:Infragistics.Extensions">
            <summary>
            Class containing extension methods used by Infragistics Data Visualization.
            </summary>
        </member>
        <member name="M:Infragistics.Extensions.Reset(System.Windows.Media.PathGeometry)">
            <summary>
            Resets the given PathGeometry.
            </summary>
            <param name="geom">The PathGeometry to reset.</param>
        </member>
        <member name="M:Infragistics.Extensions.Reset(System.Windows.Media.GeometryGroup)">
            <summary>
            Resets the given GeometryGroup.
            </summary>
            <param name="geom">The GeometryGroup to reset.</param>
        </member>
        <member name="M:Infragistics.Extensions.Detach(System.Windows.FrameworkElement)">
            <summary>
            Detaches the given FrameworkElement from the visual tree.
            </summary>
            <param name="child">The FrameworkElement to detach from the visual tree.</param>
        </member>
        <member name="M:Infragistics.Extensions.TransferChildrenTo(System.Windows.Controls.Panel,System.Windows.Controls.Panel)">
            <summary>
            Transfers all of a Panel's Children to another Panel.
            </summary>
            <param name="from">The Panel to transfer Children from.</param>
            <param name="to">The Panel to transfer Children to.</param>
        </member>
        <member name="M:Infragistics.Extensions.IsPlottable(System.Double)">
            <summary>
            Determines if a numeric value is within the range of plottable values.
            </summary>
            <param name="num">The number under observation.</param>
            <returns>True if the given number is plottable, otherwise False.</returns>
        </member>
        <member name="M:Infragistics.Extensions.IsPlottable(System.Windows.Point)">
            <summary>
            Determines if a Point is within the range of plottable points.
            </summary>
            <param name="point">The Point under observation.</param>
            <returns>True if the given point is plottable, otherwise False.</returns>
        </member>
        <member name="M:Infragistics.Extensions.IsPlottable(System.Windows.Rect)">
            <summary>
            Determines if a Rect is within plottable range.
            </summary>
            <param name="rect">The Rect under observation.</param>
            <returns>True if the Rect is plottable, otherwise False.</returns>
        </member>
        <member name="M:Infragistics.Extensions.VisualDescendantsOfType``1(System.Windows.FrameworkElement)">
            <summary>
            Gets all the visual descendants of a certain Type under the given parent FrameworkElement.
            </summary>
            <typeparam name="T">The Type of visual descendants to search for.</typeparam>
            <param name="ele">The parent FrameworkElement to search under.</param>
            <returns>An enumerable list of all visual descendants of the given type under the given parent FrameworkElement.</returns>
        </member>
        <member name="M:Infragistics.Extensions.IsInVisualTree(System.Windows.DependencyObject)">
            <summary>
            Check if an element is in visual tree
            </summary>
        </member>
        <member name="M:Infragistics.Extensions.IsInVisualTree(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Check if an element and its ancestor are in visual tree
            </summary>
        </member>
        <member name="M:Infragistics.Extensions.IsVisibleInVisualTree(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Check if an element and its parent are in visual tree
            </summary>
        </member>
        <member name="T:Infragistics.Flattener">
            <summary>
            Utility class for line flattening.
            </summary>
        </member>
        <member name="M:Infragistics.Flattener.Spiral(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Flatten the specified Archimidean spiral curve with the maximum specified area error.
            </summary>
            <param name="startAngle">Curve start angle in radians.</param>
            <param name="startRadius">Curve start radius.</param>
            <param name="endAngle">Curve end angle in radians.</param>
            <param name="endRadius">Curve end radius.</param>
            <param name="error">Maximum error between approximation and spiral.</param>
            <returns>List of interpolation parameters in the range [0, 1].</returns>
        </member>
        <member name="M:Infragistics.Flattener.Flatten(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double)">
            <summary>
            Flatten a line according to the specified resolution using the Douglas-Peucker algorithm.
            </summary>
            <param name="count">Number of points in line.</param>
            <param name="X">x coordinate of ith point.</param>
            <param name="Y">y coordinate of ith point.</param>
            <param name="resolution">Maximum flattening error.</param>
            <returns>Indices of points forming a flattened version. The first and last points from the original line are guaranteed to
            be present.</returns>
        </member>
        <member name="M:Infragistics.Flattener.Flatten(System.Collections.Generic.IList{System.Int32},System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Int32,System.Int32,System.Double)">
            <summary>
            Flatten a line according to the specified resolution using the Douglas-Peucker algorithm.
            </summary>
            <param name="result">A list of indices of the flattened points.</param>
            <param name="X">x coordinate of ith point.</param>
            <param name="Y">y coordinate of ith point.</param>
            <param name="b">Beginning index of the flattening operation.</param>
            <param name="e">Ending index of the flattening operation.</param>
            <param name="E">Maximum flattening error.</param>
            <returns>Indices of points forming a flattened version. The first and last points from the original line are guaranteed to
            be present.</returns>
        </member>
        <member name="M:Infragistics.Flattener.Flatten(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Int32,System.Int32,System.Double)">
            <summary>
            Flatten a line according to the specified resolution using the Douglas-Peucker algorithm.
            </summary>
            <param name="result">A list of indices of the flattened points.</param>
            <param name="indices">The indices of the points being flattened.</param>
            <param name="X">x coordinate of ith point.</param>
            <param name="Y">y coordinate of ith point.</param>
            <param name="b">Beginning index of the flattening operation.</param>
            <param name="e">Ending index of the flattening operation.</param>
            <param name="E">Maximum flattening error.</param>
            <returns>Indices of points forming a flattened version. The first and last points from the original line are guaranteed to
            be present.</returns>
        </member>
        <member name="M:Infragistics.Flattener.FastFlatten(System.Collections.Generic.List{System.Int32},System.Double[],System.Double[],System.Int32,System.Int32,System.Double)">
            <summary>
            Performance optimized flattening routine.
            </summary>
            <param name="result">A list of indices of the flattened points.</param>
            <param name="X">x coordinate of ith point.</param>
            <param name="Y">y coordinate of ith point.</param>
            <param name="b">Beginning index of the flattening operation.</param>
            <param name="e">Ending index of the flattening operation.</param>
            <param name="E">Maximum flattening error.</param>
            <returns>Indices of points forming a flattened version. The first and last points from the original line are guaranteed to
            be present.</returns>
        </member>
        <member name="M:Infragistics.Flattener.Smooth(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double)">
            <summary>
            Smooth a line into a PathFigure of quadratic and cubic bezier splines.
            </summary>
            <param name="count">Number of points in line.</param>
            <param name="X">X coordinate of ith point.</param>
            <param name="Y">Y coordinate of ith point.</param>
            <param name="resolution">Maximum flattening error.</param>
            <returns>Smooth line.</returns>
        </member>
        <member name="M:Infragistics.Flattener.Spline(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Returns the points for a spline with the given key points.
            </summary>
            <param name="count">The number of source points.</param>
            <param name="X">Delegate to find the X-coordinate of a key point at a given index.</param>
            <param name="Y">Delegate to find the Y-coordinate of a key point at a given index.</param>
            <returns>The points for a spline with the given key points.</returns>
        </member>
        <member name="M:Infragistics.Flattener.Smooth(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Smooth a line into a PathFigure of quadratic and cubic bezier splines.
            </summary>
            <param name="count">Number of points in line.</param>
            <param name="X">X coordinate of ith point.</param>
            <param name="Y">Y coordinate of ith point.</param>
            <returns>Smooth line.</returns>
        </member>
        <member name="T:Infragistics.FontUtil">
            <summary>
            Represents an utility for working with fonts of FrameworkElement
            </summary>
        </member>
        <member name="M:Infragistics.FontUtil.GetFontInfo(System.Windows.FrameworkElement,System.Object)">
            <summary>
            Gets font information from a given Framework Element
            </summary>
        </member>
        <member name="T:Infragistics.FontInfo">
            <summary>
            Represents visual information about font
            </summary>
        </member>
        <member name="M:Infragistics.FontInfo.#ctor">
            <summary>
            Creates an instance of FontInfo
            </summary>
        </member>
        <member name="P:Infragistics.FontInfo.FontStyle">
            <summary> Gets or sets the Font Style </summary>
        </member>
        <member name="P:Infragistics.FontInfo.FontVariant">
            <summary> Gets or sets the Font Variant </summary>
        </member>
        <member name="P:Infragistics.FontInfo.FontWeight">
            <summary> Gets or sets the Font Weight </summary>
        </member>
        <member name="P:Infragistics.FontInfo.FontSize">
            <summary> Gets or sets the Font Size </summary>
        </member>
        <member name="P:Infragistics.FontInfo.LineHeight">
            <summary> Gets or sets the Line Height </summary>
        </member>
        <member name="P:Infragistics.FontInfo.FontFamily">
            <summary> Gets or sets the Font Family </summary>
        </member>
        <member name="P:Infragistics.FontInfo.FontStretch">
            <summary> Gets or sets the Font Stretch </summary>
        </member>
        <member name="T:Infragistics.GeometryUtil">
            <summary>
            Utility class for geometry operations.
            </summary>
        </member>
        <member name="M:Infragistics.GeometryUtil.SimplifyAngle(System.Double)">
            <summary>
            Simplifies an angle to a value between 0 and 360.
            </summary>
            <param name="angle">The angle to simplified.</param>
            <returns>The angle, simplified to a value between 0 and 360.</returns>
        </member>
        <member name="M:Infragistics.GeometryUtil.AngleFromSlope(System.Double)">
            <summary>
            Gets the angle of a line given its slope.
            </summary>
            <param name="slope">The slope.</param>
            <returns>The angle of a line given its slope.</returns>
        </member>
        <member name="M:Infragistics.GeometryUtil.Slope(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the slope of a line given two known points.
            </summary>
            <param name="point1">One point on the line.</param>
            <param name="point2">A second point on the line.</param>
            <returns>The slope of the line containing the points point1 and point2.</returns>
        </member>
        <member name="M:Infragistics.GeometryUtil.Eccentricity(System.Windows.Rect)">
            <summary>
            Calculates the eccentricity of an ellipse with the given bounds.
            </summary>
            <param name="bounds">The bounding rectangle for the ellipse.</param>
            <returns>The eccentricity of an ellipse with the given bounds.</returns>
        </member>
        <member name="M:Infragistics.GeometryUtil.PointOnEllipse(System.Double,System.Double,System.Windows.Point,System.Double,System.Double)">
            <summary>
            Gets a point on an ellipse at the given angle and extent.
            </summary>
            <param name="theta">The angle at which to find a point on the ellipse, expressed in radians.</param>
            <param name="eccentricity">The eccentricity of the ellipse.</param>
            <param name="center">The center point of the ellipse.</param>
            <param name="halfHeight">Half the height of the ellipse.</param>
            <param name="extent">Location of the point relative to the center and the surface of the ellipse, expressed as a value between 0 and 1, with 0 being the center and 1 being on the surface of the ellipse.</param>
            <returns>A point on the ellipse at the given angle and extent.</returns>
        </member>
        <member name="M:Infragistics.GeometryUtil.FindCenter(System.Double,System.Double,System.Boolean,System.Double,System.Double)">
            <summary>
            Calculates the center of the current chart.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
            <param name="exploded">Whether or not the point is exploded.</param>
            <param name="angle">Angle of the slice.</param>
            <param name="radius">Radius value.</param>
            <returns>The center point of the chart.</returns>
        </member>
        <member name="M:Infragistics.GeometryUtil.FindRadialPoint(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Finds a point in Cartesian coordinates using radial parameters.
            </summary>
            <param name="center">The center of a circle to find a point on the border of.</param>
            <param name="angle">The angle at which to find a point.</param>
            <param name="radius">The radius of the circle.</param>
            <returns>The point on the border of a circle with the given center and radius, at the specified angle.</returns>
        </member>
        <member name="M:Infragistics.GeometryUtil.PointAtDistance(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Finds the point between two points that is at a specified distance from the first.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <param name="distance">The distance from the first point.</param>
            <returns>The Point at the specified location.</returns>
        </member>
        <member name="M:Infragistics.GeometryUtil.GetSegmentLength(System.Windows.Point,System.Windows.Point)">
            <summary>
            Gets the length of the segment specified by the two points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <returns>The length of the segment.</returns>
        </member>
        <member name="M:Infragistics.GeometryUtil.Duplicate(System.Windows.Media.Geometry)">
            <summary>
            Creates and returns a copy of this Geometry object.
            </summary>
            <param name="G">The Geometry to copy.</param>
            <returns>A copy of this Geometry object.</returns>
        </member>
        <member name="M:Infragistics.GeometryUtil.GetCenterFromArcSegment(System.Windows.Point,System.Windows.Point,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Gets center from arc segment 
            </summary>
        </member>
        <member name="M:Infragistics.GeometryUtil.GetAngleTo(System.Windows.Point,System.Windows.Point)">
            <summary>
            Gets angle to a point from the specified center point
            </summary>
            <param name="center"></param>
            <param name="toPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.GeometryUtil.GetCircleIntersection(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Gets points intersecting a line and a circle with a given center and radius
            </summary>
        </member>
        <member name="P:Infragistics.GeometryUtil.UnitNone">
            <summary>
            Gets an empty Geometry.
            </summary>
        </member>
        <member name="P:Infragistics.GeometryUtil.UnitBubble">
            <summary>
            Gets a Geometry shaped like a bubble.
            </summary>
        </member>
        <member name="P:Infragistics.GeometryUtil.UnitTriangle">
            <summary>
            Gets a Geometry shaped like a triangle.
            </summary>
        </member>
        <member name="P:Infragistics.GeometryUtil.UnitPyramid">
            <summary>
            Gets a Geometry shaped like a pyramid.
            </summary>
        </member>
        <member name="P:Infragistics.GeometryUtil.UnitSquare">
            <summary>
            Gets a Geometry shaped like a square.
            </summary>
        </member>
        <member name="P:Infragistics.GeometryUtil.UnitDiamond">
            <summary>
            Gets a Geometry shaped like a diamond.
            </summary>
        </member>
        <member name="P:Infragistics.GeometryUtil.UnitPentagon">
            <summary>
            Gets a Geometry shaped like a pentagon.
            </summary>
        </member>
        <member name="P:Infragistics.GeometryUtil.UnitHexagon">
            <summary>
            Gets a Geometry shaped like a hexagon.
            </summary>
        </member>
        <member name="P:Infragistics.GeometryUtil.UnitTetragram">
            <summary>
            Gets a Geometry shaped like a tetragram.
            </summary>
        </member>
        <member name="P:Infragistics.GeometryUtil.UnitPentagram">
            <summary>
            Gets a Geometry shaped like a pentagram.
            </summary>
        </member>
        <member name="P:Infragistics.GeometryUtil.UnitHexagram">
            <summary>
            Gets a Geometry shaped like a hexagram.
            </summary>
        </member>
        <member name="P:Infragistics.GeometryUtil.UnitThermometer">
            <summary>
            Gets a Geometry shaped like a thermometer.
            </summary>
        </member>
        <member name="P:Infragistics.GeometryUtil.UnitHourglass">
            <summary>
            Gets a Geometry shaped like an hourglass.
            </summary>
        </member>
        <member name="P:Infragistics.GeometryUtil.UnitTube">
            <summary>
            Gets a Geometry shaped like a tube.
            </summary>
        </member>
        <member name="P:Infragistics.GeometryUtil.UnitRaindrop">
            <summary>
            Gets a Geometry shaped like a raindrop.
            </summary>
        </member>
        <member name="P:Infragistics.GeometryUtil.UnitSmiley">
            <summary>
            Gets a Geometry shaped like a smiling face.
            </summary>
        </member>
        <member name="T:Infragistics.InterpolationUtil">
            <summary>
            Provides utility methods for interpolating points.
            </summary>
        </member>
        <member name="M:Infragistics.InterpolationUtil.InterpolatePoints(System.Collections.Generic.List{System.Windows.Point},System.Double,System.Collections.Generic.List{System.Windows.Point},System.Collections.Generic.List{System.Windows.Point})">
            <summary>
            Interpolates points
            </summary>
        </member>
        <member name="M:Infragistics.InterpolationUtil.InterpolateValues``1(System.Collections.Generic.List{``0},System.Double,System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Func{``0},System.Func{System.Double,System.Double,``0,``0,``0})">
            <summary>
            Interpolates values
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.LeastSquaresFit">
            <summary>
            Methods for linear least squares fitting.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.Numeric">
            <summary>
            Base class for algorithms which work on indexed series of numbers.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Numeric.#ctor">
            <summary>
            Creates and initialises a default, empty Numeric object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Numeric.Solve(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Solve a linear tridiagonal matrix system
            </summary>
            <returns>True if system has been correctly solved.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Numeric.Solve(System.Double[0:,0:],System.Double[])">
            <summary>
            Solve a system of linear equations using gauss-jordan eliminiation
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>True if system has been correctly solved.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Numeric.SafeCubicSplineFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double,System.Double)">
            <summary>
            Evaluates the coefficients for cubic spline interpolation
            of the tabultated function represented by Count, x, y.
            </summary>
            <param name="count">The number of samples.</param>
            <param name="x">Delegate returning the x value for the ith sample.</param>
            <param name="y">Delegate returning the x value for the ith sample.</param>
            <param name="yp1">First derivative at first point (use double.NaN for natural spline)</param>
            <param name="ypn">First derivative at last point (use double.NaN for natural spline)</param>
            <remarks>
            The presence of double.NaN in the input will result in local double.NaN
            in the output.
            </remarks>
            <returns>Coefficients for the cubic spline interpolation</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Numeric.CubicSplineFit(System.Int32,System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double,System.Double)">
            <summary>
            Evaluates the coefficients for natural or clamped cubic spline interpolation
            of the tabultated function represented by x, y.
            </summary>
            <remarks>
            The presence of double.NaN in the input will result in completely invalid output.
            </remarks>
            <param name="start">The index of the first sample.</param>
            <param name="count">The number of samples.</param>
            <param name="x">Delegate returning the x value for the ith sample.</param>
            <param name="y">Delegate returning the x value for the ith sample.</param>
            <param name="yp1">First derivative at first point (use double.NaN for natural spline)</param>
            <param name="ypn">First derivative at last point (use double.NaN for natural spline)</param>
            <returns>Coefficients for the cubic spline interpolation</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Numeric.CubicSplineFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double,System.Double)">
            <summary>
            Evaluates the coefficients for natural or clamped cubic spline interpolation
            of the tabultated function represented by x, y.
            </summary>
            <remarks>
            The presence of double.NaN in the input will result in completely invalid output.
            </remarks>
            <param name="count">The number of samples.</param>
            <param name="x">Delegate returning the x value for the ith sample.</param>
            <param name="y">Delegate returning the x value for the ith sample.</param>
            <param name="yp1">First derivative at first point (use double.NaN for natural spline)</param>
            <param name="ypn">First derivative at last point (use double.NaN for natural spline)</param>
            <returns>Coefficients for the cubic spline interpolation</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Numeric.CubicSplineEvaluate(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates a cubic spline interpolation
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Numeric.Spline2D(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double)">
            <summary>
            Returns a 2D spline fitting of the data.
            </summary>
            <param name="count">The number of points being inputted.</param>
            <param name="x">Provides the X input values based on index.</param>
            <param name="y">Provides the Y input values based on index.</param>
            <param name="stiffness">The spline stiffness parameter to use.</param>
            <returns>The path figure collection representing the fitted spline.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Numeric.Spline2D(System.Int32,System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double)">
            <summary>
            Returns a 2D spline fitting of the data.
            </summary>
            <param name="startIndex">The index to start from.</param>
            <param name="endIndex">The ending index.</param>
            <param name="x">Provides the X input values based on index.</param>
            <param name="y">Provides the Y input values based on index.</param>
            <param name="stiffness">The spline stiffness parameter to use.</param>
            <returns>The path figure collection representing the fitted spline.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.Numeric.ComparableDelegate">
            <summary>
            Delegate which returns an indexed comparable.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.Test">
            <summary>
            Runs the built-in test suite.
            </summary>
            <returns>true if all tests pass</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.LinearFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the linear least squares fit y=A+Bx
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFitting.html 
            </para>
            </remarks>
            <returns>A, B as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.LinearEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the linear function y=a[0]+a[1]*x
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.LinearTest">
            <summary>
            Tests linear fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.LogarithmicFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the logarithmic least squares fit y=A+Blnx
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN or the x is not positive, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Logarithmic." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingLogarithmic.html 
            </para>
            </remarks>
            <returns>A, B as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.LogarithmicEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the linear function y=a[0]+a[1]*ln(x)
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.LogarithmicTest">
            <summary>
            Tests logarithmic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.ExponentialFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the exponential least squares fit y=Ae^(Bx)
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN or the y is not positive, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Exponential." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingExponential.html 
            </para>
            </remarks>
            <returns>A, B as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.ExponentialEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]*e^(a[1]*x)
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.ExponentialTest">
            <summary>
            Tests exponential fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.PowerLawFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the power law least squares fit y=A(x^B)
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN not positive, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Power Law." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPowerLaw.html 
            </para>
            </remarks>
            <returns>A, B as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.PowerLawEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]*(a[1]^x)
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.PowerLawTest">
            <summary>
            Tests power law fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.QuadraticFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.QuadraticEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]+a[1]*x+a[2]*x^2
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.QuadraticTest">
            <summary>
            Tests quadratic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.CubicFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2+a3x^3
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.CubicEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]+a[1]*x+a[2]*x^2+a3x^3
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.CubicTest">
            <summary>
            Tests cubic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.QuarticFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2+a3x^3+a4x^4
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.QuarticEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]+a[1]*x+a[2]*x^2+a3x^3
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.QuarticTest">
            <summary>
            Tests quartic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.QuinticFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2+a3x^3+a4x^4+a5x^5
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.QuinticEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the linear function y=a[0]+a[1]*x+a[2]*x^2+a3x^3
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.QuinticTest">
            <summary>
            Tests quintic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.PolynomialFit(System.Int32,System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2..
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="k">Polynomial order.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in significant numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.PolynomialEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]+a[1]*x+a[2]*x^2+ .. +a[n-1]*x^[n-1]
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.LeastSquaresFit.PolynomialTest(System.Int32)">
            <summary>
            Tests polynomial fitting.
            </summary>
            <param name="k">Polynomial order to test.</param>
            <returns>true if tests pass.</returns>
        </member>
        <member name="T:Infragistics.MathUtil">
            <summary>
            Provides utility methods for math operations.
            </summary>
        </member>
        <member name="F:Infragistics.MathUtil.DegreeAsRadian">
            <summary>
            Constant used for converting degrees to radians.
            </summary>
        </member>
        <member name="F:Infragistics.MathUtil.PHI">
            <summary>
            Represents the golden mean.
            </summary>
        </member>
        <member name="F:Infragistics.MathUtil.SQRT2">
            <summary>
            Represents the square root of 2.0
            </summary>
        </member>
        <member name="M:Infragistics.MathUtil.Asinh(System.Double)">
            <summary>
            Returns the inverse hyperbolic sine of the specified angle.
            </summary>
            <param name="angle">An angle, measured in radians</param>
            <returns>Inverse hyperbolic sine of the specified angle.</returns>
        </member>
        <member name="M:Infragistics.MathUtil.Hypot(System.Double,System.Double)">
            <summary>
            Calculates the length of the hypotenuse of a right-angled triangle based
            on the lengths of two sides x and y.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.MathUtil.Sqr(System.Double)">
            <summary>
            Calculates the square of a x.
            </summary>
            <param name="x"></param>
            <returns>The square of x</returns>
        </member>
        <member name="M:Infragistics.MathUtil.GammaLn(System.Double)">
            <summary>
            Returns the natural logarithm of the gamma function, Γ(x).
            </summary>
            <param name="x">The value for which you want to calculate GammaLn.</param>
            <returns>The logarithm of the gamma function, NaN for x less than or equal to zero.</returns>
        </member>
        <member name="M:Infragistics.MathUtil.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Returns the specified value clamped to the specified range.
            </summary>
            <param name="value">Value to clamp.</param>
            <param name="minimum">Range minimum.</param>
            <param name="maximum">Range maximum.</param>
            <returns>Clamped value.</returns>
        </member>
        <member name="M:Infragistics.MathUtil.Radians(System.Double)">
            <summary>
            Converts the specified angle to radians.
            </summary>
            <param name="degrees">Angle in degrees.</param>
            <returns>Angle as radians.</returns>
        </member>
        <member name="M:Infragistics.MathUtil.Degrees(System.Double)">
            <summary>
            Converts the specified angle to degrees.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>Angle as degrees.</returns>
        </member>
        <member name="M:Infragistics.MathUtil.Noise(System.Double,System.Double,System.Double)">
            <summary>
            Returns the Perlin noise value at the specified location.
            </summary>
            <param name="x">x location in noise space</param>
            <param name="y">y location in noise space</param>
            <param name="z">z location in noise space</param>
            <returns>Noise value.</returns>
        </member>
        <member name="M:Infragistics.MathUtil.NiceFloor(System.Double)">
            <summary>
            Returns a nicely rounded value less than or equal to the specified value
            </summary>
            <param name="value">Value to round.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.MathUtil.NiceRound(System.Double)">
            <summary>
            Rounds a decimal value to the nearest nice number.
            </summary>
            <param name="value">Value to round.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.MathUtil.NiceCeiling(System.Double)">
            <summary>
            Returns a nicely rounded value greater than or equal to the specified value
            </summary>
            <param name="value">Value to round.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.MathUtil.Min3(System.Double,System.Double,System.Double)">
            <summary>
            Returns minimum of the given three numeric values
            </summary>
        </member>
        <member name="M:Infragistics.MathUtil.Max3(System.Double,System.Double,System.Double)">
            <summary>
            Returns maximum of the given three numeric values
            </summary>
        </member>
        <member name="M:Infragistics.MathUtil.Min(System.Double[])">
            <summary>
            Returns minimum of the given numeric parameters.
            </summary>
            <param name="a">The numeric parameters from which to return the minimum value.</param>
            <returns>The lowest of the given numeric parameters.</returns>
        </member>
        <member name="M:Infragistics.MathUtil.Max(System.Double[])">
            <summary>
            Returns maximum of the given numeric parameters.
            </summary>
            <param name="a">The numeric parameters from which to return the maximum value.</param>
            <returns>The highest of the given numeric parameters.</returns>
        </member>
        <member name="T:Infragistics.MatrixUtil">
            <summary>
            Utility class for matrix operations.
            </summary>
        </member>
        <member name="M:Infragistics.MatrixUtil.GetInverse(System.Windows.Media.Matrix)">
            <summary>
            Gets the inverse of the current transform.
            </summary>
            <param name="matrix"></param>
            <returns>Inverse matrix.</returns>
        </member>
        <member name="M:Infragistics.MatrixUtil.Transform(System.Windows.Media.Matrix,System.Windows.Rect)">
            <summary>
            Transforms a rectangle.
            </summary>
            <param name="matrix"></param>
            <param name="rc"></param>
            <returns>Transformed rectangle.</returns>
        </member>
        <member name="M:Infragistics.MatrixUtil.Duplicate(System.Windows.Media.Matrix)">
            <summary>
            Gets a duplicate of the current Matrix
            </summary>
            <param name="matrix"></param>
            <returns>Duplicate matrix.</returns>
        </member>
        <member name="T:Infragistics.PathFigureUtil">
            <summary>
            Utilty methods for PathFigures.
            </summary>
        </member>
        <member name="M:Infragistics.PathFigureUtil.Duplicate(System.Windows.Media.PathFigureCollection)">
            <summary>
            Duplicates the specified path figure collection.
            </summary>
            <param name="pathFigureCollection">The path figure collection.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.PathFigureUtil.Duplicate(System.Windows.Media.PathFigure)">
            <summary>
            Creates a duplicate of the current PathFigure object.
            </summary>
            <param name="pathFigure">The current PathFigure object.</param>
            <returns>A new PathFigure</returns>
        </member>
        <member name="T:Infragistics.Platform">
            <summary>
            Utility class for platform-specific operations.
            </summary>
        </member>
        <member name="M:Infragistics.Platform.GetStringBounds(System.String,System.Double,System.Windows.Media.FontFamily,System.Double,System.Windows.FontStretch,System.Windows.FontStyle,System.Windows.FontWeight)">
            <summary>
            Calculates the bounds of a given text string.
            </summary>
            <param name="text">The text string.</param>
            <param name="angle">The angle at which the text is rotated.</param>
            <param name="fontFamily">Font family.</param>
            <param name="fontSize">Font size.</param>
            <param name="fontStretch">Font stretch.</param>
            <param name="fontStyle">Font style.</param>
            <param name="fontWeight">Font weight.</param>
            <returns>The size of the measured string.</returns>
        </member>
        <member name="M:Infragistics.Platform.GetStringSizePixels(System.String,System.Windows.Media.FontFamily,System.Double,System.Windows.FontStretch,System.Windows.FontStyle,System.Windows.FontWeight)">
            <summary>
            Calculates the size of the given text string.
            </summary>
            <param name="text">The text string.</param>
            <param name="fontFamily">Font family.</param>
            <param name="fontSize">Font size.</param>
            <param name="fontStretch">Font stretch.</param>
            <param name="fontStyle">Font style.</param>
            <param name="fontWeight">Font weight.</param>
            <returns>The size of the measured string.</returns>
        </member>
        <member name="M:Infragistics.Platform.GetBestFitStringSize(System.String,System.Double,System.Windows.Media.FontFamily,System.Double,System.Windows.FontStretch,System.Windows.FontStyle,System.Windows.FontWeight)">
            <summary>
            Returns the number of characters from a given string that will fit within a specified width.
            </summary>
            <param name="text">The text string.</param>
            <param name="width">The available width.</param>
            <param name="fontFamily">Font family.</param>
            <param name="fontSize">Font size.</param>
            <param name="fontStretch">Font stretch.</param>
            <param name="fontStyle">Font style.</param>
            <param name="fontWeight">Font weight.</param>
            <returns>The number of characters from a given string that will fit within a specified width.</returns>
        </member>
        <member name="T:Infragistics.Controls.PointCollectionUtil">
            <summary>
            General purpose utility methods for collections of points.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.FlattenTo(System.Collections.Generic.IList{System.Windows.Point},System.Collections.Generic.IList{System.Windows.Point},System.Double)">
            <summary>
            Creates a simplified version of the the open simplex or polyline formed by the current points
            by removing internal points with the specified error tolerance.
            </summary>
            <param name="points">Polygon or polyline to flatten.</param>
            <param name="list">Destination to which the flattened polygon or polyline will be written (if null, a new one will be created)</param>
            <param name="E">Maximum flattenning error.</param>
            <returns>Point collection containing the flattened polygon or polyline.</returns>
            <remarks>
            The first and last point of the currents are always part of the returned points
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.GetBounds(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Gets the axis-aligned bounding box for the cloud of points.
            </summary>
            <param name="points"></param>
            <returns>axis-aligned bounding rectangle or Rect.Empty</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.GetBounds(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Windows.Point}})">
            <summary>
            Returns a Rect representing the bounds of all the points in the given list.
            </summary>
            <param name="points">A list of list of points.</param>
            <returns>A Rect representing the bounds of all given points.</returns>
            <remarks>The nested lists of points data structure corresponds to that which is used in the Shapefile format and other geospatial data sources.</remarks>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.GetBounds(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Gets the bounding rectangle containing all of the given Points.
            </summary>
            <param name="points">The Points to find a bounding rectangle for.</param>
            <returns>The bounding rectangle containing all of the given Points.</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.GetBounds(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}})">
            <summary>
            Gets the bounding rectangle containing all of the given points.
            </summary>
            <param name="points">The Points to find a bounding rectangle for.</param>
            <returns>The bounding rectangle containing all of the given points.</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.GetBounds(System.Collections.Generic.List{System.Windows.Media.PointCollection})">
            <summary>
            Gets the bounding rectangle containing all of the given points.
            </summary>
            <param name="points">The Points to find a bounding rectangle for.</param>
            <returns>The bounding rectangle containing all of the given points.</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.ClipTo(System.Collections.Generic.IList{System.Windows.Point},System.Collections.Generic.IList{System.Windows.Point},Infragistics.Clipper)">
            <summary>
            Clips the given points using the given Clipper.
            </summary>
            <param name="points">The points to clip using the given Clipper.</param>
            <param name="list">Not used.</param>
            <param name="clipper">The Clipper to use when clipping the given Points.</param>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.GetCentroid(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Gets the centroid of the current cloud of points
            </summary>
            <param name="points">Cloud of points for which to calculate the centroid.</param>
            <returns>Centroid of the specified cloud of points.</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.ToPointCollection(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Converts the given list of points to a PointCollection object.
            </summary>
            <param name="points">The points to copy to the resulting PointCollection.</param>
            <returns>A PointCollection containing all of the given points.</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.ToPointList(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Converts an IEnumerable of Points to a List of Points.
            </summary>
            <param name="points">The IEnumerable of Points to convert.</param>
            <returns>A List of Points constructed from the given IEnumerable of Points.</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.ToPointCollections(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}})">
            <summary>
            Converts a List of Lists of Points to a List of PointCollections.
            </summary>
            <param name="points">The List of Lists of Points to convert.</param>
            <returns>A List of PointCollections constructed from the given List of List of Points.</returns>
        </member>
        <member name="T:Infragistics.PolygonUtil">
            <summary>
            Provides utility methods for working with polygons or list of points
            </summary>
        </member>
        <member name="M:Infragistics.PolygonUtil.PolygonContainsPoint(System.Collections.Generic.IList{System.Windows.Point},System.Windows.Point)">
            <summary>
            Checks if a polygon contains specified point
            </summary>
        </member>
        <member name="T:Infragistics.PolySimplification">
            <summary>
            Utility class for polygon simpliciation.
            </summary>
        </member>
        <member name="M:Infragistics.PolySimplification.VertexReduction(System.Tuple{System.Double[],System.Double[]},System.Double)">
            <summary>
            Simple vertex reduction algorithm.
            Complexity: O(n)
            
            Summary:
            Include P0 in the result, and set R = P0. Iterate through subsequent points P1,P2,... until distance(PN, R) > tolerance.
            Include PN in the result, and set R = PN. Continue iterating in this fashion until there are no more points to consider for inclusion.
            
            </summary>
            <param name="points">Input list of points</param>
            <param name="tolerance">The minimum distance allowed between adjacent points</param>
            <returns>List of accepted points</returns>
        </member>
        <member name="M:Infragistics.PolySimplification.SquareDistance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the square of the distance between p1 and p2.
            </summary>
        </member>
        <member name="T:Infragistics.Pool`1">
            <summary>
            Represents a pool of reusable objects.
            </summary>
            <typeparam name="T">Pooled object type. Must be nullable</typeparam>
        </member>
        <member name="T:Infragistics.IIndexedPool`1">
            <summary>
            An IPool that is indexed by integer indexes.
            </summary>
            <typeparam name="T">The type of objects in the pool.</typeparam>
        </member>
        <member name="T:Infragistics.IPool`1">
            <summary>
            Represents a pool of reusable objects.
            </summary>
            <typeparam name="T">The type of objects in the pool.</typeparam>
        </member>
        <member name="M:Infragistics.IPool`1.Clear">
            <summary>
            Clear the values from the pool.
            </summary>
        </member>
        <member name="P:Infragistics.IPool`1.Create">
            <summary>
            Gets or sets the function used to create new items.
            </summary>
        </member>
        <member name="P:Infragistics.IPool`1.Disactivate">
            <summary>
            Gets or sets the function used to disactivate items.
            </summary>
        </member>
        <member name="P:Infragistics.IPool`1.Activate">
            <summary>
            Gets or sets the function used to activate items.
            </summary>
        </member>
        <member name="P:Infragistics.IPool`1.Destroy">
            <summary>
            Gets or sets the function used to destroy old items.
            </summary>
        </member>
        <member name="P:Infragistics.IIndexedPool`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index for which to get the item.</param>
            <returns>The requested item.</returns>
        </member>
        <member name="M:Infragistics.Pool`1.#ctor">
            <summary>
            Constructs a new Pool instance.
            </summary>
        </member>
        <member name="M:Infragistics.Pool`1.Clear">
            <summary>
            Clears the items from the pool.
            </summary>
        </member>
        <member name="M:Infragistics.Pool`1.DoToAll(System.Action{`0})">
            <summary>
            Perfoms an action on all the items in the pool.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="P:Infragistics.Pool`1.Create">
            <summary>
            Gets or sets the function used to create new items.
            </summary>
        </member>
        <member name="P:Infragistics.Pool`1.Disactivate">
            <summary>
            Gets or sets the function used to disactivate items.
            </summary>
        </member>
        <member name="P:Infragistics.Pool`1.Activate">
            <summary>
            Gets or sets the function used to activate items.
            </summary>
        </member>
        <member name="P:Infragistics.Pool`1.Destroy">
            <summary>
            Gets or sets the function used to destroy old items.
            </summary>
        </member>
        <member name="P:Infragistics.Pool`1.Item(System.Int32)">
            <summary>
            Gets the indexed item, extendening the pool and creating the item
            if necessary.
            </summary>
            <param name="index"></param>
            <returns>Item</returns>
        </member>
        <member name="P:Infragistics.Pool`1.Count">
            <summary>
            Gets or sets the count of the items that are in the pool.
            </summary>
            <remarks>
            Setting the count to less than the current value will result in pool
            items automatically being deactivated.
            </remarks>
        </member>
        <member name="P:Infragistics.Pool`1.Active">
            <summary>
            The list of active objects.
            </summary>
        </member>
        <member name="P:Infragistics.Pool`1.Inactive">
            <summary>
            The list of inactive objects.
            </summary>
        </member>
        <member name="T:Infragistics.IHashPool`2">
            <summary>
            An hash mapped IPool.
            </summary>
            <typeparam name="TKey">The type of the keys for the pool.</typeparam>
            <typeparam name="TValue">The type of the values in the pool.</typeparam>
        </member>
        <member name="P:Infragistics.IHashPool`2.Item(`0)">
            <summary>
            Gets the item for the specified key.
            </summary>
            <param name="key">The key for which to get the item.</param>
            <returns>The requested item.</returns>
        </member>
        <member name="T:Infragistics.HashPool`2">
            <summary>
            An implementation of a hash mapped pool.
            </summary>
            <typeparam name="TKey">The type of the keys for the pool.</typeparam>
            <typeparam name="TValue">The type of the values in the pool.</typeparam>
        </member>
        <member name="M:Infragistics.HashPool`2.#ctor">
            <summary>
            Constructs a new HashPool instance.
            </summary>
        </member>
        <member name="M:Infragistics.HashPool`2.IsActiveKey(`0)">
            <summary>
            Returns whether the provided key is in the active set.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key is in the active set.</returns>
        </member>
        <member name="M:Infragistics.HashPool`2.Remove(`0)">
            <summary>
            Removes the item with the provided key from the pool.
            </summary>
            <param name="key">The key for the item to remove.</param>
        </member>
        <member name="M:Infragistics.HashPool`2.Clear">
            <summary>
            Clears the items from the hash pool.
            </summary>
        </member>
        <member name="M:Infragistics.HashPool`2.DoToAll(System.Action{`1})">
            <summary>
            Perfoms an action on all the items in the pool.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="P:Infragistics.HashPool`2.Inactive">
            <summary>
            The inactive members of the pool.
            </summary>
        </member>
        <member name="P:Infragistics.HashPool`2.Active">
            <summary>
            The active members of the pool.
            </summary>
        </member>
        <member name="P:Infragistics.HashPool`2.Create">
            <summary>
            Gets or sets the function used to create new items.
            </summary>
        </member>
        <member name="P:Infragistics.HashPool`2.Disactivate">
            <summary>
            Gets or sets the function used to disactivate items.
            </summary>
        </member>
        <member name="P:Infragistics.HashPool`2.Activate">
            <summary>
            Gets or sets the function used to activate items.
            </summary>
        </member>
        <member name="P:Infragistics.HashPool`2.Destroy">
            <summary>
            Gets or sets the function used to destroy old items.
            </summary>
        </member>
        <member name="P:Infragistics.HashPool`2.Item(`0)">
            <summary>
            Gets the requested item, extendening the pool and creating the item
            if necessary.
            </summary>
            <param name="key"></param>
            <returns>Item</returns>
        </member>
        <member name="P:Infragistics.HashPool`2.ActiveKeys">
            <summary>
            Gets the keys of the active pool objects.
            </summary>
        </member>
        <member name="P:Infragistics.HashPool`2.ActiveCount">
            <summary>
            Gets the count of the number of actives.
            </summary>
        </member>
        <member name="T:Infragistics.PriorityQueue`1">
            <summary>
            Represents a strongly typed sorted list of objects accessed by their priority. Provides
            methods to add and remove items.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Infragistics.PriorityQueue`1.#ctor">
            <summary>
            Initializes a new instance of the PriorityQueue class. 
            </summary>
        </member>
        <member name="M:Infragistics.PriorityQueue`1.Dequeue">
            <summary>
            Removes and returns the highest priority object from the priority queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.PriorityQueue`1.Enqueue(`0,System.Double)">
            <summary>
            Inserts an item into the current priorty queue with the specified priority.
            </summary>
            <param name="item">The object to push onto the priority queue.</param>
            <param name="priority">The object's priority.</param>
        </member>
        <member name="P:Infragistics.PriorityQueue`1.Count">
            <summary>
            Gets the number of items in the current priority queue.
            
            </summary>
        </member>
        <member name="T:Infragistics.RearrangedList`1">
            <summary>
            List class for known lists which are reordered.
            </summary>
            <typeparam name="T">The Type of items in the list.</typeparam>
        </member>
        <member name="M:Infragistics.RearrangedList`1.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{System.Int32})">
            <summary>
            RearrangedList constructor.
            </summary>
            <param name="inner">The original list.</param>
            <param name="indexes">A list of indices, representing the order of items in the RearrangedList.</param>
        </member>
        <member name="M:Infragistics.RearrangedList`1.IndexOf(`0)">
            <summary>
            Gets the index of the given item.
            </summary>
            <param name="item">The item under observation.</param>
            <returns>The index of the given item.</returns>
        </member>
        <member name="M:Infragistics.RearrangedList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>        
        </member>
        <member name="M:Infragistics.RearrangedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:Infragistics.RearrangedList`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Infragistics.RearrangedList`1.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Infragistics.RearrangedList`1.Contains(`0)">
            <summary>
            Checks whether or not the item is present in the collection.
            </summary>
            <param name="item">The item under observation.</param>
            <returns>True if the item is present in the collection, otherwise False.</returns>
        </member>
        <member name="M:Infragistics.RearrangedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the items in the collection to the array, starting at the specified index.
            </summary>
            <param name="array">The array to add collection items to.</param>
            <param name="arrayIndex">The index at which to start the copy operation.</param>
        </member>
        <member name="M:Infragistics.RearrangedList`1.Remove(`0)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was found and removed, otherwise False.</returns>
        </member>
        <member name="M:Infragistics.RearrangedList`1.GetEnumerator">
            <summary>
            Gets the enumerator for iterating through all items in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.RearrangedList`1.Item(System.Int32)">
            <summary>
            RearrangedList indexer.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="P:Infragistics.RearrangedList`1.Count">
            <summary>
            The total number of items in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.RearrangedList`1.IsReadOnly">
            <summary>
            Boolean indicating whether or not the collection is read-only.
            </summary>
        </member>
        <member name="T:Infragistics.RectUtil">
            <summary>
            Utility class for rectangle-based calculations.
            </summary>
        </member>
        <member name="M:Infragistics.RectUtil.GetCenter(System.Windows.Rect)">
            <summary>
            Gets the center of the current rectangle
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns>Center point</returns>
        </member>
        <member name="M:Infragistics.RectUtil.GetArea(System.Windows.Rect)">
            <summary>
            Calculates the area of the current rectangle.
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns>The area of the current rectangle.</returns>
        </member>
        <member name="M:Infragistics.RectUtil.Duplicate(System.Windows.Rect)">
            <summary>
            Create a clone of the current rectangle
            </summary>
            <param name="rect"></param>
            <returns>A clone of the current rectangle</returns>
        </member>
        <member name="M:Infragistics.RectUtil.GetLeader(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Gets the attachment point on the current rectangle for the leader line
            to the specified anchor.
            </summary>
            <remarks>
            If the anchor lies within the current rectangle, the anchor is returned.  
            </remarks>
            <param name="rect">Area to join to the anchor</param>
            <param name="anchor">Anchor to join to the rectangle</param>
            <returns>Attachment point.</returns>
        </member>
        <member name="M:Infragistics.RectUtil.GetDistanceSquared(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Calculates the square of the distance from the current rectangle
            to the specified point. 
            </summary>
            <remarks>
            If the point lies within the current rectangle, the separation is considered
            to be zero.
            </remarks>
            <param name="rect">Current rectangle.</param>
            <param name="pt">Point to test.</param>
            <returns>The square of the separation.</returns>
        </member>
        <member name="M:Infragistics.RectUtil.GetDistanceSquared(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Calculates the square of the distance from the current rectangle
            to the specified rectangle. 
            </summary>
            <remarks>
            If the rectangles intersect, their separation is considered
            to be zero.
            </remarks>
            <param name="rect">Current rectangle.</param>
            <param name="rc">Rectangle to test.</param>
            <returns>The square of the separation.</returns>
        </member>
        <member name="M:Infragistics.RectUtil.GetDistanceSquared(System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Calculates the square of the distance from the current rectangle
            to the specified point. 
            </summary>
            <param name="rc">Current rectangle.</param>
            <param name="X">Point X coordinate.</param>
            <param name="Y">Point Y coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.RectUtil.Contains(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Indicates whether the current rectangle wholly contains the specified rectangle.
            </summary>
            <param name="rect">The current rectangle</param>
            <param name="rc">Rectangle to test for strict inclusion</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.RectUtil.IntersectsWith(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Indicates whether the specified rectangle intersects with the current rectangle. 
            </summary>
            <param name="rect">The current rectangle</param>
            <param name="rc">The rectangle to check</param>
            <returns>true if the specified rectangle intersects with the current rectangle; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.RectUtil.IntersectionArea(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Calculates the area of intersection between the specified rectangle and the current rectangle
            </summary>
            <param name="rect">The current rectangle</param>
            <param name="rc">The rectangle to check</param>
            <returns>The area of intersection or 0.0 if the rectangles do not intersect.</returns>
        </member>
        <member name="M:Infragistics.RectUtil.GetInflated(System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Expands or shrinks the current rectangle by using the specified width and height
            amounts, in all directions. The
            size and position of the current rectangle are not changed.
            </summary>
            <remarks>
            The Width of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle. Likewise, the Height of the resulting rectangle is increased or
            decreased by twice the specified height.
            <para>
            If the specified width or height shrink the rectangle by more than its current
            Width or Height—giving the rectangle a negative area—the rectangle becomes the
            Empty rectangle.
            </para>
            </remarks>
            <param name="rect"></param>
            <param name="width">The amount by which to expand or shrink the left and right sides of the rectangle.</param>
            <param name="height">The amount by which to expand or shrink the top and bottom sides of the rectangle.</param>
            <returns>Inflated rectangle.</returns>
        </member>
        <member name="M:Infragistics.RectUtil.InflateBy(System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Inflates the current rectangle
            </summary>
            <param name="rect">The rect.</param>
            <param name="dx">The dx.</param>
            <param name="dy">The dy.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.RectUtil.Inflate(System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Inflates the current rectangle
            </summary>
            <param name="rect">The rect.</param>
            <param name="dx">The dx.</param>
            <param name="dy">The dy.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.RectUtil.Inflate(System.Windows.Rect,System.Double)">
            <summary>
            Inflates the current rectangle
            </summary>
            <param name="rect">The rect.</param>
            <param name="thickness">The thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.RectUtil.Inflate(System.Windows.Rect,System.Windows.Thickness)">
            <summary>
            Inflates the current rectangle
            </summary>
            <param name="rect">The rect.</param>
            <param name="thickness">The thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.RectUtil.InflateBy(System.Windows.Rect,System.Windows.Thickness)">
            <summary>
            Inflates the current rectangle
            </summary>
            <param name="rect">The rect.</param>
            <param name="thickness">The thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.RectUtil.Deflate(System.Windows.Rect,System.Windows.Thickness)">
            <summary>
            Deflates the current rectangle
            </summary>
            <param name="rect">The rect.</param>
            <param name="thickness">The thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.RectUtil.Round(System.Windows.Rect)">
            <summary>
            Rounds the current rectangle
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.RectUtil.IsNull(System.Windows.Rect)">
            <summary>
            Determines whether the current rectangle is null.
            </summary>
            <param name="rect">The rect.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Windows.Rect"/> is null; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Infragistics.RectUtil.Size(System.Windows.Rect)">
            <summary>
            Returns size dimensions of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.RectUtil.Normalize(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Normalize current rectangle to dimensions of other rectangle
            </summary>
        </member>
        <member name="M:Infragistics.RectUtil.Normalize(System.Windows.Rect,System.Windows.Size)">
            <summary>
            Normalize current rectangle to dimensions of size object
            </summary>
        </member>
        <member name="M:Infragistics.RectUtil.GetTopLeft(System.Windows.Rect)">
            <summary>
            Returns Top Left point of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.RectUtil.GetTopRight(System.Windows.Rect)">
            <summary>
            Returns Top Right point of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.RectUtil.GetBottomLeft(System.Windows.Rect)">
            <summary>
            Returns Bottom Left point of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.RectUtil.GetBottomRight(System.Windows.Rect)">
            <summary>
            Returns Bottom Right point of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.RectUtil.GetCorners(System.Windows.Rect)">
            <summary>
            Returns corner points of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.RectUtil.RotateAboutCenter(System.Windows.Rect,System.Double)">
            <summary>
            Returns bounds of rotated rectangle around center of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.RectUtil.RotateAboutPoint(System.Windows.Rect,System.Double,System.Double,System.Double)">
            <summary>
            Returns bounds of rotated rectangle around specified point
            </summary>
        </member>
        <member name="T:Infragistics.SafeSetters">
            <summary>
            Allows for setting properties only if the trust level allows.
            </summary>
        </member>
        <member name="F:Infragistics.SafeSetters.SettersProperty">
            <summary>
            The safe setters to associate with the element.
            </summary>
        </member>
        <member name="M:Infragistics.SafeSetters.SetSetters(System.Windows.DependencyObject,Infragistics.SafeSetterCollection)">
            <summary>
            Sets the setters to associate with an element.
            </summary>
            <param name="target">The target element.</param>
            <param name="setters">The setters to associate.</param>
        </member>
        <member name="M:Infragistics.SafeSetters.GetSetters(System.Windows.DependencyObject)">
            <summary>
            Gets the setters associated with an element.
            </summary>
            <param name="target">The target element.</param>
            <returns>The setters.</returns>
        </member>
        <member name="T:Infragistics.SafeSetterCollection">
            <summary>
            A collection of safe setters.
            </summary>
        </member>
        <member name="M:Infragistics.SafeSetterCollection.#ctor">
            <summary>
            SafeSetterCollection constructor.
            </summary>
        </member>
        <member name="M:Infragistics.SafeSetterCollection.Apply(System.Windows.DependencyObject)">
            <summary>
            Applies the setters against a target object.
            </summary>
            <param name="target">The target object.</param>
        </member>
        <member name="T:Infragistics.SafeSetter">
            <summary>
            A setter that will safely set its value only if the trust level is appropriate.
            </summary>
        </member>
        <member name="M:Infragistics.SafeSetter.CreateInstanceCore">
            <summary>
            Creates core instance of freezable object
            </summary>
        </member>
        <member name="F:Infragistics.SafeSetter.IsSafe">
            <summary>
            Static boolean indicating whether or not unrestricted UI permission is granted.
            </summary>
        </member>
        <member name="F:Infragistics.SafeSetter.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.SafeSetter.ValueAsXamlStringProperty">
            <summary>
            Identifies the ValueAsXamlString dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.SafeSetter.PropertyNameProperty">
            <summary>
            Identifies the PropertyName dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.SafeSetter.Value">
            <summary>
            Sets or gets the value that should be set on the target.
            </summary>
        </member>
        <member name="P:Infragistics.SafeSetter.ValueAsXamlString">
            <summary>
            Sets or gets the Xaml string that will be hydrated and then set on the target.
            </summary>
            <remarks>
            This can be used over the value property if contstruction of the value needs to be deferred
            until it is sure to be safe.
            </remarks>
        </member>
        <member name="P:Infragistics.SafeSetter.PropertyName">
            <summary>
            Sets or gets the name of the property on the target that will be set.
            </summary>
        </member>
        <member name="T:Infragistics.ShapeUtil">
            <summary>
            Provides extension methods for cloning shapes.
            </summary>
        </member>
        <member name="M:Infragistics.ShapeUtil.Duplicate(System.Windows.Shapes.Shape)">
            <summary>
            Duplicates the specified shape.
            </summary>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ShapeUtil.Duplicate(System.Windows.Shapes.Ellipse)">
            <summary>
            Duplicates the specified ellipse.
            </summary>
            <param name="ellipse">The ellipse.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ShapeUtil.Duplicate(System.Windows.Shapes.Line)">
            <summary>
            Duplicates the specified line.
            </summary>
            <param name="line">The line.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ShapeUtil.Duplicate(System.Windows.Shapes.Rectangle)">
            <summary>
            Duplicates the specified rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ShapeUtil.Duplicate(System.Windows.Shapes.Polygon)">
            <summary>
            Duplicates the specified polygon.
            </summary>
            <param name="polygon">The polygon.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ShapeUtil.Duplicate(System.Windows.Shapes.Polyline)">
            <summary>
            Duplicates the specified polyline.
            </summary>
            <param name="polyline">The polyline.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ShapeUtil.Duplicate(System.Windows.Shapes.Path)">
            <summary>
            Duplicates the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ShapeUtil.Duplicate(System.Windows.Media.DoubleCollection)">
            <summary>
            Duplicates the specified double collection.
            </summary>
            <param name="doubleCollection">The double collection.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ShapeUtil.Duplicate(System.Windows.Media.PointCollection)">
            <summary>
            Duplicates the specified point collection.
            </summary>
            <param name="pointCollection">The point collection.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.SmartPlaceableWrapper`1">
            <summary>
            ISmartPlaceable wrapper class for a FrameworkElement.
            For use with the SmartPlacer class.
            </summary>
        </member>
        <member name="T:Infragistics.ISmartPlaceable">
            <summary>
            Interface for objects placed by a smart placer object.
            </summary>
            <remarks>
            Although there is a clear intent to SmartPosition values, implementing classes
            are free to interpret the values as they wish. The only restriction being that
            the position parameter be interpreted coherently: the bounds set by calling
            SetPosition() should be identical to those returned by calling GetPosition()
            </remarks>
        </member>
        <member name="M:Infragistics.ISmartPlaceable.GetSmartPositions">
            <summary>
            Gets an array of valid positions for the current object. Objects can individually
            place restrictions on where they can be placed, although in reality it's more
            likely that they'll just return a static array.
            
            The order of the valid positions has some significance, in that although the
            placer will choose the best overall position, it will stop searching as
            soon as it finds an ideal one. The upshot of all of this is that you should
            return an array sorted in order of preferred placement.
            </summary>
            <returns>Array of valid smart positions for the current object.</returns>
        </member>
        <member name="M:Infragistics.ISmartPlaceable.GetSmartBounds(Infragistics.SmartPosition)">
            <summary>
            Gets the bounds of the current object if it were placed at the specified position.
            </summary>
            <param name="position">Smart position for bounds.</param>
            <returns>Bounds for the current object</returns>
        </member>
        <member name="P:Infragistics.ISmartPlaceable.SmartPosition">
            <summary>
            Gets or sets the position of the current object.
            </summary>
            <remarks>
            After the smart position is set, the current object's
            bounds are assumed to be that returned from GetSmartBounds() if called with the same position.
            </remarks>
        </member>
        <member name="P:Infragistics.ISmartPlaceable.Opacity">
            <summary>
            Sets or gets the opacity of the current object.
            </summary>
        </member>
        <member name="M:Infragistics.SmartPlaceableWrapper`1.#ctor">
            <summary>
            SmartPlaceableWrapper constructor.
            </summary>
        </member>
        <member name="M:Infragistics.SmartPlaceableWrapper`1.GetSmartPositions">
            <summary>
            Gets the array of SmartPositions for this SmartPlaceableWrapper.
            </summary>
            <returns>The array of SmartPositions for this SmartPlaceableWrapper.</returns>
        </member>
        <member name="F:Infragistics.SmartPlaceableWrapper`1.smartPositionDefault">
            <summary>
            Dummy array consisting of the default SmartPositions.
            </summary>
        </member>
        <member name="F:Infragistics.SmartPlaceableWrapper`1.smartPositions">
            <summary>
            SmartPositions in order of preference.
            </summary>
        </member>
        <member name="M:Infragistics.SmartPlaceableWrapper`1.GetSmartBounds(Infragistics.SmartPosition)">
            <summary>
            Gets the smart placement bounds for the SmartPlaceableWrapper using the specified SmartPosition.
            </summary>
            <param name="position">A SmartPosition value indicating how to place the SmartPlaceableWrapper.</param>
            <returns>A Rect representing the calculated bounds for the SmartPlaceableWrapper at the given SmartPosition.</returns>
        </member>
        <member name="M:Infragistics.SmartPlaceableWrapper`1.GetOffset(Infragistics.SmartPosition,System.Double,System.Double)">
            <summary>
            Returns the offset (from OriginalLocation) representing a particular SmartPosition.
            </summary>
            <param name="position">A SmartPosition.</param>
            <param name="w">The width of the element being positioned.</param>
            <param name="h">The height of the element being positioned.</param>
            <returns>A Point representing the offset from OriginalLocation.</returns>
        </member>
        <member name="P:Infragistics.SmartPlaceableWrapper`1.NoWiggle">
            <summary>
            If true, no attempt will be made to shift the position of the smart placeable element.
            </summary>
        </member>
        <member name="P:Infragistics.SmartPlaceableWrapper`1.Element">
            <summary>
            Gets or sets the associated FrameworkElement.
            </summary>
        </member>
        <member name="P:Infragistics.SmartPlaceableWrapper`1.ElementLocationResult">
            <summary>
            The resulting location for Element after smart placement.
            </summary>
        </member>
        <member name="P:Infragistics.SmartPlaceableWrapper`1.OriginalLocation">
            <summary>
            Gets or sets the original location for Element.
            </summary>
        </member>
        <member name="P:Infragistics.SmartPlaceableWrapper`1.Opacity">
            <summary>
            The Opacity of the underlying element.
            </summary>
        </member>
        <member name="P:Infragistics.SmartPlaceableWrapper`1.SmartPosition">
            <summary>
            The SmartPosition being used for placement of the SmartPlaceableWrapper.
            </summary>
        </member>
        <member name="T:Infragistics.SmartPosition">
            <summary>
            Describes available positions for smart label placement with respect to the notional rectangle's
            origin
            </summary>
        </member>
        <member name="F:Infragistics.SmartPosition.LeftTop">
            <summary>
            Specifies left top as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.SmartPosition.CenterTop">
            <summary>
            Specifies center top as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.SmartPosition.RightTop">
            <summary>
            Specifies right top as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.SmartPosition.LeftCenter">
            <summary>
            Specifies left center as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.SmartPosition.CenterCenter">
            <summary>
            Specifies center center as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.SmartPosition.RightCenter">
            <summary>
            Specifies right center as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.SmartPosition.LeftBottom">
            <summary>
            Specifies left bottom as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.SmartPosition.CenterBottom">
            <summary>
            Specifies center bottom as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.SmartPosition.RightBottom">
            <summary>
            Specifies right bottom as a valid smart placement position.
            </summary>
        </member>
        <member name="T:Infragistics.SmartPlacer">
            <summary>
            Manages the position for each object in a set of managed SmartPositions in
            an attempt to minimise overlap.
            </summary>
            <remarks>
            Collision avoidance uses a greedy algorithm running in O(n^2) with O(n) storage.
            Although there are no known algorithms running in less time than this, simulated
            annealing may produce slightly better results with comparable execution time.
            </remarks>
        </member>
        <member name="M:Infragistics.SmartPlacer.#ctor">
            <summary>
            Creates a new SmartPlacer with the default configuration.
            </summary>
        </member>
        <member name="M:Infragistics.SmartPlacer.Place(Infragistics.ISmartPlaceable)">
            <summary>
            Place the object with respect to currently placed object.
            Calling this method causes the object to be immediately updated, but has no effect on previously
            placed objects.
            
            Placeables which cannot be placed within the placement bounds or 
            without overlapping previously placed objects are hidden
            </summary>
            <param name="smartPlaceable">Object to place.</param>
        </member>
        <member name="P:Infragistics.SmartPlacer.Bounds">
            <summary>
            Sets or gets the placement bounds for this smart placer. Setting the
            placement bounds has no effect on previously placed objects.
            </summary>
        </member>
        <member name="P:Infragistics.SmartPlacer.Overlap">
            <summary>
            Sets or gets the maximum permissible placed overlap expressed as a
            percentage [0, 1] of each placeable's area. Setting the
            placement overlap has no effect on previously placed objects.
            </summary>
        </member>
        <member name="P:Infragistics.SmartPlacer.Fade">
            <summary>
            Sets or gets the fade exponent for ISmartPlaceables which exceed
            the current overlap. Setting the
            placement fade has no effect on previously placed objects.
            </summary>
        </member>
        <member name="T:Infragistics.StackPool`1">
            <summary>
            Represents a pool of reusable objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Infragistics.StackPool`1.Pop">
            <summary>
            Gets an object from the pool.
            </summary>
            <remarks>
            The pool will either Create a new object or Activate one which was previously returned
            and Disactivated. If DeferDisactivate is set there may be pending active objects
            available which will be reused directly).
            </remarks>
            <returns>An object.</returns>
        </member>
        <member name="M:Infragistics.StackPool`1.Push(`0)">
            <summary>
            Returns an object to the pool for recycling.
            </summary>
            <remarks>
            All references to objects which have been returned to the pool should be destroyed. 
            <para>
            When an object is returned to the pool it will be immediately Disactivated (unless
            DeferDisactivate is set) and may also be Destroyed either immediately or some time
            later. 
            </para>
            </remarks>
            <param name="t"></param>
        </member>
        <member name="F:Infragistics.StackPool`1.active">
            <summary>
            The active object collection.
            </summary>
        </member>
        <member name="F:Infragistics.StackPool`1.limbo">
            <summary>
            The limbo object collection.
            </summary>
        </member>
        <member name="F:Infragistics.StackPool`1.inactive">
            <summary>
            The inactive object collection.
            </summary>
        </member>
        <member name="P:Infragistics.StackPool`1.DeferDisactivate">
            <summary>
            Sets or gets the DeferDisactivate flag.
            </summary>
            <remarks>
            When the pool is marked to defer disactivation, objects returned to the pool are
            not immediately disactivated, instead remaining in a limbo state where they are
            available for reuse without Activation. Resetting DeferDisactivate causes all of 
            these limbo objects to be disactivated and potentially destroyed.
            <para>
            Deferred disactivation is useful where the activation/disactivation cycle is costle
            (such as add/remove a VisualElement from a ParentItem Panel).
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.StackPool`1.ActiveCount">
            <summary>
            Gets the number of active items in the current StackPool object.
            </summary>
        </member>
        <member name="P:Infragistics.StackPool`1.InactiveCount">
            <summary>
            Gets the number of inactive (not including limbo) items in the
            current StackPool object.
            </summary>
        </member>
        <member name="P:Infragistics.StackPool`1.Create">
            <summary>
            Gets or sets the function used to create new items.
            </summary>
        </member>
        <member name="P:Infragistics.StackPool`1.Deactivate">
            <summary>
            Gets or sets the function used to disactivate items.
            </summary>
        </member>
        <member name="P:Infragistics.StackPool`1.Activate">
            <summary>
            Gets or sets the function used to activate items.
            </summary>
        </member>
        <member name="P:Infragistics.StackPool`1.Destroy">
            <summary>
            Gets or sets the function used to destroy old items.
            </summary>
        </member>
        <member name="T:Infragistics.StringFormatter">
            <summary>
            Represents a string formatting object used to create strings
            based upon an object and a formatting string which dereferences
            properties from the object.
            </summary>
        </member>
        <member name="M:Infragistics.StringFormatter.References(System.String)">
            <summary>
            Predicate indicating that the current StringFormatter object refers
            to the named property.
            </summary>
            <param name="propertyName"></param>
            <returns>true if the current StringFormatter object refers
            to the named property.</returns>
        </member>
        <member name="M:Infragistics.StringFormatter.Format(System.Object,Infragistics.StringFormatter.ValueDelegate)">
            <summary>
            Create a formatted a string according to the compiled format
            string and the properties on the specified object
            </summary>
            <param name="obj">The object in context.</param>
            <param name="propertyValue">The ValueDelegate in context.</param>
            <returns>Formatted string or null on error.</returns>
        </member>
        <member name="M:Infragistics.StringFormatter.ToString">
            <summary>
            Returns a String that represents the current StringFormatter.
            </summary>
            <returns>A String that represents the current StringFormatter.</returns>
        </member>
        <member name="M:Infragistics.StringFormatter.GetPropertyValue(System.Object,System.String)">
            <summary>
            The default ValueDelegate
            </summary>
            <param name="obj">Object with the named property </param>
            <param name="name">Property name. A property name of '*' uses the object as the property.</param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.StringFormatter.FormatString">
            <summary>
            Gets or sets the raw formatting string for the current StringFormatter object. 
            </summary>
            <remarks>
            Setting the raw formatting string immediately compiles the format string and
            list of referenced properties.
            </remarks>
        </member>
        <member name="P:Infragistics.StringFormatter.CompiledFormatString">
            <summary>
            Gets the compiled format string for the current StringFormatter object.
            </summary>
        </member>
        <member name="P:Infragistics.StringFormatter.PropertyNames">
            <summary>
            Gets the list of the property names referred to by the current StringFormatter object. 
            </summary>
        </member>
        <member name="T:Infragistics.StringFormatter.ValueDelegate">
            <summary>
            Delegate used to retreive named properties from an object.
            </summary>
            <param name="obj">Object containing named property.</param>
            <param name="propertyName">Name of property.</param>
            <returns>Property value or null if object does not have the named property.</returns>
        </member>
        <member name="T:Infragistics.StringFormatUtil">
            <summary>
            Utility class for auto string formatting.
            </summary>
        </member>
        <member name="M:Infragistics.StringFormatUtil.Format(System.String,System.Object,Infragistics.StringFormatter.ValueDelegate)">
            <summary>
            Create and format a string according to the value of the current string
            and the properties on the specified object
            </summary>
            <param name="format">Format string</param>
            <param name="obj">Object to format</param>
            <param name="propertyValue">Property value delegate</param>
            <returns>formatted string or null on error.</returns>
        </member>
        <member name="T:Infragistics.TransformUtil">
            <summary>
            Utility class for graphical transform operations.
            </summary>
        </member>
        <member name="M:Infragistics.TransformUtil.Duplicate(System.Windows.Media.Transform)">
            <summary>
            Gets a duplicate of this transform. 
            </summary>
            <param name="transform">The Transform to duplicate.</param>
            <returns>The duplicate Transform.</returns>
        </member>
        <member name="M:Infragistics.TransformUtil.Duplicate(System.Windows.Media.MatrixTransform)">
            <summary>
            Gets a duplicate of this matrix transform.
            </summary>
            <param name="transform">The MatrixTransform to duplicate.</param>
            <returns>The duplicate Transform.</returns>
        </member>
        <member name="M:Infragistics.TransformUtil.Duplicate(System.Windows.Media.RotateTransform)">
            <summary>
            Gets a duplicate of this rotate transform
            </summary>
            <param name="transform"></param>
            <returns>duplicate transform</returns>
        </member>
        <member name="M:Infragistics.TransformUtil.Duplicate(System.Windows.Media.ScaleTransform)">
            <summary>
            Gets a duplicate of this scale transform
            </summary>
            <param name="transform"></param>
            <returns>duplicate transform</returns>
        </member>
        <member name="M:Infragistics.TransformUtil.Duplicate(System.Windows.Media.SkewTransform)">
            <summary>
            Gets a duplicate of this skew transform
            </summary>
            <param name="transform"></param>
            <returns>duplicate transform</returns>
        </member>
        <member name="M:Infragistics.TransformUtil.Duplicate(System.Windows.Media.TransformGroup)">
            <summary>
            Gets a duplicate of this transform group
            </summary>
            <param name="transform"></param>
            <returns>Duplicate transform.</returns>
        </member>
        <member name="M:Infragistics.TransformUtil.Duplicate(System.Windows.Media.TranslateTransform)">
            <summary>
            Gets a duplicate of this translate transform
            </summary>
            <param name="transform"></param>
            <returns>duplicate transform</returns>
        </member>
        <member name="M:Infragistics.TransformUtil.SetProjectionMatrix(System.Windows.Media.MatrixTransform,System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Adjusts the current MatrixTransform object to project the source rectangle to the target rectangle. 
            </summary>
            <param name="matrixTransform">The current MatrixTransform object.</param>
            <param name="source">Source rectangle.</param>
            <param name="target">Target rectangle.</param>
            <returns>The current MatrixTransform</returns>
        </member>
        <member name="M:Infragistics.TransformUtil.GetMatrix(System.Windows.Media.GeneralTransform)">
            <summary>
            Gets an equivalent affine matrix for this transform
            </summary>
            <param name="transform"></param>
            <returns>new matrix</returns>
        </member>
        <member name="M:Infragistics.TransformUtil.GetInverse(System.Windows.Media.GeneralTransform)">
            <summary>
            Gets the inverse transform (as a MatrixTransform) for this transform
            </summary>
            <param name="transform"></param>
            <returns>new matrix transform, or null if matrix is not invertible</returns>
        </member>
        <member name="M:Infragistics.TransformUtil.Transform(System.Windows.Media.GeneralTransform,System.Windows.Rect)">
            <summary>
            Transforms a rectangle
            </summary>
            <param name="generalTransform"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Silverlight.HalfEdge">
            <summary>
            A directed half-edge segment defined by two vertex codes.
            </summary>
        </member>
        <member name="M:Infragistics.Silverlight.HalfEdge.#ctor(System.Int32,System.Int32)">
            <summary>
            HalfEdge constructor.
            </summary>
        </member>
        <member name="P:Infragistics.Silverlight.HalfEdge.Beg">
            <summary>
            B.
            </summary>
        </member>
        <member name="P:Infragistics.Silverlight.HalfEdge.End">
            <summary>
            E.
            </summary>
        </member>
        <member name="T:Infragistics.Silverlight.HalfEdgeCollection">
            <summary>
            An EdgeSet represents an unordered set of half-edges.
            </summary>
            <remarks>
            The set may not contain two half-edges which form together form a full edge, and it is an
            error to attempt to insert such a pair.
            </remarks>
        </member>
        <member name="M:Infragistics.Silverlight.HalfEdgeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Infragistics.Silverlight.HalfEdgeCollection.Add(Infragistics.Silverlight.HalfEdge)">
            <summary>
            Adds a HalfEdge to the set.
            </summary>
            <param name="edge">The HalfEdge to add.</param>
        </member>
        <member name="M:Infragistics.Silverlight.HalfEdgeCollection.Remove(Infragistics.Silverlight.HalfEdge)">
            <summary>
            Removes a HalfEdge from the set.
            </summary>
            <param name="edge">The HalfEdge to remove from the set.</param>
        </member>
        <member name="M:Infragistics.Silverlight.HalfEdgeCollection.Clear">
            <summary>
            Clears the set.
            </summary>
        </member>
        <member name="M:Infragistics.Silverlight.HalfEdgeCollection.Contains(Infragistics.Silverlight.HalfEdge)">
            <summary>
            Determines whether or not the given HalfEdge exists in the set.
            </summary>
            <param name="edge">The HalfEdge under observation.</param>
            <returns>True if the set contains the HalfEdge, otherwise False.</returns>
        </member>
        <member name="P:Infragistics.Silverlight.HalfEdgeCollection.Count">
            <summary>
            Count of HalfEdges in the set.
            </summary>
        </member>
        <member name="T:Infragistics.Silverlight.Triangle">
            <summary>
            Triangle class.
            </summary>
        </member>
        <member name="P:Infragistics.Silverlight.Triangle.v0">
            <summary>
            v0.
            </summary>
        </member>
        <member name="P:Infragistics.Silverlight.Triangle.v1">
            <summary>
            v1.
            </summary>
        </member>
        <member name="P:Infragistics.Silverlight.Triangle.v2">
            <summary>
            v2.
            </summary>
        </member>
        <member name="T:Infragistics.Silverlight.TriangleMesh">
            <summary>
            Delaunay triangulation of a list of points.
            </summary>
        </member>
        <member name="P:Infragistics.Silverlight.TriangleMesh.TriangleList">
            <summary>
            Collection of Triangles.
            </summary>
        </member>
        <member name="P:Infragistics.Silverlight.TriangleMesh.EdgeCollection">
            <summary>
            Set of HalfEdges.
            </summary>
        </member>
        <member name="P:Infragistics.Silverlight.TriangleMesh.Points">
            <summary>
            List of Points.
            </summary>
        </member>
        <member name="T:Infragistics.Silverlight.TriangleMesh.Comparer">
            <summary>
            Implements lexical comparison for points
            </summary>
        </member>
        <member name="T:Infragistics.TypeUtil">
            <summary>
            Type conversion utility class.
            </summary>
        </member>
        <member name="M:Infragistics.TypeUtil.GetTypeConverter(System.Type)">
            <summary>
            Gets the type converter for the current type.
            </summary>
            <param name="type"></param>
            <returns>TypeConverter, or null</returns>
        </member>
        <member name="M:Infragistics.TypeUtil.ChangeType(System.Type,System.Object)">
            <summary>
            Returns an Object with the specified Type and whose value is equivalent
            to the specified object.
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns>Value as the specified type, or null if the conversion cannot be performed.</returns>
        </member>
        <member name="T:Infragistics.IVisualData">
            <summary>
            Interface implemented by classes that expose visual information
            </summary>
        </member>
        <member name="T:Infragistics.PrimitiveVisualDataList">
            <summary>
            Provides information about primitive visual elements.
            </summary>
        </member>
        <member name="M:Infragistics.PrimitiveVisualDataList.ContainingTag(System.String)">
            <summary>
            Returns the items matching the categorical tag.
            </summary>
            <param name="tag">The tag to match.</param>
            <returns>The returned visual data.</returns>
        </member>
        <member name="M:Infragistics.PrimitiveVisualDataList.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="T:Infragistics.LabelAppearanceData">
            <summary>
            Describes appearance information about a label.
            </summary>
        </member>
        <member name="M:Infragistics.LabelAppearanceData.Serialize">
            <summary>
            Serializes the current object to a string.
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.Text">
            <summary>
            Text of the Label
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.HorizontalAlignment">
            <summary>
            Horizontal Alignment of the Label
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.VerticalAlignment">
            <summary>
            Vertical Alignment of the Label
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.TextAlignment">
            <summary>
            Alignment of the Label's Text
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.TextWrapping">
            <summary>
            Wrapping of the Label's Text
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.TextPosition">
            <summary>
            Position of the Label's Text
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.LabelBrush">
            <summary>
            Label brush.
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.LabelBrushExtended">
            <summary>
            Label brush.
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.Angle">
            <summary>
            Angle of the Label
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.Opacity">
            <summary>
            Opacity of the Label
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.Visibility">
            <summary>
            Visibility of the Label
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.Font">
            <summary>
            Font of the label
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.FontFamily">
            <summary>
            Font family of the label
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.FontSize">
            <summary>
            Font Size  of the label
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.FontWeight">
            <summary>
            Font Weight of the label
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.FontStyle">
            <summary>
            Font Style of the label
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.FontStretch">
            <summary>
            Font Stretch of the label
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.MarginLeft">
            <summary>
            Gets or sets left Margin of the label
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.MarginRight">
            <summary>
            Gets or sets right Margin of the label
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.MarginTop">
            <summary>
            Gets or sets top Margin of the label
            </summary>
        </member>
        <member name="P:Infragistics.LabelAppearanceData.MarginBottom">
            <summary>
            Gets or sets bottom Margin of the label
            </summary>
        </member>
        <member name="T:Infragistics.LabelAppearanceDataList">
            <summary>
            Describes appearance information about a list of labels.
            </summary>
        </member>
        <member name="M:Infragistics.LabelAppearanceDataList.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="T:Infragistics.BrushAppearanceData">
            <summary>
            Describes appearance information about Brush data
            </summary>
        </member>
        <member name="M:Infragistics.BrushAppearanceData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.BrushAppearanceData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.BrushAppearanceData.Type">
            <summary> Gets or sets the Type of Brush data </summary>
        </member>
        <member name="T:Infragistics.SolidBrushAppearanceData">
            <summary>
            Describes appearance information about Solid Brush data
            </summary>
        </member>
        <member name="M:Infragistics.SolidBrushAppearanceData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.SolidBrushAppearanceData.Type">
            <summary> Gets or sets the Type of Brush data </summary>
        </member>
        <member name="P:Infragistics.SolidBrushAppearanceData.ColorValue">
            <summary> Gets or sets the Color of Brush data </summary>
        </member>
        <member name="T:Infragistics.LinearGradientBrushAppearanceData">
            <summary>
            Describes appearance information about Linear Gradient Brush data
            </summary>
        </member>
        <member name="M:Infragistics.LinearGradientBrushAppearanceData.#ctor">
            <summary>
            Creates an instance of Brush data
            </summary>
        </member>
        <member name="M:Infragistics.LinearGradientBrushAppearanceData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.LinearGradientBrushAppearanceData.Type">
            <summary> Gets or sets the Type of Brush data </summary>
        </member>
        <member name="P:Infragistics.LinearGradientBrushAppearanceData.StartX">
            <summary> Gets or sets the StartX of Brush data </summary>
        </member>
        <member name="P:Infragistics.LinearGradientBrushAppearanceData.StartY">
            <summary> Gets or sets the StartY of Brush data </summary>
        </member>
        <member name="P:Infragistics.LinearGradientBrushAppearanceData.EndX">
            <summary> Gets or sets the EndX of Brush data </summary>
        </member>
        <member name="P:Infragistics.LinearGradientBrushAppearanceData.EndY">
            <summary> Gets or sets the EndY of Brush data </summary>
        </member>
        <member name="P:Infragistics.LinearGradientBrushAppearanceData.Stops">
            <summary>
            Gets or sets the Gradient Stops
            </summary>
        </member>
        <member name="T:Infragistics.GradientStopAppearanceData">
            <summary>
            Describes appearance information about Gradient Stop.
            </summary>
        </member>
        <member name="M:Infragistics.GradientStopAppearanceData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.GradientStopAppearanceData.ColorValue">
            <summary>
            The color of the Gradient Stop
            </summary>
        </member>
        <member name="P:Infragistics.GradientStopAppearanceData.Offset">
            <summary>
            The Offset of the Gradient Stop
            </summary>
        </member>
        <member name="T:Infragistics.PrimitiveAppearanceData">
            <summary>
            Describes appearance information about a primitive element.
            </summary>
        </member>
        <member name="M:Infragistics.PrimitiveAppearanceData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.PrimitiveAppearanceData.Stroke">
            <summary>
            The stroke color of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.PrimitiveAppearanceData.StrokeExtended">
            <summary>
            The stroke color of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.PrimitiveAppearanceData.Fill">
            <summary>
            The fill color of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.PrimitiveAppearanceData.FillExtended">
            <summary>
            The fill color of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.PrimitiveAppearanceData.StrokeThickness">
            <summary>
            The thickness of the stroke of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.PrimitiveAppearanceData.Visibility">
            <summary>
            Whether the primitive is visible.
            </summary>
        </member>
        <member name="P:Infragistics.PrimitiveAppearanceData.Opacity">
            <summary>
            The opacity of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.PrimitiveAppearanceData.CanvasLeft">
            <summary>
            The left position of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.PrimitiveAppearanceData.CanvasTop">
            <summary>
            The top position of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.PrimitiveAppearanceData.CanvaZIndex">
            <summary>
            The z index of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.PrimitiveAppearanceData.DashArray">
            <summary>
            Stroke dash array of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.PrimitiveAppearanceData.DashCap">
            <summary>
            The value of the line dash cap.
            </summary>
        </member>
        <member name="T:Infragistics.GetPointsSettings">
            <summary>
            Describes how point saliency is determined.
            </summary>
        </member>
        <member name="P:Infragistics.GetPointsSettings.IgnoreFigureStartPoint">
            <summary>
            Describes whether the start element of shapes should be ignored due to duplicate points.
            </summary>
        </member>
        <member name="T:Infragistics.PrimitiveVisualData">
            <summary>
            Describes information about a primitive visual element.
            </summary>
        </member>
        <member name="M:Infragistics.PrimitiveVisualData.#ctor">
            <summary>
            Constructs a PrimitiveVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.PrimitiveVisualData.#ctor(System.String)">
            <summary>
            Constructs a primitive visual element.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="M:Infragistics.PrimitiveVisualData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.PrimitiveVisualData.GetPoints(Infragistics.GetPointsSettings)">
            <summary>
            Gets the salient points associated with this visual element.
            </summary>
            <param name="settings">Describes how point saliency should be determined.</param>
            <returns>Groupings of points associated with the element.</returns>
        </member>
        <member name="M:Infragistics.PrimitiveVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="M:Infragistics.PrimitiveVisualData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.PrimitiveVisualData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.PrimitiveVisualData.Appearance">
            <summary>
            The visual appearance of the element.
            </summary>
        </member>
        <member name="P:Infragistics.PrimitiveVisualData.Tags">
            <summary>
            Information tags that categorize the intent of the element.
            </summary>
        </member>
        <member name="P:Infragistics.PrimitiveVisualData.Type">
            <summary>
            The type of the visual element.
            </summary>
        </member>
        <member name="P:Infragistics.PrimitiveVisualData.Name">
            <summary>
            The name of the visual element.
            </summary>
        </member>
        <member name="T:Infragistics.RectangleVisualData">
            <summary>
            Describes visual information for a rectangle visual.
            </summary>
        </member>
        <member name="M:Infragistics.RectangleVisualData.#ctor">
            <summary>
            Constructs a RectangleVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.RectangleVisualData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.RectangleVisualData.#ctor(System.String,System.Windows.Shapes.Rectangle)">
            <summary>
            Constructs a RectangleVisualData based on a source Rectangle.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="rect">The source Rectangle.</param>
        </member>
        <member name="M:Infragistics.RectangleVisualData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.RectangleVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.RectangleVisualData.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.RectangleVisualData.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.RectangleVisualData.RadiusX">
            <summary>
            X-radius of the ellipse used to round corners.
            </summary>
        </member>
        <member name="P:Infragistics.RectangleVisualData.RadiusY">
            <summary>
            Y-radius of the ellipse used to round corners.
            </summary>
        </member>
        <member name="P:Infragistics.RectangleVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="T:Infragistics.ShapeTags">
            <summary>
            Represents categorical information to provide context for a visual element.
            </summary>
        </member>
        <member name="T:Infragistics.LineVisualData">
            <summary>
            Describes visual information for a line visual.
            </summary>
        </member>
        <member name="M:Infragistics.LineVisualData.#ctor">
            <summary>
            Constructs a LineVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.LineVisualData.#ctor(System.String,System.Windows.Shapes.Line)">
            <summary>
            Constructs a LineVisualData based on a source Line.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="line">The source Line.</param>
        </member>
        <member name="M:Infragistics.LineVisualData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.LineVisualData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.LineVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.LineVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.LineVisualData.X1">
            <summary>
            The x position of the end of the line.
            </summary>
        </member>
        <member name="P:Infragistics.LineVisualData.Y1">
            <summary>
            The y position of the end of the line.
            </summary>
        </member>
        <member name="P:Infragistics.LineVisualData.X2">
            <summary>
            The x position of the end of the line.
            </summary>
        </member>
        <member name="P:Infragistics.LineVisualData.Y2">
            <summary>
            The y position of the end of the line.
            </summary>
        </member>
        <member name="T:Infragistics.PolyLineVisualData">
            <summary>
            Describes visual information for a polyline visual.
            </summary>
        </member>
        <member name="M:Infragistics.PolyLineVisualData.#ctor">
            <summary>
            Constructs a PolyLineVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.PolyLineVisualData.#ctor(System.String,System.Windows.Shapes.Polyline)">
            <summary>
            Constructs a PolyLineVisualData based on a source Polyline.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="line">The source Polyline.</param>
        </member>
        <member name="M:Infragistics.PolyLineVisualData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.PolyLineVisualData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.PolyLineVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.PolyLineVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.PolyLineVisualData.Points">
            <summary>
            The points in the polyline.
            </summary>
        </member>
        <member name="T:Infragistics.PolygonVisualData">
            <summary>
            Describes visual information for a polygon visual.
            </summary>
        </member>
        <member name="M:Infragistics.PolygonVisualData.#ctor">
            <summary>
            Constructs a PolygonVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.PolygonVisualData.#ctor(System.String,System.Windows.Shapes.Polygon)">
            <summary>
            Constructs a PolygonVisualData based on a source Polygon.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="polygon"></param>
        </member>
        <member name="M:Infragistics.PolygonVisualData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.PolygonVisualData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.PolygonVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.PolygonVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.PolygonVisualData.Points">
            <summary>
            The points in the polygon.
            </summary>
        </member>
        <member name="T:Infragistics.PathVisualData">
            <summary>
            Describes visual information for a path visual.
            </summary>
        </member>
        <member name="M:Infragistics.PathVisualData.#ctor">
            <summary>
            Constructs a PathVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.PathVisualData.#ctor(System.String,System.Windows.Shapes.Path)">
            <summary>
            Constructs a PathVisualData based on a source Path.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="path">The source Path.</param>
        </member>
        <member name="M:Infragistics.PathVisualData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.PathVisualData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.PathVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.PathVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.PathVisualData.Data">
            <summary>
            The data in the path.
            </summary>
        </member>
        <member name="T:Infragistics.GeometryData">
            <summary>
            Describes visual information for a geometry visual.
            </summary>
        </member>
        <member name="M:Infragistics.GeometryData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.GeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="M:Infragistics.GeometryData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.GeometryData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.GeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="T:Infragistics.PathGeometryData">
            <summary>
            Describes visual information for a path geometry.
            </summary>
        </member>
        <member name="M:Infragistics.PathGeometryData.#ctor">
            <summary>
            Constructs a PathGeometryData.
            </summary>
        </member>
        <member name="M:Infragistics.PathGeometryData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.PathGeometryData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.PathGeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.PathGeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.PathGeometryData.Figures">
            <summary>
            The figures in the path.
            </summary>
        </member>
        <member name="T:Infragistics.LineGeometryData">
            <summary>
            Describes visual information for a line geometry.
            </summary>
        </member>
        <member name="M:Infragistics.LineGeometryData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.LineGeometryData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.LineGeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.LineGeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.LineGeometryData.X1">
            <summary>
            The x position of the start of the line.
            </summary>
        </member>
        <member name="P:Infragistics.LineGeometryData.Y1">
            <summary>
            The y position of the start of the line.
            </summary>
        </member>
        <member name="P:Infragistics.LineGeometryData.X2">
            <summary>
            The x position of the end of the line.
            </summary>
        </member>
        <member name="P:Infragistics.LineGeometryData.Y2">
            <summary>
            The y position of the end of the line.
            </summary>
        </member>
        <member name="T:Infragistics.RectangleGeometryData">
            <summary>
            Describes visual information for a rectangle geometry.
            </summary>
        </member>
        <member name="M:Infragistics.RectangleGeometryData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.RectangleGeometryData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.RectangleGeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.RectangleGeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.RectangleGeometryData.X">
            <summary>
            The x position of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.RectangleGeometryData.Y">
            <summary>
            The y position of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.RectangleGeometryData.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.RectangleGeometryData.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="T:Infragistics.EllipseGeometryData">
            <summary>
            Describes visual information for an ellipse geometry.
            </summary>
        </member>
        <member name="M:Infragistics.EllipseGeometryData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.EllipseGeometryData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.EllipseGeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.EllipseGeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.EllipseGeometryData.CenterX">
            <summary>
            The x coordinate of the center of the ellipse.
            </summary>
        </member>
        <member name="P:Infragistics.EllipseGeometryData.CenterY">
            <summary>
            The y coordinate of the center of the ellipse.
            </summary>
        </member>
        <member name="P:Infragistics.EllipseGeometryData.RadiusX">
            <summary>
            The x radius of the ellipse.
            </summary>
        </member>
        <member name="P:Infragistics.EllipseGeometryData.RadiusY">
            <summary>
            The y radius of the ellipse.
            </summary>
        </member>
        <member name="T:Infragistics.PathFigureData">
            <summary>
            Describes visual information for a path figure.
            </summary>
        </member>
        <member name="M:Infragistics.PathFigureData.#ctor">
            <summary>
            Constructs a PathFigureData.
            </summary>
        </member>
        <member name="M:Infragistics.PathFigureData.#ctor(System.Windows.Media.PathFigure)">
            <summary>
            Constructs a PathFigureData based on a source PathFigure.
            </summary>
            <param name="fig">The source PathFigure.</param>
        </member>
        <member name="M:Infragistics.PathFigureData.Serialize">
            <summary>
            Serialize this object to a string
            </summary>
        </member>
        <member name="M:Infragistics.PathFigureData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.PathFigureData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.PathFigureData.StartPoint">
            <summary>
            The start point of the path.
            </summary>
        </member>
        <member name="P:Infragistics.PathFigureData.Segments">
            <summary>
            The segments in the path.
            </summary>
        </member>
        <member name="T:Infragistics.SegmentData">
            <summary>
            Describes visual information for a segment.
            </summary>
        </member>
        <member name="M:Infragistics.SegmentData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.SegmentData.GetPointsOverride(System.Collections.Generic.List{System.Windows.Point},Infragistics.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="M:Infragistics.SegmentData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.SegmentData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.SegmentData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="T:Infragistics.LineSegmentData">
            <summary>
            Describes visual information for a line segment.
            </summary>
        </member>
        <member name="M:Infragistics.LineSegmentData.#ctor">
            <summary>
            Constructs a LineSegmentData.
            </summary>
        </member>
        <member name="M:Infragistics.LineSegmentData.#ctor(System.Windows.Media.LineSegment)">
            <summary>
            Constructs a LineSegmentData based on a source LineSegment.
            </summary>
            <param name="seg">The source LineSegment.</param>
        </member>
        <member name="M:Infragistics.LineSegmentData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.LineSegmentData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.LineSegmentData.GetPointsOverride(System.Collections.Generic.List{System.Windows.Point},Infragistics.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.LineSegmentData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.LineSegmentData.Point">
            <summary>
            The end point of the line segment.
            </summary>
        </member>
        <member name="T:Infragistics.PolylineSegmentData">
            <summary>
            Describes visual information for a polyline segment.
            </summary>
        </member>
        <member name="M:Infragistics.PolylineSegmentData.#ctor">
            <summary>
            Constructs a PolylineSegmentData.
            </summary>
        </member>
        <member name="M:Infragistics.PolylineSegmentData.#ctor(System.Windows.Media.PolyLineSegment)">
            <summary>
            Constructs a PolylineSegmentData based on a source PolyLineSegment.
            </summary>
            <param name="poly">The source PolylineSegment.</param>
        </member>
        <member name="M:Infragistics.PolylineSegmentData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.PolylineSegmentData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.PolylineSegmentData.GetPointsOverride(System.Collections.Generic.List{System.Windows.Point},Infragistics.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.PolylineSegmentData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.PolylineSegmentData.Points">
            <summary>
            The points in the segment.
            </summary>
        </member>
        <member name="T:Infragistics.PolyBezierSegmentData">
            <summary>
            Information data about a bezier spline segment.
            </summary>
        </member>
        <member name="M:Infragistics.PolyBezierSegmentData.#ctor">
            <summary>
            Constructs a PolylineSegmentData.
            </summary>
        </member>
        <member name="M:Infragistics.PolyBezierSegmentData.#ctor(System.Windows.Media.PolyBezierSegment)">
            <summary>
            Constructs a PolylineSegmentData based on a source PolyLineSegment.
            </summary>
            <param name="poly">The source PolylineSegment.</param>
        </member>
        <member name="M:Infragistics.PolyBezierSegmentData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.PolyBezierSegmentData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.PolyBezierSegmentData.GetPointsOverride(System.Collections.Generic.List{System.Windows.Point},Infragistics.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.PolyBezierSegmentData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.PolyBezierSegmentData.Points">
            <summary>
            The points in the segment.
            </summary>
        </member>
        <member name="T:Infragistics.ArcSegmentData">
            <summary>
            Information data about an arc segment.
            </summary>
        </member>
        <member name="M:Infragistics.ArcSegmentData.#ctor">
            <summary>
            Constructs an ArcSegmentData
            </summary>
        </member>
        <member name="M:Infragistics.ArcSegmentData.#ctor(System.Windows.Media.ArcSegment)">
            <summary>
            Constructs an ArcSegmentData based on a source arc.
            </summary>
            <param name="arc">The arc to extract data from.</param>
        </member>
        <member name="M:Infragistics.ArcSegmentData.SerializeOverride">
            <summary>
            Overrides serialization of this object
            </summary>
        </member>
        <member name="M:Infragistics.ArcSegmentData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.ArcSegmentData.GetPointsOverride(System.Collections.Generic.List{System.Windows.Point},Infragistics.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.ArcSegmentData.Type">
            <summary>
            The type of this data.
            </summary>
        </member>
        <member name="P:Infragistics.ArcSegmentData.Point">
            <summary>
            The center point of the arc.
            </summary>
        </member>
        <member name="P:Infragistics.ArcSegmentData.IsLargeArc">
            <summary>
            Whether the arc is a large arc.
            </summary>
        </member>
        <member name="P:Infragistics.ArcSegmentData.IsCounterClockwise">
            <summary>
            The sweep direction of the arc.
            </summary>
        </member>
        <member name="P:Infragistics.ArcSegmentData.SizeX">
            <summary>
            The x size os the arg.
            </summary>
        </member>
        <member name="P:Infragistics.ArcSegmentData.SizeY">
            <summary>
            The y size of the arc.
            </summary>
        </member>
        <member name="P:Infragistics.ArcSegmentData.RotationAngle">
            <summary>
            The rotation angle of the arc.
            </summary>
        </member>
        <member name="T:Infragistics.AppearanceHelper">
            <summary>
            Assists in storing information about chart visual appearance.
            </summary>
        </member>
        <member name="M:Infragistics.AppearanceHelper.FromBrush(System.Windows.Media.Brush)">
            <summary>
            Returns the color from a brush.
            </summary>
            <param name="b">The brush to extract the color from.</param>
            <returns>The returned color.</returns>
        </member>
        <member name="M:Infragistics.AppearanceHelper.FromBrushExtended(System.Windows.Media.Brush)">
            <summary>
            Gets brush appearance data from brush object
            </summary>
        </member>
        <member name="M:Infragistics.AppearanceHelper.GetCanvasLeft(System.Windows.FrameworkElement)">
            <summary>
            Gets the left position of an element.
            </summary>
            <param name="visual">The element to get the left position of.</param>
            <returns>The left position.</returns>
        </member>
        <member name="M:Infragistics.AppearanceHelper.GetCanvasTop(System.Windows.FrameworkElement)">
            <summary>
            Gets the top position of an element.
            </summary>
            <param name="line">The element to get the top position of.</param>
            <returns>The top position.</returns>
        </member>
        <member name="M:Infragistics.AppearanceHelper.GetCanvasZIndex(System.Windows.FrameworkElement)">
            <summary>
            Gets the z-index of an element.
            </summary>
            <param name="line">The element to get the z index of</param>
            <returns>The z index of the element.</returns>
        </member>
        <member name="M:Infragistics.AppearanceHelper.FromPathData(System.Windows.Shapes.Path)">
            <summary>
            Gets the geometry data for a path.
            </summary>
            <param name="path">The path to get data for.</param>
            <returns>The geometry data for a path.</returns>
        </member>
        <member name="M:Infragistics.AppearanceHelper.FromGeometry(System.Windows.Media.Geometry)">
            <summary>
            Gets data about the provided geometry.
            </summary>
            <param name="data">The geometry to get data for.</param>
            <returns>The list of geometry data extracted.</returns>
        </member>
        <member name="M:Infragistics.AppearanceHelper.GetShapeAppearance(Infragistics.PrimitiveAppearanceData,System.Windows.Shapes.Shape)">
            <summary>
            Gets appearance information for a shape.
            </summary>
            <param name="appearance">The appearance information to populate.</param>
            <param name="path">The shape from which to get information.</param>
        </member>
        <member name="M:Infragistics.AppearanceHelper.FromTextElement(System.Windows.FrameworkElement,Infragistics.FontInfo)">
            <summary>
            Gets appearance information from a text element.
            </summary>
            <param name="frameworkElement">The text element to examine.</param>
            <param name="fontInfo">The font info to examine</param>
            <returns>The label appearance information obtained.</returns>
        </member>
        <member name="M:Infragistics.AppearanceHelper.SerializeColor(System.Windows.Media.Color)">
            <summary>
            Serializes a color object to a string in format: {R:, G:, B:, A:}
            </summary>
        </member>
        <member name="M:Infragistics.AppearanceHelper.SerializeItems(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{Infragistics.IVisualData},System.Boolean)">
            <summary>
            Serializes the items into the specified string builder.
            </summary>
            <param name="sb">The string builder into which the item information should be added</param>
            <param name="name">The name of the property that returns the items</param>
            <param name="items">The collection of items to be serialized</param>
            <param name="isFirst">First if a leading comma isn't needed</param>
            <returns>Returns true if the items were added to the string building; otherwise false is returned.</returns>
        </member>
        <member name="M:Infragistics.AppearanceHelper.SerializeItem(System.Text.StringBuilder,System.String,Infragistics.IVisualData,System.Boolean)">
            <summary>
            Serializes the item into the specified string builder.
            </summary>
            <param name="sb">The string builder into which the item information should be added</param>
            <param name="name">The name of the property that returns the items</param>
            <param name="item">The item to be serialized</param>
            <param name="isFirst">First if a leading comma isn't needed</param>
            <returns>Returns true if the item was added to the string building; otherwise false is returned.</returns>
        </member>
        <member name="T:Infragistics.InteractionHelper">
            <summary>
            The InteractionHelper provides controls with support for all of the
            common interactions like mouse movement, mouse clicks, key presses,
            etc., and also incorporates proper event semantics when the control is
            disabled.
            </summary>
        </member>
        <member name="F:Infragistics.InteractionHelper.SequentialClickThresholdInMilliseconds">
            <summary>
            The threshold used to determine whether two clicks are temporally
            local and considered a double click (or triple, quadruple, etc.).
            500 milliseconds is the default double click value on Windows.
            This value would ideally be pulled form the system settings.
            </summary>
        </member>
        <member name="F:Infragistics.InteractionHelper.SequentialClickThresholdInPixelsSquared">
            <summary>
            The threshold used to determine whether two clicks are spatially
            local and considered a double click (or triple, quadruple, etc.)
            in pixels squared.  We use pixels squared so that we can compare to
            the distance delta without taking a square root.
            </summary>
        </member>
        <member name="F:Infragistics.InteractionHelper._updateVisualState">
            <summary>
            Reference used to call UpdateVisualState on the base class.
            </summary>
        </member>
        <member name="M:Infragistics.InteractionHelper.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the InteractionHelper class.
            </summary>
            <param name="control">Control receiving interaction.</param>
        </member>
        <member name="M:Infragistics.InteractionHelper.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
            <remarks>
            UpdateVisualState works differently than the rest of the injected
            functionality.  Most of the other events are overridden by the
            calling class which calls Allow, does what it wants, and then calls
            Base.  UpdateVisualState is the opposite because a number of the
            methods in InteractionHelper need to trigger it in the calling
            class.  We do this using the IUpdateVisualState internal interface.
            </remarks>
        </member>
        <member name="M:Infragistics.InteractionHelper.UpdateVisualStateBase(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:Infragistics.InteractionHelper.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the control's Loaded event.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Infragistics.InteractionHelper.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the control's IsEnabled property.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Infragistics.InteractionHelper.OnIsReadOnlyChanged(System.Boolean)">
            <summary>
            Handles changes to the control's IsReadOnly property.
            </summary>
            <param name="value">The value of the property.</param>        
        </member>
        <member name="M:Infragistics.InteractionHelper.OnApplyTemplateBase">
            <summary>
            Update the visual state of the control when its template is changed.
            </summary>
        </member>
        <member name="M:Infragistics.InteractionHelper.AllowGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's GotFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Infragistics.InteractionHelper.OnGotFocusBase">
            <summary>
            Base implementation of the virtual GotFocus event handler.
            </summary>
        </member>
        <member name="M:Infragistics.InteractionHelper.AllowLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's LostFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Infragistics.InteractionHelper.OnLostFocusBase">
            <summary>
            Base implementation of the virtual LostFocus event handler.
            </summary>
        </member>
        <member name="M:Infragistics.InteractionHelper.AllowMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseEnter event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Infragistics.InteractionHelper.OnMouseEnterBase">
            <summary>
            Base implementation of the virtual MouseEnter event handler.
            </summary>
        </member>
        <member name="M:Infragistics.InteractionHelper.AllowMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseLeave event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Infragistics.InteractionHelper.OnMouseLeaveBase">
            <summary>
            Base implementation of the virtual MouseLeave event handler.
            </summary>
        </member>
        <member name="M:Infragistics.InteractionHelper.AllowMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Infragistics.InteractionHelper.OnMouseLeftButtonDownBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonDown event
            handler.
            </summary>
        </member>
        <member name="M:Infragistics.InteractionHelper.AllowMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Infragistics.InteractionHelper.OnMouseLeftButtonUpBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonUp event handler.
            </summary>
        </member>
        <member name="M:Infragistics.InteractionHelper.AllowKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Infragistics.InteractionHelper.AllowKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Infragistics.InteractionHelper.GetLogicalKey(System.Windows.FlowDirection,System.Windows.Input.Key)">
            <summary>
            Translates keys for proper RightToLeft mode support.
            </summary>
            <param name="flowDirection">Control's flow direction mode.</param>
            <param name="originalKey">Original key.</param>
            <returns>
            A translated key code, indicating how the original key should be interpreted.
            </returns>
        </member>
        <member name="P:Infragistics.InteractionHelper.Control">
            <summary>
            Gets the control the InteractionHelper is targeting.
            </summary>
        </member>
        <member name="P:Infragistics.InteractionHelper.IsFocused">
            <summary>
            Gets a value indicating whether the control has focus.
            </summary>
        </member>
        <member name="P:Infragistics.InteractionHelper.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary> 
        </member>
        <member name="P:Infragistics.InteractionHelper.IsReadOnly">
            <summary>
            Gets a value indicating whether the read-only property is set.
            </summary>        
        </member>
        <member name="P:Infragistics.InteractionHelper.IsPressed">
            <summary>
            Gets a value indicating whether the mouse button is pressed down
            over the control.
            </summary>
        </member>
        <member name="P:Infragistics.InteractionHelper.LastClickTime">
            <summary>
            Gets or sets the last time the control was clicked.
            </summary>
            <remarks>
            The value is stored as Utc time because it is slightly more
            performant than converting to local time.
            </remarks>
        </member>
        <member name="P:Infragistics.InteractionHelper.LastClickPosition">
            <summary>
            Gets or sets the mouse position of the last click.
            </summary>
            <remarks>The value is relative to the control.</remarks>
        </member>
        <member name="P:Infragistics.InteractionHelper.ClickCount">
            <summary>
            Gets the number of times the control was clicked.
            </summary>
        </member>
        <member name="T:Infragistics.IUpdateVisualState">
            <summary>
            The IUpdateVisualState interface is used to provide the
            InteractionHelper with access to the type's UpdateVisualState method.
            </summary>
        </member>
        <member name="M:Infragistics.IUpdateVisualState.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="T:Infragistics.VisualStates">
            <summary>
            Names and helpers for visual states in the controls.
            </summary>
        </member>
        <member name="F:Infragistics.VisualStates.GroupCommon">
            <summary>
            Common state group.
            </summary>
        </member>
        <member name="F:Infragistics.VisualStates.StateNormal">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:Infragistics.VisualStates.StateReadOnly">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:Infragistics.VisualStates.StateMouseOver">
            <summary>
            MouseOver state of the Common state group.
            </summary>
        </member>
        <member name="F:Infragistics.VisualStates.StatePressed">
            <summary>
            Pressed state of the Common state group.
            </summary>
        </member>
        <member name="F:Infragistics.VisualStates.StateDisabled">
            <summary>
            Disabled state of the Common state group.
            </summary>
        </member>
        <member name="F:Infragistics.VisualStates.GroupFocus">
            <summary>
            Focus state group.
            </summary>
        </member>
        <member name="F:Infragistics.VisualStates.StateUnfocused">
            <summary>
            Unfocused state of the Focus state group.
            </summary>
        </member>
        <member name="F:Infragistics.VisualStates.StateFocused">
            <summary>
            Focused state of the Focus state group.
            </summary>
        </member>
        <member name="F:Infragistics.VisualStates.GroupSelection">
            <summary>
            Selection state group.
            </summary>
        </member>
        <member name="F:Infragistics.VisualStates.StateSelected">
            <summary>
            Selected state of the Selection state group.
            </summary>
        </member>
        <member name="F:Infragistics.VisualStates.StateUnselected">
            <summary>
            Unselected state of the Selection state group.
            </summary>
        </member>
        <member name="F:Infragistics.VisualStates.StateSelectedInactive">
            <summary>
            Selected inactive state of the Selection state group.
            </summary>
        </member>
        <member name="F:Infragistics.VisualStates.GroupVisibility">
            <summary>
            BusyDisplay group.
            </summary>
        </member>
        <member name="F:Infragistics.VisualStates.StateVisible">
            <summary>
            Visible state name for BusyIndicator.
            </summary>
        </member>
        <member name="F:Infragistics.VisualStates.StateHidden">
            <summary>
            Hidden state name for BusyIndicator.
            </summary>
        </member>
        <member name="M:Infragistics.VisualStates.GoToState(System.Windows.Controls.Control,System.Boolean,System.String[])">
            <summary>
            Use VisualStateManager to change the visual state of the control.
            </summary>
            <param name="control">
            Control whose visual state is being changed.
            </param>
            <param name="useTransitions">
            A value indicating whether to use transitions when updating the
            visual state, or to snap directly to the new visual state.
            </param>
            <param name="stateNames">
            Ordered list of state names and fallback states to transition into.
            Only the first state to be found will be used.
            </param>
        </member>
        <member name="M:Infragistics.VisualStates.GetImplementationRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <param name="dependencyObject">The DependencyObject.</param>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
            <returns>Returns the implementation root or null.</returns>
        </member>
        <member name="M:Infragistics.VisualStates.TryGetVisualStateGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            This method tries to get the named VisualStateGroup for the 
            dependency object. The provided object's ImplementationRoot will be 
            looked up in this call.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="groupName">The visual state group's name.</param>
            <returns>Returns null or the VisualStateGroup object.</returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.IMapRenderDeferralHandler">
            <summary>
            Interface for handling deferred rendering under Infragistics map controls.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.IMapRenderDeferralHandler.Register(System.Windows.DependencyObject,System.Action{System.Boolean})">
            <summary>
            Registers the given DependencyObject for deferred rendering.
            </summary>
            <param name="source">The DependencyObject to register for deferred rendering.</param>
            <param name="refresh">An action to take each time a refresh is called for.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.IMapRenderDeferralHandler.UnRegister(System.Windows.DependencyObject)">
            <summary>
            Unregisters the given DependencyObject for deferred rendering.
            </summary>
            <param name="source">The DependencyObject to unregister for deferred rendering.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.IMapRenderDeferralHandler.DeferredRefresh">
            <summary>
            Call for a deferred refresh.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.XamMultiScaleImage">
            <summary>
            The Infragistics MultiScaleImage control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMultiScaleImage.#ctor">
            <summary>
            XamMultiScaleImage constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMultiScaleImage.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMultiScaleImage.SourceProperty">
            <summary>
            Identifies the Source dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMultiScaleImage.ViewportOriginProperty">
            <summary>
            Identifies the ViewportOrigin dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMultiScaleImage.ViewportWidthProperty">
            <summary>
            Identifies the ViewportWidth dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMultiScaleImage.UseSpringsProperty">
            <summary>
            Identifies the UseSprings dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMultiScaleImage.SpringsEasingFunctionProperty">
            <summary>
            Identifies the SpringsEasingFunction dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMultiScaleImage.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Method invoked whenever a property value on this XamMultiScaleImage has been changed.
            </summary>
            <param name="ea">The PropertyChangedEventArgs in context.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleImage.ContentPresenter">
            <summary>
            The main ContentPresenter UIElement which comes from the ControlTemplate of this MultiScaleImage control.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleImage.DeferralHandler">
            <summary>
            The deferral handler to use for deferred refreshes.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleImage.Source">
            <summary>
            The TileSource to use for tiles in this XamMultiScaleImage.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleImage.ViewportOrigin">
            <summary>
            The origin point of the MultiScaleImage Viewport.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleImage.ViewportWidth">
            <summary>
            The Width of the MultiScaleImage Viewport.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleImage.UseSprings">
            <summary>
            Boolean indicating whether or not dampening should be used during pan operations.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleImage.SpringsEasingFunction">
            <summary>
            The easing function to use for dampening during pan operations.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Maps.XamMultiScaleImage.PropertyChanged">
            <summary>
            Event raised whenever a property value on this XamMultiScaleImage has been changed.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.Pair`2">
            <summary>
            Represents an immutable pair of values.
            </summary>
            <typeparam name="T1">The type of the first value in the pair.</typeparam>
            <typeparam name="T2">The type of the second value in the pair.</typeparam>
        </member>
        <member name="T:Infragistics.Controls.Maps.ImageStreamValidEventArgs">
            <summary>
            Provides information to be used to determine if a map image is valid.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.ImageStreamValidEventArgs.#ctor(System.IO.Stream)">
            <summary>
            Constructs an ImageStreamValidEventArgs.
            </summary>
            <param name="stream">The stream to be validated.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.ImageStreamValidEventArgs.Stream">
            <summary>
            The stream containing the image bytes for validation.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.ImageStreamValidEventHandler">
            <summary>
            A handler to assert if a given map image is valid.
            </summary>
            <param name="sender">The source of the image to validate.</param>
            <param name="args">Information about the image to be validated.</param>
            <returns></returns>
        </member>
    </members>
</doc>
